import{uml as $}from"@mdit/plugin-uml";import{encodeData as v,Logger as j,getRealPath as r,addViteOptimizeDepsExclude as g,addViteSsrExternal as f}from"@vuepress/helper";const c=t=>{t.use($,{name:"revealjs",open:"slidestart",close:"slideend",render:(n,s)=>{const i=n[s],e=`revealjs-${s}`,{content:a,info:l}=i;return`<RevealJs id="${e}" code="${v(a)}" theme="${l.trim()||"auto"}"></RevealJs>`}})},o="@vuepress/plugin-revealjs";new j(o);const w=r(`${o}/client`,import.meta.url),y=[["auto"],["beige",["lato"]],["black"],["blood",["ubuntu"]],["league"],["moon"],["night",["montserrat","open-sans"]],["serif"],["simple",["lato","news-cycle"]],["sky",["open-sans","quicksand"]],["solarized",["lato"]],["white"]],k=async(t,n,s)=>{const i=new Set(["league-gothic","source-sans-pro"]),e=new Set;return n.forEach(a=>{const l=y.find(([m])=>m===a);if(l){const[m,u]=l;e.add(m),u?.forEach(d=>i.add(d))}}),t.writeTemp("revealjs/config.js",`import { RevealJs, injectRevealJsConfig } from "${w}";
${s?`import { SlidePage } from "${r(`${o}/layouts`,import.meta.url)}";
`:""}
import "${r("reveal.js/dist/reveal.css",import.meta.url)}";
import "${r(`${o}/styles/base.css`,import.meta.url)}";
import "${r(`${o}/styles/vars.css`,import.meta.url)}";
${Array.from(i).map(a=>`import "${r(`${o}/styles/fonts/${a}.css`,import.meta.url)}";`).join(`
`)}
${Array.from(e).map(a=>`import "${r(`${o}/styles/themes/${a}.css`,import.meta.url)}";`).join(`
`)}

export default {
  enhance: ({ app }) => {
    injectRevealJsConfig(app)
    app.component("RevealJs", RevealJs)
  },
${s?`  layouts: { "${s}": SlidePage },
`:""}};
`)},{url:p}=import.meta,h=async(t,n)=>{await t.writeTemp("revealjs/index.js",`export const useRevealJs = () => [
  import(/* webpackChunkName: "reveal" */ "${r("reveal.js/dist/reveal.esm.js",p)}"),
  import(/* webpackChunkName: "reveal" */ "${r("reveal.js/plugin/markdown/markdown.esm.js",p)}"),
${n.map(s=>`  import(/* webpackChunkName: "reveal" */ "${r(`reveal.js/plugin/${s}/${s}.esm.js`,p)}")`).join(`,
`)}
];
`)},J=({plugins:t=[],themes:n=["auto"],layout:s="SlidePage",delay:i=800}={})=>({name:o,define:{__REVEAL_DELAY__:i},extendsBundlerOptions:(e,a)=>{g(e,a,["reveal.js/dist/reveal.esm.js","reveal.js/plugin/markdown/markdown.esm.js",...t.map(l=>`reveal.js/plugin/${l}/${l}.esm.js`)]),f(e,a,"reveal.js")},extendsMarkdown:e=>{e.use(c)},onPrepared:async e=>h(e,t),clientConfigFile:e=>k(e,n,s)});export{c as revealJs,J as revealJsPlugin};
//# sourceMappingURL=index.js.map
