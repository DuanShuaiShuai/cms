{"version":3,"file":"index.js","sources":["../../src/node/formatDate.ts","../../src/node/appendDate.ts","../../src/node/logger.ts","../../src/node/checkGitPlugin.ts","../../src/node/appendDatePlugin.ts"],"sourcesContent":["const padZero = (num: number, length = 2): string =>\n  num.toString().padStart(length, '0')\n\nconst getFullYear = (date: Date): string => padZero(date.getFullYear(), 4)\n\nconst getMonth = (date: Date): string => padZero(date.getMonth() + 1)\n\nconst getDate = (date: Date): string => padZero(date.getDate())\n\nconst getHours = (date: Date): string => padZero(date.getHours())\n\nconst getMinutes = (date: Date): string => padZero(date.getMinutes())\n\nconst getSeconds = (date: Date): string => padZero(date.getSeconds())\n\nexport const getDateString = (date: Date): string =>\n  `${getFullYear(date)}-${getMonth(date)}-${getDate(date)}`\n\nexport const getTimeString = (date: Date): string =>\n  `${getHours(date)}:${getMinutes(date)}:${getSeconds(date)}`\n\nexport const getFullDateString = (date: Date): string =>\n  `${getDateString(date)} ${getTimeString(date)}`\n","import { startsWith } from '@vuepress/helper'\nimport type { GitPluginPageData } from '@vuepress/plugin-git'\nimport type { Page } from 'vuepress/core'\nimport { fs } from 'vuepress/utils'\nimport {\n  getDateString,\n  getFullDateString,\n  getTimeString,\n} from './formatDate.js'\nimport type { AppendDatePluginOptions } from './options.js'\n\nexport const appendDateToPage = async (\n  { key = 'date', format = 'date' }: AppendDatePluginOptions,\n  { data, filePath, frontmatter }: Page<GitPluginPageData>,\n): Promise<void> => {\n  if (frontmatter[key] || !filePath) return\n\n  const { createdTime } = data.git\n\n  if (!createdTime) return\n\n  const date = new Date(createdTime)\n\n  const text =\n    format === 'time'\n      ? getTimeString(date)\n      : format === 'full'\n        ? getFullDateString(date)\n        : getDateString(date)\n\n  frontmatter[key] = new Date(createdTime)\n\n  const markdownContent = await fs.readFile(filePath, 'utf-8')\n\n  await fs.writeFile(\n    filePath,\n    startsWith(markdownContent, '---\\n')\n      ? `---\\n${key}: ${text}\\n${markdownContent.substring(4)}`\n      : `---\\n${key}: ${text}\\n---\\n\\n${markdownContent}`,\n    'utf-8',\n  )\n}\n","import { Logger } from '@vuepress/helper'\n\nexport const PLUGIN_NAME = '@vuepress-plugin/append-date'\n\nexport const logger = new Logger(PLUGIN_NAME)\n","import { createRequire } from 'node:module'\nimport type { App } from 'vuepress/core'\nimport { colors } from 'vuepress/utils'\nimport { logger } from './logger.js'\n\nconst require = createRequire(import.meta.url)\n\nconst GIT_PLUGIN_NAME = '@vuepress/plugin-git'\n\nexport const isGitPluginEnabled = (app: App): boolean => {\n  if (\n    app.pluginApi.plugins.every((plugin) => plugin.name !== GIT_PLUGIN_NAME)\n  ) {\n    try {\n      require.resolve(GIT_PLUGIN_NAME)\n\n      logger.info(`${colors.magenta(GIT_PLUGIN_NAME)} is not enabled.`)\n\n      return false\n    } catch {\n      logger.error(\n        `${colors.magenta(\n          GIT_PLUGIN_NAME,\n        )} is required for this plugin, please install it.`,\n      )\n    }\n\n    return false\n  }\n\n  return true\n}\n","import type { GitPluginPageData } from '@vuepress/plugin-git'\nimport type { Page, PluginObject } from 'vuepress/core'\nimport { appendDateToPage } from './appendDate.js'\nimport { isGitPluginEnabled } from './checkGitPlugin.js'\nimport { PLUGIN_NAME } from './logger.js'\nimport type { AppendDatePluginOptions } from './options.js'\n\nexport const appendDatePlugin = (\n  options: AppendDatePluginOptions = {},\n): PluginObject => ({\n  name: PLUGIN_NAME,\n\n  onInitialized: async (app): Promise<void> => {\n    if (isGitPluginEnabled(app))\n      await Promise.all(\n        (app.pages as Page<GitPluginPageData>[]).map((page) =>\n          appendDateToPage(options, page),\n        ),\n      )\n  },\n})\n"],"names":["padZero","num","length","getFullYear","date","getMonth","getDate","getHours","getMinutes","getSeconds","getDateString","getTimeString","getFullDateString","appendDateToPage","key","format","data","filePath","frontmatter","createdTime","text","markdownContent","fs","startsWith","PLUGIN_NAME","logger","Logger","require","createRequire","GIT_PLUGIN_NAME","isGitPluginEnabled","app","plugin","colors","appendDatePlugin","options","page"],"mappings":"sJAAA,MAAMA,EAAU,CAACC,EAAaC,EAAS,IACrCD,EAAI,SAAA,EAAW,SAASC,EAAQ,GAAG,EAE/BC,EAAeC,GAAuBJ,EAAQI,EAAK,YAAe,EAAA,CAAC,EAEnEC,EAAYD,GAAuBJ,EAAQI,EAAK,SAAS,EAAI,CAAC,EAE9DE,EAAWF,GAAuBJ,EAAQI,EAAK,QAAS,CAAA,EAExDG,EAAYH,GAAuBJ,EAAQI,EAAK,SAAS,CAAC,EAE1DI,EAAcJ,GAAuBJ,EAAQI,EAAK,YAAY,EAE9DK,EAAcL,GAAuBJ,EAAQI,EAAK,WAAA,CAAY,EAEvDM,EAAiBN,GAC5B,GAAGD,EAAYC,CAAI,CAAC,IAAIC,EAASD,CAAI,CAAC,IAAIE,EAAQF,CAAI,CAAC,GAE5CO,EAAiBP,GAC5B,GAAGG,EAASH,CAAI,CAAC,IAAII,EAAWJ,CAAI,CAAC,IAAIK,EAAWL,CAAI,CAAC,GAE9CQ,EAAqBR,GAChC,GAAGM,EAAcN,CAAI,CAAC,IAAIO,EAAcP,CAAI,CAAC,GCXlCS,EAAmB,MAC9B,CAAE,IAAAC,EAAM,OAAQ,OAAAC,EAAS,MAAO,EAChC,CAAE,KAAAC,EAAM,SAAAC,EAAU,YAAAC,CAAY,IACZ,CAClB,GAAIA,EAAYJ,CAAG,GAAK,CAACG,EAAU,OAEnC,KAAM,CAAE,YAAAE,CAAY,EAAIH,EAAK,IAE7B,GAAI,CAACG,EAAa,OAElB,MAAMf,EAAO,IAAI,KAAKe,CAAW,EAE3BC,EACJL,IAAW,OACPJ,EAAcP,CAAI,EAClBW,IAAW,OACTH,EAAkBR,CAAI,EACtBM,EAAcN,CAAI,EAE1Bc,EAAYJ,CAAG,EAAI,IAAI,KAAKK,CAAW,EAEvC,MAAME,EAAkB,MAAMC,EAAG,SAASL,EAAU,OAAO,EAE3D,MAAMK,EAAG,UACPL,EACAM,EAAWF,EAAiB;AAAA,CAAO,EAC/B;AAAA,EAAQP,CAAG,KAAKM,CAAI;AAAA,EAAKC,EAAgB,UAAU,CAAC,CAAC,GACrD;AAAA,EAAQP,CAAG,KAAKM,CAAI;AAAA;AAAA;AAAA,EAAYC,CAAe,GACnD,OACF,CACF,ECvCaG,EAAc,+BAEdC,EAAS,IAAIC,EAAOF,CAAW,ECCtCG,EAAUC,EAAc,YAAY,GAAG,EAEvCC,EAAkB,uBAEXC,EAAsBC,GAAsB,CACvD,GACEA,EAAI,UAAU,QAAQ,MAAOC,GAAWA,EAAO,OAASH,CAAe,EACvE,CACA,GAAI,CACF,OAAAF,EAAQ,QAAQE,CAAe,EAE/BJ,EAAO,KAAK,GAAGQ,EAAO,QAAQJ,CAAe,CAAC,kBAAkB,EAEzD,EACT,MAAQ,CACNJ,EAAO,MACL,GAAGQ,EAAO,QACRJ,CACF,CAAC,kDACH,CACF,CAEA,MAAO,EACT,CAEA,MAAO,EACT,ECxBaK,EAAmB,CAC9BC,EAAmC,CAAC,KAClB,CAClB,KAAMX,EAEN,cAAe,MAAOO,GAAuB,CACvCD,EAAmBC,CAAG,GACxB,MAAM,QAAQ,IACXA,EAAI,MAAoC,IAAKK,GAC5CvB,EAAiBsB,EAASC,CAAI,CAChC,CACF,CACJ,CACF"}