{"content":"<h2 id=\"用途\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#用途\"><span>用途</span></a></h2>\n<ul>\n<li>将页面内的功能模块抽象成自定义组件，以便在不同的页面中重复使用</li>\n<li>将复杂的页面拆分成多个低耦合的模块，有助于代码维护。</li>\n</ul>\n<h2 id=\"创建自定义组件\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#创建自定义组件\"><span>创建自定义组件</span></a></h2>\n<p>类似于页面，一个自定义组件由 <code v-pre>json</code> <code v-pre>wxml</code> <code v-pre>wxss</code> <code v-pre>js</code> 4 个文件组成。</p>\n<p>要编写一个自定义组件，首先需要在 json 文件中进行自定义组件声明(将 <code v-pre>component</code> 字段设为 <code v-pre>true</code> 可将这一组文件设为自定义组件):</p>\n<div class=\"language-json\" data-highlighter=\"shiki\" data-ext=\"json\" data-title=\"json\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">{</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  \"component\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">true</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n</div><p>同时，还要在 <code v-pre>wxml</code> 文件中编写组件模板，在 <code v-pre>wxss</code> 文件中加入组件样式，它们的写法与页面的写法类似。具体细节和注意事项参见 <RouteLink to=\"/code/mini-app/guide/custom-component/style.html\">组件模板和样式</RouteLink> 。</p>\n<details class=\"hint-container details\"><summary>代码示例</summary>\n<div class=\"language-xml\" data-highlighter=\"shiki\" data-ext=\"xml\" data-title=\"xml\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">&#x3C;!-- 这是自定义组件的内部WXML结构 --></span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&#x3C;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">view</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> class</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"inner\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">></span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  {{innerText}}</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&#x3C;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">view</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">></span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&#x3C;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">slot</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">>&#x3C;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">slot</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">></span></span></code></pre>\n</div><div class=\"language-css\" data-highlighter=\"shiki\" data-ext=\"css\" data-title=\"css\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">/*这里的样式只应用于这个自定义组件*/</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">.inner</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  color: </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">red</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n</div></details>\n<div class=\"hint-container warning\">\n<p class=\"hint-container-title\">注意</p>\n<p>在组件 <code v-pre>wxss</code> 中不应使用 ID 选择器、属性选择器和标签名选择器。</p>\n</div>\n<p>在自定义组件的 js 文件中，需要使用 <code v-pre>Component()</code> 来注册组件，并提供组件的属性定义、内部数据和自定义方法。</p>\n<p>组件的属性值和内部数据将被用于组件 <code v-pre>wxml</code> 的渲染，其中，属性值是可由组件外部传入的。更多细节参见 <RouteLink to=\"/code/mini-app/guide/custom-component/component.html\">Component 构造器</RouteLink> 。</p>\n<details class=\"hint-container details\"><summary>代码示例</summary>\n<div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">Component</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">({</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  properties</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    // 这里定义了innerText属性，属性值可以在组件使用时指定</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">    innerText</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">      type</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> String</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">      value</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"default value\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    },</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  },</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  data</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    // 这里是一些组件内部数据</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">    someData</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {},</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  },</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  methods</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    // 这里是一个自定义方法</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">    customMethod</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">() {},</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  },</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">});</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div></details>\n<h2 id=\"使用自定义组件\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#使用自定义组件\"><span>使用自定义组件</span></a></h2>\n<p>自定义组件在使用时与基础组件非常相似。</p>\n<p>使用已注册的自定义组件前，首先要在页面的 json 文件中进行引用声明。此时需要提供每个自定义组件的标签名和对应的自定义组件文件路径:</p>\n<div class=\"language-json\" data-highlighter=\"shiki\" data-ext=\"json\" data-title=\"json\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">{</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  \"usingComponents\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">    \"component-tag-name\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"path/to/the/custom/component\"</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n</div><p>这样，在页面的 <code v-pre>wxml</code> 中就可以像使用基础组件一样使用自定义组件。节点名即自定义组件的标签名，节点属性即传递给组件的属性值。</p>\n<div class=\"hint-container info\">\n<p class=\"hint-container-title\">相关信息</p>\n<p>在 app.json 中也可以声明 <code v-pre>usingComponents</code> 字段，在此处声明的自定义组件视为全局自定义组件，在小程序内的页面或自定义组件中可以直接使用而无需再声明。</p>\n</div>\n<details class=\"hint-container details\"><summary>代码示例</summary>\n<p><a href=\"https://developers.weixin.qq.com/s/OMfVAKmZ6KZT\" target=\"_blank\" rel=\"noopener noreferrer\">在开发者工具中预览效果</a></p>\n<div class=\"language-xml\" data-highlighter=\"shiki\" data-ext=\"xml\" data-title=\"xml\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&#x3C;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">view</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">></span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">  &#x3C;!-- 以下是对一个自定义组件的引用 --></span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  &#x3C;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">component-tag-name</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> inner-text</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"Some text\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> /></span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&#x3C;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">view</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">></span></span></code></pre>\n</div></details>\n<p>自定义组件的 <code v-pre>wxml</code> 节点结构在与数据结合之后，将被插入到引用位置内。</p>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">提示</p>\n<ul>\n<li>因为 WXML 节点标签名只能是小写字母、中划线和下划线的组合，所以自定义组件的标签名也只能包含这些字符。</li>\n<li>自定义组件也是可以引用自定义组件的，引用方法类似于页面引用自定义组件的方式(使用 <code v-pre>usingComponents</code> 字段)。</li>\n<li>自定义组件和页面所在项目根目录名不能以 <code v-pre>wx-</code> 为前缀，否则会报错。</li>\n</ul>\n</div>\n<p>注意，是否在页面文件中使用 <code v-pre>usingComponents</code> 会使得页面的 <code v-pre>this</code> 对象的原型稍有差异，包括:</p>\n<ul>\n<li>使用 <code v-pre>usingComponents</code> 页面的原型与不使用时不一致，即 <code v-pre>Object.getPrototypeOf(this)</code> 结果不同。</li>\n<li>使用 <code v-pre>usingComponents</code> 时会多一些方法，如 <code v-pre>selectComponent</code> 。</li>\n<li>出于性能考虑，使用 <code v-pre>usingComponents</code> 时， <code v-pre>setData</code> 内容不会被直接深复制，即 <code v-pre>this.setData({ field: obj })</code> 后 <code v-pre>this.data.field === obj</code>。(深复制会在这个值被组件间传递时发生。)</li>\n</ul>\n<p>如果页面比较复杂，新增或删除 <code v-pre>usingComponents</code> 定义段时建议重新测试一下。</p>\n","env":{"base":"/","filePath":"/Users/carson/Desktop/Mister-Hope.github.io-main/src/code/mini-app/guide/custom-component/intro.md","filePathRelative":"code/mini-app/guide/custom-component/intro.md","frontmatter":{"date":"2020-12-19T00:00:00.000Z","title":"自定义组件","icon":"info","category":"小程序"},"sfcBlocks":{"template":{"type":"template","content":"<template><h2 id=\"用途\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#用途\"><span>用途</span></a></h2>\n<ul>\n<li>将页面内的功能模块抽象成自定义组件，以便在不同的页面中重复使用</li>\n<li>将复杂的页面拆分成多个低耦合的模块，有助于代码维护。</li>\n</ul>\n<h2 id=\"创建自定义组件\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#创建自定义组件\"><span>创建自定义组件</span></a></h2>\n<p>类似于页面，一个自定义组件由 <code v-pre>json</code> <code v-pre>wxml</code> <code v-pre>wxss</code> <code v-pre>js</code> 4 个文件组成。</p>\n<p>要编写一个自定义组件，首先需要在 json 文件中进行自定义组件声明(将 <code v-pre>component</code> 字段设为 <code v-pre>true</code> 可将这一组文件设为自定义组件):</p>\n<div class=\"language-json\" data-highlighter=\"shiki\" data-ext=\"json\" data-title=\"json\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">{</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  \"component\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">true</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n</div><p>同时，还要在 <code v-pre>wxml</code> 文件中编写组件模板，在 <code v-pre>wxss</code> 文件中加入组件样式，它们的写法与页面的写法类似。具体细节和注意事项参见 <RouteLink to=\"/code/mini-app/guide/custom-component/style.html\">组件模板和样式</RouteLink> 。</p>\n<details class=\"hint-container details\"><summary>代码示例</summary>\n<div class=\"language-xml\" data-highlighter=\"shiki\" data-ext=\"xml\" data-title=\"xml\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">&#x3C;!-- 这是自定义组件的内部WXML结构 --></span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&#x3C;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">view</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> class</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"inner\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">></span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  {{innerText}}</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&#x3C;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">view</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">></span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&#x3C;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">slot</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">>&#x3C;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">slot</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">></span></span></code></pre>\n</div><div class=\"language-css\" data-highlighter=\"shiki\" data-ext=\"css\" data-title=\"css\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">/*这里的样式只应用于这个自定义组件*/</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">.inner</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  color: </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">red</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n</div></details>\n<div class=\"hint-container warning\">\n<p class=\"hint-container-title\">注意</p>\n<p>在组件 <code v-pre>wxss</code> 中不应使用 ID 选择器、属性选择器和标签名选择器。</p>\n</div>\n<p>在自定义组件的 js 文件中，需要使用 <code v-pre>Component()</code> 来注册组件，并提供组件的属性定义、内部数据和自定义方法。</p>\n<p>组件的属性值和内部数据将被用于组件 <code v-pre>wxml</code> 的渲染，其中，属性值是可由组件外部传入的。更多细节参见 <RouteLink to=\"/code/mini-app/guide/custom-component/component.html\">Component 构造器</RouteLink> 。</p>\n<details class=\"hint-container details\"><summary>代码示例</summary>\n<div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">Component</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">({</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  properties</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    // 这里定义了innerText属性，属性值可以在组件使用时指定</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">    innerText</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">      type</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> String</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">      value</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"default value\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    },</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  },</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  data</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    // 这里是一些组件内部数据</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">    someData</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {},</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  },</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  methods</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    // 这里是一个自定义方法</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">    customMethod</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">() {},</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  },</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">});</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div></details>\n<h2 id=\"使用自定义组件\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#使用自定义组件\"><span>使用自定义组件</span></a></h2>\n<p>自定义组件在使用时与基础组件非常相似。</p>\n<p>使用已注册的自定义组件前，首先要在页面的 json 文件中进行引用声明。此时需要提供每个自定义组件的标签名和对应的自定义组件文件路径:</p>\n<div class=\"language-json\" data-highlighter=\"shiki\" data-ext=\"json\" data-title=\"json\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">{</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  \"usingComponents\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">    \"component-tag-name\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"path/to/the/custom/component\"</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n</div><p>这样，在页面的 <code v-pre>wxml</code> 中就可以像使用基础组件一样使用自定义组件。节点名即自定义组件的标签名，节点属性即传递给组件的属性值。</p>\n<div class=\"hint-container info\">\n<p class=\"hint-container-title\">相关信息</p>\n<p>在 app.json 中也可以声明 <code v-pre>usingComponents</code> 字段，在此处声明的自定义组件视为全局自定义组件，在小程序内的页面或自定义组件中可以直接使用而无需再声明。</p>\n</div>\n<details class=\"hint-container details\"><summary>代码示例</summary>\n<p><a href=\"https://developers.weixin.qq.com/s/OMfVAKmZ6KZT\" target=\"_blank\" rel=\"noopener noreferrer\">在开发者工具中预览效果</a></p>\n<div class=\"language-xml\" data-highlighter=\"shiki\" data-ext=\"xml\" data-title=\"xml\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&#x3C;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">view</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">></span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">  &#x3C;!-- 以下是对一个自定义组件的引用 --></span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  &#x3C;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">component-tag-name</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> inner-text</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"Some text\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> /></span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&#x3C;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">view</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">></span></span></code></pre>\n</div></details>\n<p>自定义组件的 <code v-pre>wxml</code> 节点结构在与数据结合之后，将被插入到引用位置内。</p>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">提示</p>\n<ul>\n<li>因为 WXML 节点标签名只能是小写字母、中划线和下划线的组合，所以自定义组件的标签名也只能包含这些字符。</li>\n<li>自定义组件也是可以引用自定义组件的，引用方法类似于页面引用自定义组件的方式(使用 <code v-pre>usingComponents</code> 字段)。</li>\n<li>自定义组件和页面所在项目根目录名不能以 <code v-pre>wx-</code> 为前缀，否则会报错。</li>\n</ul>\n</div>\n<p>注意，是否在页面文件中使用 <code v-pre>usingComponents</code> 会使得页面的 <code v-pre>this</code> 对象的原型稍有差异，包括:</p>\n<ul>\n<li>使用 <code v-pre>usingComponents</code> 页面的原型与不使用时不一致，即 <code v-pre>Object.getPrototypeOf(this)</code> 结果不同。</li>\n<li>使用 <code v-pre>usingComponents</code> 时会多一些方法，如 <code v-pre>selectComponent</code> 。</li>\n<li>出于性能考虑，使用 <code v-pre>usingComponents</code> 时， <code v-pre>setData</code> 内容不会被直接深复制，即 <code v-pre>this.setData({ field: obj })</code> 后 <code v-pre>this.data.field === obj</code>。(深复制会在这个值被组件间传递时发生。)</li>\n</ul>\n<p>如果页面比较复杂，新增或删除 <code v-pre>usingComponents</code> 定义段时建议重新测试一下。</p>\n</template>","contentStripped":"<h2 id=\"用途\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#用途\"><span>用途</span></a></h2>\n<ul>\n<li>将页面内的功能模块抽象成自定义组件，以便在不同的页面中重复使用</li>\n<li>将复杂的页面拆分成多个低耦合的模块，有助于代码维护。</li>\n</ul>\n<h2 id=\"创建自定义组件\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#创建自定义组件\"><span>创建自定义组件</span></a></h2>\n<p>类似于页面，一个自定义组件由 <code v-pre>json</code> <code v-pre>wxml</code> <code v-pre>wxss</code> <code v-pre>js</code> 4 个文件组成。</p>\n<p>要编写一个自定义组件，首先需要在 json 文件中进行自定义组件声明(将 <code v-pre>component</code> 字段设为 <code v-pre>true</code> 可将这一组文件设为自定义组件):</p>\n<div class=\"language-json\" data-highlighter=\"shiki\" data-ext=\"json\" data-title=\"json\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">{</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  \"component\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">true</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n</div><p>同时，还要在 <code v-pre>wxml</code> 文件中编写组件模板，在 <code v-pre>wxss</code> 文件中加入组件样式，它们的写法与页面的写法类似。具体细节和注意事项参见 <RouteLink to=\"/code/mini-app/guide/custom-component/style.html\">组件模板和样式</RouteLink> 。</p>\n<details class=\"hint-container details\"><summary>代码示例</summary>\n<div class=\"language-xml\" data-highlighter=\"shiki\" data-ext=\"xml\" data-title=\"xml\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">&#x3C;!-- 这是自定义组件的内部WXML结构 --></span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&#x3C;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">view</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> class</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"inner\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">></span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  {{innerText}}</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&#x3C;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">view</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">></span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&#x3C;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">slot</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">>&#x3C;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">slot</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">></span></span></code></pre>\n</div><div class=\"language-css\" data-highlighter=\"shiki\" data-ext=\"css\" data-title=\"css\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">/*这里的样式只应用于这个自定义组件*/</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">.inner</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  color: </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">red</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n</div></details>\n<div class=\"hint-container warning\">\n<p class=\"hint-container-title\">注意</p>\n<p>在组件 <code v-pre>wxss</code> 中不应使用 ID 选择器、属性选择器和标签名选择器。</p>\n</div>\n<p>在自定义组件的 js 文件中，需要使用 <code v-pre>Component()</code> 来注册组件，并提供组件的属性定义、内部数据和自定义方法。</p>\n<p>组件的属性值和内部数据将被用于组件 <code v-pre>wxml</code> 的渲染，其中，属性值是可由组件外部传入的。更多细节参见 <RouteLink to=\"/code/mini-app/guide/custom-component/component.html\">Component 构造器</RouteLink> 。</p>\n<details class=\"hint-container details\"><summary>代码示例</summary>\n<div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">Component</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">({</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  properties</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    // 这里定义了innerText属性，属性值可以在组件使用时指定</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">    innerText</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">      type</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> String</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">      value</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"default value\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    },</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  },</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  data</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    // 这里是一些组件内部数据</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">    someData</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {},</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  },</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  methods</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    // 这里是一个自定义方法</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">    customMethod</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">() {},</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  },</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">});</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div></details>\n<h2 id=\"使用自定义组件\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#使用自定义组件\"><span>使用自定义组件</span></a></h2>\n<p>自定义组件在使用时与基础组件非常相似。</p>\n<p>使用已注册的自定义组件前，首先要在页面的 json 文件中进行引用声明。此时需要提供每个自定义组件的标签名和对应的自定义组件文件路径:</p>\n<div class=\"language-json\" data-highlighter=\"shiki\" data-ext=\"json\" data-title=\"json\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">{</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  \"usingComponents\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">    \"component-tag-name\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"path/to/the/custom/component\"</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n</div><p>这样，在页面的 <code v-pre>wxml</code> 中就可以像使用基础组件一样使用自定义组件。节点名即自定义组件的标签名，节点属性即传递给组件的属性值。</p>\n<div class=\"hint-container info\">\n<p class=\"hint-container-title\">相关信息</p>\n<p>在 app.json 中也可以声明 <code v-pre>usingComponents</code> 字段，在此处声明的自定义组件视为全局自定义组件，在小程序内的页面或自定义组件中可以直接使用而无需再声明。</p>\n</div>\n<details class=\"hint-container details\"><summary>代码示例</summary>\n<p><a href=\"https://developers.weixin.qq.com/s/OMfVAKmZ6KZT\" target=\"_blank\" rel=\"noopener noreferrer\">在开发者工具中预览效果</a></p>\n<div class=\"language-xml\" data-highlighter=\"shiki\" data-ext=\"xml\" data-title=\"xml\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&#x3C;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">view</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">></span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">  &#x3C;!-- 以下是对一个自定义组件的引用 --></span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  &#x3C;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">component-tag-name</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> inner-text</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"Some text\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> /></span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&#x3C;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">view</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">></span></span></code></pre>\n</div></details>\n<p>自定义组件的 <code v-pre>wxml</code> 节点结构在与数据结合之后，将被插入到引用位置内。</p>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">提示</p>\n<ul>\n<li>因为 WXML 节点标签名只能是小写字母、中划线和下划线的组合，所以自定义组件的标签名也只能包含这些字符。</li>\n<li>自定义组件也是可以引用自定义组件的，引用方法类似于页面引用自定义组件的方式(使用 <code v-pre>usingComponents</code> 字段)。</li>\n<li>自定义组件和页面所在项目根目录名不能以 <code v-pre>wx-</code> 为前缀，否则会报错。</li>\n</ul>\n</div>\n<p>注意，是否在页面文件中使用 <code v-pre>usingComponents</code> 会使得页面的 <code v-pre>this</code> 对象的原型稍有差异，包括:</p>\n<ul>\n<li>使用 <code v-pre>usingComponents</code> 页面的原型与不使用时不一致，即 <code v-pre>Object.getPrototypeOf(this)</code> 结果不同。</li>\n<li>使用 <code v-pre>usingComponents</code> 时会多一些方法，如 <code v-pre>selectComponent</code> 。</li>\n<li>出于性能考虑，使用 <code v-pre>usingComponents</code> 时， <code v-pre>setData</code> 内容不会被直接深复制，即 <code v-pre>this.setData({ field: obj })</code> 后 <code v-pre>this.data.field === obj</code>。(深复制会在这个值被组件间传递时发生。)</li>\n</ul>\n<p>如果页面比较复杂，新增或删除 <code v-pre>usingComponents</code> 定义段时建议重新测试一下。</p>\n","tagOpen":"<template>","tagClose":"</template>"},"script":null,"scriptSetup":null,"scripts":[],"styles":[],"customBlocks":[]},"content":"\n## 用途\n\n- 将页面内的功能模块抽象成自定义组件，以便在不同的页面中重复使用\n- 将复杂的页面拆分成多个低耦合的模块，有助于代码维护。\n\n## 创建自定义组件\n\n类似于页面，一个自定义组件由 `json` `wxml` `wxss` `js` 4 个文件组成。\n\n要编写一个自定义组件，首先需要在 json 文件中进行自定义组件声明(将 `component` 字段设为 `true` 可将这一组文件设为自定义组件):\n\n```json\n{\n  \"component\": true\n}\n```\n\n同时，还要在 `wxml` 文件中编写组件模板，在 `wxss` 文件中加入组件样式，它们的写法与页面的写法类似。具体细节和注意事项参见 [组件模板和样式](style.md) 。\n\n::: details 代码示例\n\n```xml\n<!-- 这是自定义组件的内部WXML结构 -->\n<view class=\"inner\">\n  {{innerText}}\n</view>\n<slot></slot>\n```\n\n```css\n/*这里的样式只应用于这个自定义组件*/\n.inner {\n  color: red;\n}\n```\n\n:::\n\n::: warning\n\n在组件 `wxss` 中不应使用 ID 选择器、属性选择器和标签名选择器。\n\n:::\n\n在自定义组件的 js 文件中，需要使用 `Component()` 来注册组件，并提供组件的属性定义、内部数据和自定义方法。\n\n组件的属性值和内部数据将被用于组件 `wxml` 的渲染，其中，属性值是可由组件外部传入的。更多细节参见 [Component 构造器](component.md) 。\n\n::: details 代码示例\n\n```js\nComponent({\n  properties: {\n    // 这里定义了innerText属性，属性值可以在组件使用时指定\n    innerText: {\n      type: String,\n      value: \"default value\",\n    },\n  },\n  data: {\n    // 这里是一些组件内部数据\n    someData: {},\n  },\n  methods: {\n    // 这里是一个自定义方法\n    customMethod() {},\n  },\n});\n```\n\n:::\n\n## 使用自定义组件\n\n自定义组件在使用时与基础组件非常相似。\n\n使用已注册的自定义组件前，首先要在页面的 json 文件中进行引用声明。此时需要提供每个自定义组件的标签名和对应的自定义组件文件路径:\n\n```json\n{\n  \"usingComponents\": {\n    \"component-tag-name\": \"path/to/the/custom/component\"\n  }\n}\n```\n\n这样，在页面的 `wxml` 中就可以像使用基础组件一样使用自定义组件。节点名即自定义组件的标签名，节点属性即传递给组件的属性值。\n\n::: info\n\n在 app.json 中也可以声明 `usingComponents` 字段，在此处声明的自定义组件视为全局自定义组件，在小程序内的页面或自定义组件中可以直接使用而无需再声明。\n\n:::\n\n::: details 代码示例\n\n[在开发者工具中预览效果](https://developers.weixin.qq.com/s/OMfVAKmZ6KZT)\n\n```xml\n<view>\n  <!-- 以下是对一个自定义组件的引用 -->\n  <component-tag-name inner-text=\"Some text\" />\n</view>\n```\n\n:::\n\n自定义组件的 `wxml` 节点结构在与数据结合之后，将被插入到引用位置内。\n\n::: tip\n\n- 因为 WXML 节点标签名只能是小写字母、中划线和下划线的组合，所以自定义组件的标签名也只能包含这些字符。\n- 自定义组件也是可以引用自定义组件的，引用方法类似于页面引用自定义组件的方式(使用 `usingComponents` 字段)。\n- 自定义组件和页面所在项目根目录名不能以 `wx-` 为前缀，否则会报错。\n\n:::\n\n注意，是否在页面文件中使用 `usingComponents` 会使得页面的 `this` 对象的原型稍有差异，包括:\n\n- 使用 `usingComponents` 页面的原型与不使用时不一致，即 `Object.getPrototypeOf(this)` 结果不同。\n- 使用 `usingComponents` 时会多一些方法，如 `selectComponent` 。\n- 出于性能考虑，使用 `usingComponents` 时， `setData` 内容不会被直接深复制，即 `this.setData({ field: obj })` 后 `this.data.field === obj`。(深复制会在这个值被组件间传递时发生。)\n\n如果页面比较复杂，新增或删除 `usingComponents` 定义段时建议重新测试一下。\n","excerpt":"","title":"","headers":[{"level":2,"title":"用途","slug":"用途","link":"#用途","children":[]},{"level":2,"title":"创建自定义组件","slug":"创建自定义组件","link":"#创建自定义组件","children":[]},{"level":2,"title":"使用自定义组件","slug":"使用自定义组件","link":"#使用自定义组件","children":[]}],"links":[{"raw":"style.md","relative":"code/mini-app/guide/custom-component/style.md","absolute":"/code/mini-app/guide/custom-component/style.md"},{"raw":"component.md","relative":"code/mini-app/guide/custom-component/component.md","absolute":"/code/mini-app/guide/custom-component/component.md"}]}}
