{"content":"<p>布尔运算符用于将表达式转为布尔值，一共包含四个运算符。</p>\n<ul>\n<li>取反运算符: <code v-pre>!</code></li>\n<li>且运算符: <code v-pre>&amp;&amp;</code></li>\n<li>或运算符: <code v-pre>||</code></li>\n<li>三元运算符: <code v-pre>?:</code></li>\n</ul>\n<!-- more -->\n<h2 id=\"取反运算符\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#取反运算符\"><span>取反运算符 <code v-pre>!</code></span></a></h2>\n<p>取反运算符是一个感叹号，用于将布尔值变为相反值，即 <code v-pre>true</code> 变成 <code v-pre>false</code>，<code v-pre>false</code> 变成 <code v-pre>true</code>。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">!</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">true</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// false</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">!</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">false</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// true</span></span></code></pre>\n</div><p>对于非布尔值，取反运算符会将其转为布尔值。可以这样记忆，以下六个值取反后为 <code v-pre>true</code>，其他值都为 <code v-pre>false</code>。</p>\n<ul>\n<li><code v-pre>undefined</code></li>\n<li><code v-pre>null</code></li>\n<li><code v-pre>false</code></li>\n<li><code v-pre>0</code></li>\n<li><code v-pre>NaN</code></li>\n<li>空字符串(<code v-pre>''</code>)</li>\n</ul>\n<div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">!</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">undefined</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// true</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">!</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">null</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// true</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">!</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// true</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">!</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">NaN</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// true</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">!</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// true</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">!</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">54</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// false</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">!</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"hello\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// false</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">!</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">[]; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// false</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">!</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">{}; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// false</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>上面代码中，不管什么类型的值，经过取反运算后，都变成了布尔值。</p>\n<p>如果对一个值连续做两次取反运算，等于将其转为对应的布尔值，与 <code v-pre>Boolean</code> 函数的作用相同。这是一种常用的类型转换的写法。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">!!</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">x</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 等同于</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">Boolean</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">x</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span></code></pre>\n</div><p>上面代码中，不管 <code v-pre>x</code> 是什么类型的值，经过两次取反运算后，变成了与 <code v-pre>Boolean</code> 函数结果相同的布尔值。所以，两次取反就是将一个值转为布尔值的简便写法。</p>\n<h2 id=\"且运算符\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#且运算符\"><span>且运算符 <code v-pre>&amp;&amp;</code></span></a></h2>\n<p>且运算符(<code v-pre>&amp;&amp;</code>)往往用于多个表达式的求值。</p>\n<p>它的运算规则是: 如果第一个运算子的布尔值为 <code v-pre>true</code>，则返回第二个运算子的值(注意是值，不是布尔值)；如果第一个运算子的布尔值为 <code v-pre>false</code>，则直接返回第一个运算子的值，且不再对第二个运算子求值。</p>\n<div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"t\"</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> &#x26;&#x26;</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// \"\"</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"t\"</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> &#x26;&#x26;</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"f\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// \"f\"</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"t\"</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> &#x26;&#x26;</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 1</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> +</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 2</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 3</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"\"</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> &#x26;&#x26;</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"f\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// \"\"</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"\"</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> &#x26;&#x26;</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// \"\"</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">let</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> x</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">1</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> -</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 1</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> &#x26;&#x26;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">x</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> +=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">); </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 0</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">x</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 1</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>上面代码的最后一个例子，由于且运算符的第一个运算子的布尔值为 <code v-pre>false</code>，则直接返回它的值 <code v-pre>0</code>，而不再对第二个运算子求值，所以变量 <code v-pre>x</code> 的值没变。</p>\n<p>这种跳过第二个运算子的机制，被称为“短路”。有些程序员喜欢用它取代 <code v-pre>if</code> 结构，比如下面是一段 <code v-pre>if</code> 结构的代码，就可以用且运算符改写。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">if</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">i</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">  doSomething</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 等价于</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">i</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> &#x26;&#x26;</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> doSomething</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">();</span></span></code></pre>\n</div><p>上面代码的两种写法是等价的，但是后一种不容易看出目的，也不容易除错，建议谨慎使用。</p>\n<p>且运算符可以多个连用，这时返回第一个布尔值为 <code v-pre>false</code> 的表达式的值。如果所有表达式的布尔值都为 <code v-pre>true</code>，则返回最后一个表达式的值。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">true</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> &#x26;&#x26;</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"foo\"</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> &#x26;&#x26;</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"\"</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> &#x26;&#x26;</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 4</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> &#x26;&#x26;</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"foo\"</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> &#x26;&#x26;</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> true</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// ''</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">1</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> &#x26;&#x26;</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 2</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> &#x26;&#x26;</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 3</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 3</span></span></code></pre>\n</div><p>上面代码中，例一里面，第一个布尔值为 <code v-pre>false</code> 的表达式为第三个表达式，所以得到一个空字符串。例二里面，所有表达式的布尔值都是 <code v-pre>true</code>，所有返回最后一个表达式的值 <code v-pre>3</code>。</p>\n<h2 id=\"或运算符\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#或运算符\"><span>或运算符 <code v-pre>||</code></span></a></h2>\n<p>或运算符(<code v-pre>||</code>)也用于多个表达式的求值。它的运算规则是: 如果第一个运算子的布尔值为 <code v-pre>true</code>，则返回第一个运算子的值，且不再对第二个运算子求值；如果第一个运算子的布尔值为 <code v-pre>false</code>，则返回第二个运算子的值。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"t\"</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> ||</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// \"t\"</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"t\"</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> ||</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"f\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// \"t\"</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"\"</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> ||</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"f\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// \"f\"</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"\"</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> ||</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// \"\"</span></span></code></pre>\n</div><p>短路规则对这个运算符也适用。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">let</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> x</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">true</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> ||</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">x</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 2</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">); </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// true</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">x</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 1</span></span></code></pre>\n</div><p>上面代码中，或运算符的第一个运算子为 <code v-pre>true</code>，所以直接返回 <code v-pre>true</code>，不再运行第二个运算子。所以，<code v-pre>x</code> 的值没有改变。这种只通过第一个表达式的值，控制是否运行第二个表达式的机制，就称为“短路”(short-cut)。</p>\n<p>或运算符可以多个连用，这时返回第一个布尔值为 <code v-pre>true</code> 的表达式的值。如果所有表达式都为 <code v-pre>false</code>，则返回最后一个表达式的值。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">false</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> ||</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 0</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> ||</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"\"</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> ||</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 4</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> ||</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"foo\"</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> ||</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> true</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 4</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">false</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> ||</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 0</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> ||</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// ''</span></span></code></pre>\n</div><p>上面代码中，例一里面，第一个布尔值为 <code v-pre>true</code> 的表达式是第四个表达式，所以得到数值 4。例二里面，所有表达式的布尔值都为 <code v-pre>false</code>，所以返回最后一个表达式的值。</p>\n<p>或运算符常用于为一个变量设置默认值。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">function</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> saveText</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">text</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">  text</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> text</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> ||</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">  // ...</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 或者写成</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">saveText</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">this</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">text</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> ||</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span></code></pre>\n</div><p>上面代码表示，如果函数调用时，没有提供参数，则该参数默认设置为空字符串。</p>\n<h2 id=\"三元条件运算符\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#三元条件运算符\"><span><code v-pre>? :</code> 三元条件运算符</span></a></h2>\n<p>三元条件运算符由问号(<code v-pre>?</code>)和冒号(<code v-pre>:</code>)组成，分隔三个表达式。它是 JavaScript 语言唯一一个需要三个运算子的运算符。如果第一个表达式的布尔值为 <code v-pre>true</code>，则返回第二个表达式的值，否则返回第三个表达式的值。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"t\"</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#C678DD\"> ?</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"hello\"</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#C678DD\"> :</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"world\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// \"hello\"</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">0</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#C678DD\"> ?</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"hello\"</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#C678DD\"> :</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"world\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// \"world\"</span></span></code></pre>\n</div><p>上面代码的 <code v-pre>t</code> 和 <code v-pre>0</code> 的布尔值分别为 <code v-pre>true</code> 和 <code v-pre>false</code>，所以分别返回第二个和第三个表达式的值。</p>\n<p>通常来说，三元条件表达式与 <code v-pre>if...else</code> 语句具有同样表达效果，前者可以表达的，后者也能表达。但是两者具有一个重大差别，<code v-pre>if...else</code> 是语句，没有返回值；三元条件表达式是表达式，具有返回值。所以，在需要返回值的场合，只能使用三元条件表达式，而不能使用 <code v-pre>if..else</code>。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">console</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">log</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">true</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#C678DD\"> ?</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"T\"</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#C678DD\"> :</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"F\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span></code></pre>\n</div><p>上面代码中，<code v-pre>console.log</code> 方法的参数必须是一个表达式，这时就只能使用三元条件表达式。如果要用 <code v-pre>if...else</code> 语句，就必须改变整个代码写法了。</p>\n","env":{"base":"/","filePath":"/Users/carson/Desktop/Mister-Hope.github.io-main/src/code/language/js/operators/boolean.md","filePathRelative":"code/language/js/operators/boolean.md","frontmatter":{"title":"布尔运算符","icon":"boolean","date":"2019-09-28T00:00:00.000Z","category":"JavaScript"},"sfcBlocks":{"template":{"type":"template","content":"<template><p>布尔运算符用于将表达式转为布尔值，一共包含四个运算符。</p>\n<ul>\n<li>取反运算符: <code v-pre>!</code></li>\n<li>且运算符: <code v-pre>&amp;&amp;</code></li>\n<li>或运算符: <code v-pre>||</code></li>\n<li>三元运算符: <code v-pre>?:</code></li>\n</ul>\n<!-- more -->\n<h2 id=\"取反运算符\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#取反运算符\"><span>取反运算符 <code v-pre>!</code></span></a></h2>\n<p>取反运算符是一个感叹号，用于将布尔值变为相反值，即 <code v-pre>true</code> 变成 <code v-pre>false</code>，<code v-pre>false</code> 变成 <code v-pre>true</code>。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">!</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">true</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// false</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">!</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">false</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// true</span></span></code></pre>\n</div><p>对于非布尔值，取反运算符会将其转为布尔值。可以这样记忆，以下六个值取反后为 <code v-pre>true</code>，其他值都为 <code v-pre>false</code>。</p>\n<ul>\n<li><code v-pre>undefined</code></li>\n<li><code v-pre>null</code></li>\n<li><code v-pre>false</code></li>\n<li><code v-pre>0</code></li>\n<li><code v-pre>NaN</code></li>\n<li>空字符串(<code v-pre>''</code>)</li>\n</ul>\n<div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">!</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">undefined</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// true</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">!</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">null</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// true</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">!</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// true</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">!</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">NaN</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// true</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">!</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// true</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">!</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">54</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// false</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">!</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"hello\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// false</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">!</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">[]; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// false</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">!</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">{}; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// false</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>上面代码中，不管什么类型的值，经过取反运算后，都变成了布尔值。</p>\n<p>如果对一个值连续做两次取反运算，等于将其转为对应的布尔值，与 <code v-pre>Boolean</code> 函数的作用相同。这是一种常用的类型转换的写法。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">!!</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">x</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 等同于</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">Boolean</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">x</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span></code></pre>\n</div><p>上面代码中，不管 <code v-pre>x</code> 是什么类型的值，经过两次取反运算后，变成了与 <code v-pre>Boolean</code> 函数结果相同的布尔值。所以，两次取反就是将一个值转为布尔值的简便写法。</p>\n<h2 id=\"且运算符\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#且运算符\"><span>且运算符 <code v-pre>&amp;&amp;</code></span></a></h2>\n<p>且运算符(<code v-pre>&amp;&amp;</code>)往往用于多个表达式的求值。</p>\n<p>它的运算规则是: 如果第一个运算子的布尔值为 <code v-pre>true</code>，则返回第二个运算子的值(注意是值，不是布尔值)；如果第一个运算子的布尔值为 <code v-pre>false</code>，则直接返回第一个运算子的值，且不再对第二个运算子求值。</p>\n<div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"t\"</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> &#x26;&#x26;</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// \"\"</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"t\"</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> &#x26;&#x26;</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"f\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// \"f\"</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"t\"</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> &#x26;&#x26;</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 1</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> +</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 2</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 3</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"\"</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> &#x26;&#x26;</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"f\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// \"\"</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"\"</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> &#x26;&#x26;</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// \"\"</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">let</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> x</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">1</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> -</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 1</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> &#x26;&#x26;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">x</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> +=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">); </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 0</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">x</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 1</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>上面代码的最后一个例子，由于且运算符的第一个运算子的布尔值为 <code v-pre>false</code>，则直接返回它的值 <code v-pre>0</code>，而不再对第二个运算子求值，所以变量 <code v-pre>x</code> 的值没变。</p>\n<p>这种跳过第二个运算子的机制，被称为“短路”。有些程序员喜欢用它取代 <code v-pre>if</code> 结构，比如下面是一段 <code v-pre>if</code> 结构的代码，就可以用且运算符改写。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">if</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">i</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">  doSomething</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 等价于</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">i</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> &#x26;&#x26;</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> doSomething</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">();</span></span></code></pre>\n</div><p>上面代码的两种写法是等价的，但是后一种不容易看出目的，也不容易除错，建议谨慎使用。</p>\n<p>且运算符可以多个连用，这时返回第一个布尔值为 <code v-pre>false</code> 的表达式的值。如果所有表达式的布尔值都为 <code v-pre>true</code>，则返回最后一个表达式的值。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">true</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> &#x26;&#x26;</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"foo\"</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> &#x26;&#x26;</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"\"</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> &#x26;&#x26;</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 4</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> &#x26;&#x26;</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"foo\"</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> &#x26;&#x26;</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> true</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// ''</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">1</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> &#x26;&#x26;</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 2</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> &#x26;&#x26;</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 3</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 3</span></span></code></pre>\n</div><p>上面代码中，例一里面，第一个布尔值为 <code v-pre>false</code> 的表达式为第三个表达式，所以得到一个空字符串。例二里面，所有表达式的布尔值都是 <code v-pre>true</code>，所有返回最后一个表达式的值 <code v-pre>3</code>。</p>\n<h2 id=\"或运算符\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#或运算符\"><span>或运算符 <code v-pre>||</code></span></a></h2>\n<p>或运算符(<code v-pre>||</code>)也用于多个表达式的求值。它的运算规则是: 如果第一个运算子的布尔值为 <code v-pre>true</code>，则返回第一个运算子的值，且不再对第二个运算子求值；如果第一个运算子的布尔值为 <code v-pre>false</code>，则返回第二个运算子的值。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"t\"</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> ||</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// \"t\"</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"t\"</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> ||</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"f\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// \"t\"</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"\"</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> ||</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"f\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// \"f\"</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"\"</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> ||</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// \"\"</span></span></code></pre>\n</div><p>短路规则对这个运算符也适用。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">let</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> x</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">true</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> ||</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">x</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 2</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">); </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// true</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">x</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 1</span></span></code></pre>\n</div><p>上面代码中，或运算符的第一个运算子为 <code v-pre>true</code>，所以直接返回 <code v-pre>true</code>，不再运行第二个运算子。所以，<code v-pre>x</code> 的值没有改变。这种只通过第一个表达式的值，控制是否运行第二个表达式的机制，就称为“短路”(short-cut)。</p>\n<p>或运算符可以多个连用，这时返回第一个布尔值为 <code v-pre>true</code> 的表达式的值。如果所有表达式都为 <code v-pre>false</code>，则返回最后一个表达式的值。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">false</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> ||</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 0</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> ||</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"\"</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> ||</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 4</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> ||</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"foo\"</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> ||</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> true</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 4</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">false</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> ||</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 0</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> ||</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// ''</span></span></code></pre>\n</div><p>上面代码中，例一里面，第一个布尔值为 <code v-pre>true</code> 的表达式是第四个表达式，所以得到数值 4。例二里面，所有表达式的布尔值都为 <code v-pre>false</code>，所以返回最后一个表达式的值。</p>\n<p>或运算符常用于为一个变量设置默认值。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">function</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> saveText</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">text</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">  text</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> text</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> ||</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">  // ...</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 或者写成</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">saveText</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">this</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">text</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> ||</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span></code></pre>\n</div><p>上面代码表示，如果函数调用时，没有提供参数，则该参数默认设置为空字符串。</p>\n<h2 id=\"三元条件运算符\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#三元条件运算符\"><span><code v-pre>? :</code> 三元条件运算符</span></a></h2>\n<p>三元条件运算符由问号(<code v-pre>?</code>)和冒号(<code v-pre>:</code>)组成，分隔三个表达式。它是 JavaScript 语言唯一一个需要三个运算子的运算符。如果第一个表达式的布尔值为 <code v-pre>true</code>，则返回第二个表达式的值，否则返回第三个表达式的值。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"t\"</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#C678DD\"> ?</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"hello\"</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#C678DD\"> :</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"world\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// \"hello\"</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">0</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#C678DD\"> ?</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"hello\"</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#C678DD\"> :</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"world\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// \"world\"</span></span></code></pre>\n</div><p>上面代码的 <code v-pre>t</code> 和 <code v-pre>0</code> 的布尔值分别为 <code v-pre>true</code> 和 <code v-pre>false</code>，所以分别返回第二个和第三个表达式的值。</p>\n<p>通常来说，三元条件表达式与 <code v-pre>if...else</code> 语句具有同样表达效果，前者可以表达的，后者也能表达。但是两者具有一个重大差别，<code v-pre>if...else</code> 是语句，没有返回值；三元条件表达式是表达式，具有返回值。所以，在需要返回值的场合，只能使用三元条件表达式，而不能使用 <code v-pre>if..else</code>。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">console</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">log</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">true</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#C678DD\"> ?</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"T\"</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#C678DD\"> :</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"F\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span></code></pre>\n</div><p>上面代码中，<code v-pre>console.log</code> 方法的参数必须是一个表达式，这时就只能使用三元条件表达式。如果要用 <code v-pre>if...else</code> 语句，就必须改变整个代码写法了。</p>\n</template>","contentStripped":"<p>布尔运算符用于将表达式转为布尔值，一共包含四个运算符。</p>\n<ul>\n<li>取反运算符: <code v-pre>!</code></li>\n<li>且运算符: <code v-pre>&amp;&amp;</code></li>\n<li>或运算符: <code v-pre>||</code></li>\n<li>三元运算符: <code v-pre>?:</code></li>\n</ul>\n<!-- more -->\n<h2 id=\"取反运算符\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#取反运算符\"><span>取反运算符 <code v-pre>!</code></span></a></h2>\n<p>取反运算符是一个感叹号，用于将布尔值变为相反值，即 <code v-pre>true</code> 变成 <code v-pre>false</code>，<code v-pre>false</code> 变成 <code v-pre>true</code>。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">!</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">true</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// false</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">!</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">false</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// true</span></span></code></pre>\n</div><p>对于非布尔值，取反运算符会将其转为布尔值。可以这样记忆，以下六个值取反后为 <code v-pre>true</code>，其他值都为 <code v-pre>false</code>。</p>\n<ul>\n<li><code v-pre>undefined</code></li>\n<li><code v-pre>null</code></li>\n<li><code v-pre>false</code></li>\n<li><code v-pre>0</code></li>\n<li><code v-pre>NaN</code></li>\n<li>空字符串(<code v-pre>''</code>)</li>\n</ul>\n<div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">!</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">undefined</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// true</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">!</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">null</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// true</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">!</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// true</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">!</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">NaN</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// true</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">!</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// true</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">!</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">54</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// false</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">!</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"hello\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// false</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">!</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">[]; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// false</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">!</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">{}; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// false</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>上面代码中，不管什么类型的值，经过取反运算后，都变成了布尔值。</p>\n<p>如果对一个值连续做两次取反运算，等于将其转为对应的布尔值，与 <code v-pre>Boolean</code> 函数的作用相同。这是一种常用的类型转换的写法。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">!!</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">x</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 等同于</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">Boolean</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">x</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span></code></pre>\n</div><p>上面代码中，不管 <code v-pre>x</code> 是什么类型的值，经过两次取反运算后，变成了与 <code v-pre>Boolean</code> 函数结果相同的布尔值。所以，两次取反就是将一个值转为布尔值的简便写法。</p>\n<h2 id=\"且运算符\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#且运算符\"><span>且运算符 <code v-pre>&amp;&amp;</code></span></a></h2>\n<p>且运算符(<code v-pre>&amp;&amp;</code>)往往用于多个表达式的求值。</p>\n<p>它的运算规则是: 如果第一个运算子的布尔值为 <code v-pre>true</code>，则返回第二个运算子的值(注意是值，不是布尔值)；如果第一个运算子的布尔值为 <code v-pre>false</code>，则直接返回第一个运算子的值，且不再对第二个运算子求值。</p>\n<div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"t\"</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> &#x26;&#x26;</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// \"\"</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"t\"</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> &#x26;&#x26;</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"f\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// \"f\"</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"t\"</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> &#x26;&#x26;</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 1</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> +</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 2</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 3</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"\"</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> &#x26;&#x26;</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"f\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// \"\"</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"\"</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> &#x26;&#x26;</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// \"\"</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">let</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> x</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">1</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> -</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 1</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> &#x26;&#x26;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">x</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> +=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">); </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 0</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">x</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 1</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>上面代码的最后一个例子，由于且运算符的第一个运算子的布尔值为 <code v-pre>false</code>，则直接返回它的值 <code v-pre>0</code>，而不再对第二个运算子求值，所以变量 <code v-pre>x</code> 的值没变。</p>\n<p>这种跳过第二个运算子的机制，被称为“短路”。有些程序员喜欢用它取代 <code v-pre>if</code> 结构，比如下面是一段 <code v-pre>if</code> 结构的代码，就可以用且运算符改写。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">if</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">i</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">  doSomething</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 等价于</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">i</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> &#x26;&#x26;</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> doSomething</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">();</span></span></code></pre>\n</div><p>上面代码的两种写法是等价的，但是后一种不容易看出目的，也不容易除错，建议谨慎使用。</p>\n<p>且运算符可以多个连用，这时返回第一个布尔值为 <code v-pre>false</code> 的表达式的值。如果所有表达式的布尔值都为 <code v-pre>true</code>，则返回最后一个表达式的值。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">true</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> &#x26;&#x26;</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"foo\"</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> &#x26;&#x26;</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"\"</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> &#x26;&#x26;</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 4</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> &#x26;&#x26;</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"foo\"</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> &#x26;&#x26;</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> true</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// ''</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">1</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> &#x26;&#x26;</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 2</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> &#x26;&#x26;</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 3</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 3</span></span></code></pre>\n</div><p>上面代码中，例一里面，第一个布尔值为 <code v-pre>false</code> 的表达式为第三个表达式，所以得到一个空字符串。例二里面，所有表达式的布尔值都是 <code v-pre>true</code>，所有返回最后一个表达式的值 <code v-pre>3</code>。</p>\n<h2 id=\"或运算符\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#或运算符\"><span>或运算符 <code v-pre>||</code></span></a></h2>\n<p>或运算符(<code v-pre>||</code>)也用于多个表达式的求值。它的运算规则是: 如果第一个运算子的布尔值为 <code v-pre>true</code>，则返回第一个运算子的值，且不再对第二个运算子求值；如果第一个运算子的布尔值为 <code v-pre>false</code>，则返回第二个运算子的值。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"t\"</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> ||</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// \"t\"</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"t\"</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> ||</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"f\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// \"t\"</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"\"</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> ||</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"f\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// \"f\"</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"\"</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> ||</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// \"\"</span></span></code></pre>\n</div><p>短路规则对这个运算符也适用。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">let</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> x</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">true</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> ||</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">x</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 2</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">); </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// true</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">x</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 1</span></span></code></pre>\n</div><p>上面代码中，或运算符的第一个运算子为 <code v-pre>true</code>，所以直接返回 <code v-pre>true</code>，不再运行第二个运算子。所以，<code v-pre>x</code> 的值没有改变。这种只通过第一个表达式的值，控制是否运行第二个表达式的机制，就称为“短路”(short-cut)。</p>\n<p>或运算符可以多个连用，这时返回第一个布尔值为 <code v-pre>true</code> 的表达式的值。如果所有表达式都为 <code v-pre>false</code>，则返回最后一个表达式的值。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">false</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> ||</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 0</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> ||</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"\"</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> ||</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 4</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> ||</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"foo\"</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> ||</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> true</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 4</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">false</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> ||</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 0</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> ||</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// ''</span></span></code></pre>\n</div><p>上面代码中，例一里面，第一个布尔值为 <code v-pre>true</code> 的表达式是第四个表达式，所以得到数值 4。例二里面，所有表达式的布尔值都为 <code v-pre>false</code>，所以返回最后一个表达式的值。</p>\n<p>或运算符常用于为一个变量设置默认值。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">function</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> saveText</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">text</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">  text</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> text</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> ||</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">  // ...</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 或者写成</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">saveText</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">this</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">text</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> ||</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span></code></pre>\n</div><p>上面代码表示，如果函数调用时，没有提供参数，则该参数默认设置为空字符串。</p>\n<h2 id=\"三元条件运算符\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#三元条件运算符\"><span><code v-pre>? :</code> 三元条件运算符</span></a></h2>\n<p>三元条件运算符由问号(<code v-pre>?</code>)和冒号(<code v-pre>:</code>)组成，分隔三个表达式。它是 JavaScript 语言唯一一个需要三个运算子的运算符。如果第一个表达式的布尔值为 <code v-pre>true</code>，则返回第二个表达式的值，否则返回第三个表达式的值。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"t\"</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#C678DD\"> ?</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"hello\"</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#C678DD\"> :</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"world\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// \"hello\"</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">0</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#C678DD\"> ?</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"hello\"</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#C678DD\"> :</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"world\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// \"world\"</span></span></code></pre>\n</div><p>上面代码的 <code v-pre>t</code> 和 <code v-pre>0</code> 的布尔值分别为 <code v-pre>true</code> 和 <code v-pre>false</code>，所以分别返回第二个和第三个表达式的值。</p>\n<p>通常来说，三元条件表达式与 <code v-pre>if...else</code> 语句具有同样表达效果，前者可以表达的，后者也能表达。但是两者具有一个重大差别，<code v-pre>if...else</code> 是语句，没有返回值；三元条件表达式是表达式，具有返回值。所以，在需要返回值的场合，只能使用三元条件表达式，而不能使用 <code v-pre>if..else</code>。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">console</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">log</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">true</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#C678DD\"> ?</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"T\"</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#C678DD\"> :</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"F\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span></code></pre>\n</div><p>上面代码中，<code v-pre>console.log</code> 方法的参数必须是一个表达式，这时就只能使用三元条件表达式。如果要用 <code v-pre>if...else</code> 语句，就必须改变整个代码写法了。</p>\n","tagOpen":"<template>","tagClose":"</template>"},"script":null,"scriptSetup":null,"scripts":[],"styles":[],"customBlocks":[]},"content":"\n布尔运算符用于将表达式转为布尔值，一共包含四个运算符。\n\n- 取反运算符: `!`\n- 且运算符: `&&`\n- 或运算符: `||`\n- 三元运算符: `?:`\n\n<!-- more -->\n\n## 取反运算符 `!`\n\n取反运算符是一个感叹号，用于将布尔值变为相反值，即 `true` 变成 `false`，`false` 变成 `true`。\n\n```js\n!true; // false\n!false; // true\n```\n\n对于非布尔值，取反运算符会将其转为布尔值。可以这样记忆，以下六个值取反后为 `true`，其他值都为 `false`。\n\n- `undefined`\n- `null`\n- `false`\n- `0`\n- `NaN`\n- 空字符串(`''`)\n\n```js\n!undefined; // true\n!null; // true\n!0; // true\n!NaN; // true\n!\"\"; // true\n\n!54; // false\n!\"hello\"; // false\n![]; // false\n!{}; // false\n```\n\n上面代码中，不管什么类型的值，经过取反运算后，都变成了布尔值。\n\n如果对一个值连续做两次取反运算，等于将其转为对应的布尔值，与 `Boolean` 函数的作用相同。这是一种常用的类型转换的写法。\n\n```js\n!!x;\n// 等同于\nBoolean(x);\n```\n\n上面代码中，不管 `x` 是什么类型的值，经过两次取反运算后，变成了与 `Boolean` 函数结果相同的布尔值。所以，两次取反就是将一个值转为布尔值的简便写法。\n\n## 且运算符 `&&`\n\n且运算符(`&&`)往往用于多个表达式的求值。\n\n它的运算规则是: 如果第一个运算子的布尔值为 `true`，则返回第二个运算子的值(注意是值，不是布尔值)；如果第一个运算子的布尔值为 `false`，则直接返回第一个运算子的值，且不再对第二个运算子求值。\n\n```js\n\"t\" && \"\"; // \"\"\n\"t\" && \"f\"; // \"f\"\n\"t\" && 1 + 2; // 3\n\"\" && \"f\"; // \"\"\n\"\" && \"\"; // \"\"\n\nlet x = 1;\n\n1 - 1 && (x += 1); // 0\nx; // 1\n```\n\n上面代码的最后一个例子，由于且运算符的第一个运算子的布尔值为 `false`，则直接返回它的值 `0`，而不再对第二个运算子求值，所以变量 `x` 的值没变。\n\n这种跳过第二个运算子的机制，被称为“短路”。有些程序员喜欢用它取代 `if` 结构，比如下面是一段 `if` 结构的代码，就可以用且运算符改写。\n\n```js\nif (i) {\n  doSomething();\n}\n\n// 等价于\n\ni && doSomething();\n```\n\n上面代码的两种写法是等价的，但是后一种不容易看出目的，也不容易除错，建议谨慎使用。\n\n且运算符可以多个连用，这时返回第一个布尔值为 `false` 的表达式的值。如果所有表达式的布尔值都为 `true`，则返回最后一个表达式的值。\n\n```js\ntrue && \"foo\" && \"\" && 4 && \"foo\" && true;\n// ''\n\n1 && 2 && 3;\n// 3\n```\n\n上面代码中，例一里面，第一个布尔值为 `false` 的表达式为第三个表达式，所以得到一个空字符串。例二里面，所有表达式的布尔值都是 `true`，所有返回最后一个表达式的值 `3`。\n\n## 或运算符 `||`\n\n或运算符(`||`)也用于多个表达式的求值。它的运算规则是: 如果第一个运算子的布尔值为 `true`，则返回第一个运算子的值，且不再对第二个运算子求值；如果第一个运算子的布尔值为 `false`，则返回第二个运算子的值。\n\n```js\n\"t\" || \"\"; // \"t\"\n\"t\" || \"f\"; // \"t\"\n\"\" || \"f\"; // \"f\"\n\"\" || \"\"; // \"\"\n```\n\n短路规则对这个运算符也适用。\n\n```js\nlet x = 1;\n\ntrue || (x = 2); // true\nx; // 1\n```\n\n上面代码中，或运算符的第一个运算子为 `true`，所以直接返回 `true`，不再运行第二个运算子。所以，`x` 的值没有改变。这种只通过第一个表达式的值，控制是否运行第二个表达式的机制，就称为“短路”(short-cut)。\n\n或运算符可以多个连用，这时返回第一个布尔值为 `true` 的表达式的值。如果所有表达式都为 `false`，则返回最后一个表达式的值。\n\n```js\nfalse || 0 || \"\" || 4 || \"foo\" || true;\n// 4\n\nfalse || 0 || \"\";\n// ''\n```\n\n上面代码中，例一里面，第一个布尔值为 `true` 的表达式是第四个表达式，所以得到数值 4。例二里面，所有表达式的布尔值都为 `false`，所以返回最后一个表达式的值。\n\n或运算符常用于为一个变量设置默认值。\n\n```js\nfunction saveText(text) {\n  text = text || \"\";\n  // ...\n}\n\n// 或者写成\nsaveText(this.text || \"\");\n```\n\n上面代码表示，如果函数调用时，没有提供参数，则该参数默认设置为空字符串。\n\n## `? :` 三元条件运算符\n\n三元条件运算符由问号(`?`)和冒号(`:`)组成，分隔三个表达式。它是 JavaScript 语言唯一一个需要三个运算子的运算符。如果第一个表达式的布尔值为 `true`，则返回第二个表达式的值，否则返回第三个表达式的值。\n\n```js\n\"t\" ? \"hello\" : \"world\"; // \"hello\"\n0 ? \"hello\" : \"world\"; // \"world\"\n```\n\n上面代码的 `t` 和 `0` 的布尔值分别为 `true` 和 `false`，所以分别返回第二个和第三个表达式的值。\n\n通常来说，三元条件表达式与 `if...else` 语句具有同样表达效果，前者可以表达的，后者也能表达。但是两者具有一个重大差别，`if...else` 是语句，没有返回值；三元条件表达式是表达式，具有返回值。所以，在需要返回值的场合，只能使用三元条件表达式，而不能使用 `if..else`。\n\n```js\nconsole.log(true ? \"T\" : \"F\");\n```\n\n上面代码中，`console.log` 方法的参数必须是一个表达式，这时就只能使用三元条件表达式。如果要用 `if...else` 语句，就必须改变整个代码写法了。\n","excerpt":"","title":"","headers":[{"level":2,"title":"取反运算符 !","slug":"取反运算符","link":"#取反运算符","children":[]},{"level":2,"title":"且运算符 &&","slug":"且运算符","link":"#且运算符","children":[]},{"level":2,"title":"或运算符 ||","slug":"或运算符","link":"#或运算符","children":[]},{"level":2,"title":"? : 三元条件运算符","slug":"三元条件运算符","link":"#三元条件运算符","children":[]}]}}
