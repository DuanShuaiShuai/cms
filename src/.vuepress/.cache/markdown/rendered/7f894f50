{"content":"<h2 id=\"什么是远程仓库\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#什么是远程仓库\"><span>什么是远程仓库</span></a></h2>\n<p>Git 是分布式版本控制系统，同一个 Git 仓库，可以分布到不同的机器上。怎么分布呢? 最早，肯定只有一台机器有一个原始版本库，此后，别的机器可以“克隆”这个原始版本库，而且每台机器的版本库其实都是一样的，并没有主次之分。</p>\n<p>实际情况往往是这样，找一台电脑充当服务器的角色，每天 24 小时开机，其他每个人都从这个“服务器”仓库克隆一份到自己的电脑上，并且各自把各自的提交推送到服务器仓库里，也从服务器仓库中拉取别人的提交。</p>\n<p>完全可以自己搭建一台运行 Git 的服务器，不过现阶段，为了学 Git 先搭个服务器绝对是小题大作。好在这个世界上有个叫 GitHub 的神奇的网站，从名字就可以看出，这个网站就是提供 Git 仓库托管服务的，所以，只要注册一个 GitHub 账号，就可以免费获得 Git 远程仓库。</p>\n<p>在继续阅读后续内容前，请自行注册 GitHub 账号。由于您的本地 Git 仓库和 GitHub 仓库之间的传输是通过 SSH 加密的，所以，需要一点设置:</p>\n<ul>\n<li>\n<p>第 1 步: 创建 SSH Key。在用户主目录下，看看有没有.ssh 目录，如果有，再看看这个目录下有没有 id_rsa 和 id_rsa.pub 这两个文件，如果已经有了，可直接跳到下一步。如果没有，打开 Shell (Windows 下打开 Git Bash)，创建 SSH Key:</p>\n<div class=\"language-sh\" data-highlighter=\"shiki\" data-ext=\"sh\" data-title=\"sh\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">ssh-keygen</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> -t</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> rsa</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> -C</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"youremail@example.com\"</span></span></code></pre>\n</div><p>您需要把邮件地址换成您自己的邮件地址，然后一路回车，使用默认值即可，由于这个 Key 也不是用于军事目的，所以也无需设置密码。</p>\n<p>如果一切顺利的话，可以在用户主目录里找到.ssh 目录，里面有 id_rsa 和 id_rsa.pub 两个文件，这两个就是 SSH Key 的秘钥对，id_rsa 是私钥，不能泄露出去，id_rsa.pub 是公钥，可以放心地告诉任何人。</p>\n</li>\n<li>\n<p>第 2 步: 登陆 GitHub，点击右上角头像，进入设置。</p>\n<p>进入安全设置下的 SSH 公钥界面。</p>\n<p>在标题中填写公钥的备注名称，把 id_rsa.pub 文件的内容粘贴到底下的输入框中。</p>\n</li>\n</ul>\n<p>为什么 GitHub 需要 SSH Key 呢? 因为 GitHub 需要识别出您推送的提交确实是您推送的，而不是别人冒充的，而 Git 支持 SSH 协议，所以，GitHub 只要知道了您的公钥，就可以确认只有您自己才能推送。</p>\n<p>当然，GitHub 允许您添加多个 Key。假定您有若干电脑，您一会儿在公司提交，一会儿在家里提交，只要把每台电脑的 Key 都添加到 GitHub，就可以在每台电脑上往 GitHub 推送了。</p>\n<p>最后友情提示，在 GitHub 上免费托管的 Git 仓库，任何人都可以看到喔(但只有您自己才能改)。所以，不要把敏感信息放进去。</p>\n<p>如果您不想让别人看到 Git 库，一是让 GitHub 把公开的仓库变成私有的，这样别人就看不见了(不可读更不可写)。另一个办法是自己动手，搭一个 Git 服务器，因为是您自己的 Git 服务器，所以别人也是看不见的。</p>\n<p>确保您拥有一个 GitHub 账号后，我们就即将开始远程仓库的学习。</p>\n<h2 id=\"添加远程库\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#添加远程库\"><span>添加远程库</span></a></h2>\n<p>现在的情景是，您已经在本地创建了一个 Git 仓库后，又想在 GitHub 创建一个 Git 仓库，并且让这两个仓库进行远程同步，这样，GitHub 上的仓库既可以作为备份，又可以让其他人通过该仓库来协作，真是一举多得。</p>\n<p>首先，登陆 GitHub，然后，在右上角找到 “+” 按钮，点击 &quot;New Repository&quot;。</p>\n<p>在项目填入 learngit，其他保持默认设置，点击“创建”按钮，就成功地创建了一个新的 Git 仓库:</p>\n<p>目前，在 GitHub 上的这个 learngit 仓库还是空的，GitHub 告诉我们，可以从这个仓库克隆出新的仓库，也可以把一个已有的本地仓库与之关联，然后，把本地仓库的内容推送到 GitHub 仓库。</p>\n<p>现在，我们根据 GitHub 的提示，在本地的 learngit 仓库下运行命令:</p>\n<div class=\"language-sh\" data-highlighter=\"shiki\" data-ext=\"sh\" data-title=\"sh\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">git</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> remote</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> add</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> origin</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> git@github.com:Hope-Studio/learngit.git</span></span></code></pre>\n</div><p>请千万注意，把上面的 Hope-Studio 替换成您自己的 GitHub 账户名，否则，您在本地关联的就是希望工作室的远程库，关联没有问题，但是推送是推不上去的，因为您的 SSH Key 公钥不在希望工作室的账户列表中。</p>\n<p>添加后，远程库的名字就是 <code v-pre>origin</code>，这是 Git 默认的叫法，也可以改成别的。</p>\n<p>下一步，就可以把本地库的所有内容推送到远程库上:</p>\n<div class=\"language-sh line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"sh\" data-title=\"sh\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">$</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> git</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> push</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> -u</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> origin</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> master</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">Counting</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> objects:</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 20,</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> done.</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">Delta</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> compression</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> using</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> up</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> to</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 4</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> threads.</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">Compressing</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> objects:</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 100%</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (15/15), done.</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">Writing</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> objects:</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 100%</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (20/20), 1.64 KiB | </span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">560.00</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> KiB/s,</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> done.</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">Total</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 20</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (delta </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">5</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">), reused 0 (</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">delta</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">remote:</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> Resolving</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> deltas:</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 100%</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (5/5), done.</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">To</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> github.com:Hope-Studio/learngit.git</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> *</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> [new </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">branch]</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">      master</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> -> </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">master</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">Branch</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 'master'</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> set</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> up</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> to</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> track</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> remote</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> branch</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 'master'</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> from</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 'origin'.</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>把本地库的内容推送到远程，用 <code v-pre>git push</code> 命令，实际上是把当前分支 <code v-pre>master</code> 推送到远程。</p>\n<p>由于远程库是空的，我们第一次推送 <code v-pre>master</code> 分支时，加上了 <code v-pre>-u</code> 参数，Git 不但会把本地的 <code v-pre>master</code> 分支内容推送的远程新的 <code v-pre>master</code> 分支，还会把本地的 <code v-pre>master</code> 分支和远程的 <code v-pre>master</code> 分支关联起来，在以后的推送或者拉取时就可以简化命令。</p>\n<p>推送成功后，可以立刻在 GitHub 页面中看到远程库的内容已经和本地一模一样:</p>\n<p>从现在起，只要本地作了提交，就可以通过命令:</p>\n<div class=\"language-sh\" data-highlighter=\"shiki\" data-ext=\"sh\" data-title=\"sh\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">git</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> push</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> origin</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> master</span></span></code></pre>\n</div><p>把本地 <code v-pre>master</code> 分支的最新修改推送至 GitHub，现在，您就拥有了真正的分布式版本库!</p>\n<h2 id=\"ssh-警告\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#ssh-警告\"><span>SSH 警告</span></a></h2>\n<p>当您第一次使用 Git 的 clone 或者 push 命令连接 GitHub 时，会得到一个警告:</p>\n<div class=\"language-sh\" data-highlighter=\"shiki\" data-ext=\"sh\" data-title=\"sh\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">The</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> authenticity</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> of</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> host</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 'github.com (xx.xx.xx.xx)'</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> can't be established.</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">RSA key fingerprint is xx.xx.xx.xx.xx.</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">Are you sure you want to continue connecting (yes/no)?</span></span></code></pre>\n</div><p>这是因为 Git 使用 SSH 连接，而 SSH 连接在第一次验证 GitHub 服务器的 Key 时，需要您确认 GitHub 的 Key 的指纹信息是否真的来自 GitHub 的服务器，输入 <code v-pre>yes</code> 回车即可。</p>\n<p>Git 会输出一个警告，告诉您已经把 GitHub 的 Key 添加到本机的一个信任列表里了:</p>\n<div class=\"language-md\" data-highlighter=\"shiki\" data-ext=\"md\" data-title=\"md\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">Warning: Permanently added 'github.com' (RSA) to the list of known hosts.</span></span></code></pre>\n</div><p>这个警告只会出现一次，后面的操作就不会有任何警告了。</p>\n<p>如果您实在担心有人冒充 GitHub 服务器，输入 <code v-pre>yes</code> 前可以对照 GitHub 的 RSA Key 的指纹信息是否与 SSH 连接给出的一致。</p>\n<h3 id=\"关联小结\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#关联小结\"><span>关联小结</span></a></h3>\n<p>要关联一个远程库，使用命令 <code v-pre>git remote add origin git@&lt;server-name&gt;:&lt;path&gt;/&lt;repo-name&gt;.git</code>；</p>\n<p>关联后，使用命令 <code v-pre>git push -u origin master</code> 第一次推送 master 分支的所有内容；</p>\n<p>此后，每次本地提交后，只要有必要，就可以使用命令 <code v-pre>git push origin master</code> 推送最新修改；</p>\n<p>分布式版本系统的最大好处之一是在本地工作完全不需要考虑远程库的存在，也就是有没有联网都可以正常工作，而 SVN 在没有联网的时候是拒绝干活的! 当有网络的时候，再把本地提交推送一下就完成了同步，真是太方便了!</p>\n<h2 id=\"从远程库克隆\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#从远程库克隆\"><span>从远程库克隆</span></a></h2>\n<p>上次我们讲了先有本地库，后有远程库的时候，如何关联远程库。</p>\n<p>现在，假设我们从零开发，那么最好的方式是先创建远程库，然后，从远程库克隆。</p>\n<p>首先，登陆 GitHub，创建一个新的仓库，名字叫 <code v-pre>gitskills</code>:</p>\n<p>我们勾选使用 “readme 初始化项目”，这样 GitHub 会自动为我们创建一个 README.md 文件。创建完毕后，可以看到 README.md 文件。</p>\n<p>现在，远程库已经准备好了，下一步是用命令 <code v-pre>git clone</code> 克隆一个本地库:</p>\n<div class=\"language-sh\" data-highlighter=\"shiki\" data-ext=\"sh\" data-title=\"sh\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">$</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> git</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> clone</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> git@github.com:Hope-Studio/gitskills.git</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">Cloning</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> into</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 'gitskills'...</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">remote:</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> Counting</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> objects:</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 3,</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> done.</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">remote:</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> Total</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 3</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (delta </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">), reused 0 (</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">delta</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">), pack-reused 3</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">Receiving</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> objects:</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 100%</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (3/3), done.</span></span></code></pre>\n</div><div class=\"hint-container tip\">\n<p class=\"hint-container-title\">提示</p>\n<p>如果您使用 clone 命令克隆了一个仓库，命令会自动将其添加为远程仓库并默认以 “origin” 为简写。</p>\n</div>\n<p>注意把 Git 库的地址换成您自己的，然后进入 <code v-pre>gitskills</code> 目录看看，已经有 README.md 文件了:</p>\n<div class=\"language-sh\" data-highlighter=\"shiki\" data-ext=\"sh\" data-title=\"sh\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">$</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> cd</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> gitskills</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">$</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> ls</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">README.md</span></span></code></pre>\n</div><p>如果有多个人协作开发，那么每个人各自从远程克隆一份就可以了。</p>\n<p>您也许还注意到，GitHub 给出的地址不止一个，还可以用 <a href=\"https://github.com/Hope-Studio/gitskills.git\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/Hope-Studio/gitskills.git</a> 这样的地址。实际上，Git 支持多种协议，默认的 <code v-pre>git://</code> 使用 ssh，但也可以使用 HTTPS 等其他协议。</p>\n<p>使用 HTTPS 除了速度慢以外，还有个最大的麻烦是每次推送都必须输入口令，但是在某些只开放 http 端口的公司内部就无法使用 ssh 协议而只能用 https。</p>\n<h3 id=\"克隆小结\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#克隆小结\"><span>克隆小结</span></a></h3>\n<p>要克隆一个仓库，首先必须知道仓库的地址，然后使用 <code v-pre>git clone</code> 命令克隆。</p>\n<p>Git 支持多种协议，包括 https，但通过 ssh 支持的原生 git 协议速度最快。</p>\n<h2 id=\"从远程仓库中抓取\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#从远程仓库中抓取\"><span>从远程仓库中抓取</span></a></h2>\n<p>从远程仓库中获得数据，可以执行:</p>\n<div class=\"language-sh\" data-highlighter=\"shiki\" data-ext=\"sh\" data-title=\"sh\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">git</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> fetch</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> &#x3C;</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">remot</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">e></span></span></code></pre>\n</div><p>这个命令会访问远程仓库，从中拉取所有您还没有的数据。执行完成后，您将会拥有那个远程仓库中所有分支的引用，可以随时合并或查看。</p>\n<p><code v-pre>git fetch origin</code> 会抓取克隆(或上一次抓取)后新推送的所有工作。必须注意 <code v-pre>git fetch</code> 命令只会将数据下载到您的本地仓库——它并不会自动合并或修改您当前的工作。当准备好时您必须手动将其合并入您的工作。</p>\n<h2 id=\"推送到远程仓库\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#推送到远程仓库\"><span>推送到远程仓库</span></a></h2>\n<p>当您想分享您的项目时，必须将其推送到上游。这个命令很简单: <code v-pre>git push &lt;remote&gt; &lt;branch&gt;</code>。当您\n想要将 master 分支推送到 origin 服务器时(再次说明，克隆时通常会自动帮您设置好那两个名字)， 那么\n运行这个命令就可以将您所做的备份到服务器:</p>\n<div class=\"language-sh\" data-highlighter=\"shiki\" data-ext=\"sh\" data-title=\"sh\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">git</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> push</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> origin</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> master</span></span></code></pre>\n</div><p>只有当您有所克隆服务器的写入权限，并且之前没有人推送过时，这条命令才能生效。当您和其他人在同一时间克隆，他们先推送到上游然后您再推送到上游，您的推送就会毫无疑问地被拒绝。您必须先抓取他们的工作并将其合并进您的工作后才能推送。</p>\n<h2 id=\"查看某个远程仓库\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#查看某个远程仓库\"><span>查看某个远程仓库</span></a></h2>\n<p>如果想要查看某一个远程仓库的更多信息，可以使用 <code v-pre>git remote show &lt;remote&gt;</code> 命令。如果想以一个特\n定的缩写名运行这个命令，例如 origin，会得到像下面类似的信息:</p>\n<div class=\"language-sh line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"sh\" data-title=\"sh\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">$</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> git</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> remote</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> show</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> origin</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">* remote origin</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">Fetch</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> URL:</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> https://github.com/schacon/ticgit</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">Push</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> URL:</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> https://github.com/schacon/ticgit</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">HEAD</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> branch:</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> master</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">Remote</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> branches:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">master</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> tracked</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">dev-branch</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> tracked</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">Local</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> branch</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> configured</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> for</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 'git pull':</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">master</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> merges</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> with</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> remote</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> master</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">Local</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> ref</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> configured</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> for</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 'git push':</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">master</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> pushes</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> to</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> master</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (up </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">to</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> date</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>它同样会列出远程仓库的 URL 与跟踪分支的信息。这些信息非常有用，它告诉您正处于 master 分支，并且如果运行 <code v-pre>git pull</code>，就会抓取所有的远程引用，然后将远程 master 分支合并到本地 master 分支。它也会列出拉取到的所有远程引用。</p>\n<h2 id=\"远程仓库的重命名与移除\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#远程仓库的重命名与移除\"><span>远程仓库的重命名与移除</span></a></h2>\n<p>您可以运行 <code v-pre>git remote rename</code> 来修改一个远程仓库的简写名。例如，想要将 pb 重命名为 paul，可以用 <code v-pre>git remote rename</code> 这样做:</p>\n<div class=\"language-sh\" data-highlighter=\"shiki\" data-ext=\"sh\" data-title=\"sh\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">$</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> git</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> remote</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> rename</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> pb</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> paul</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">$</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> git</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> remote</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">origin</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">paul</span></span></code></pre>\n</div><p>值得注意的是这同样也会修改您所有远程跟踪的分支名字。那些过去引用 <code v-pre>pb/master</code> 的现在会引用 <code v-pre>paul/master</code>。</p>\n<p>如果因为一些原因想要移除一个远程仓库——您已经从服务器上搬走了或不再想使用某一个特定的镜像了，又或者某一个贡献者不再贡献了——可以使用 <code v-pre>git remote remove</code> 或 <code v-pre>git remote rm</code>:</p>\n<div class=\"language-sh\" data-highlighter=\"shiki\" data-ext=\"sh\" data-title=\"sh\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">$</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> git</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> remote</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> remove</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> paul</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">$</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> git</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> remote</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">origin</span></span></code></pre>\n</div><p>一旦您使用这种方式删除了一个远程仓库，那么所有和这个远程仓库相关的远程跟踪分支以及配置信息也会一起被删除。</p>\n","env":{"base":"/","filePath":"/Users/carson/Desktop/Mister-Hope.github.io-main/src/software/git/remote.md","filePathRelative":"software/git/remote.md","frontmatter":{"date":"2020-05-04T00:00:00.000Z","title":"远程仓库","icon":"remote","order":9,"author":"廖雪峰","category":"Git","tag":["Git","软件"],"copyright":"Copyright by 廖雪峰 Edited by Mister.Duan"},"sfcBlocks":{"template":{"type":"template","content":"<template><h2 id=\"什么是远程仓库\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#什么是远程仓库\"><span>什么是远程仓库</span></a></h2>\n<p>Git 是分布式版本控制系统，同一个 Git 仓库，可以分布到不同的机器上。怎么分布呢? 最早，肯定只有一台机器有一个原始版本库，此后，别的机器可以“克隆”这个原始版本库，而且每台机器的版本库其实都是一样的，并没有主次之分。</p>\n<p>实际情况往往是这样，找一台电脑充当服务器的角色，每天 24 小时开机，其他每个人都从这个“服务器”仓库克隆一份到自己的电脑上，并且各自把各自的提交推送到服务器仓库里，也从服务器仓库中拉取别人的提交。</p>\n<p>完全可以自己搭建一台运行 Git 的服务器，不过现阶段，为了学 Git 先搭个服务器绝对是小题大作。好在这个世界上有个叫 GitHub 的神奇的网站，从名字就可以看出，这个网站就是提供 Git 仓库托管服务的，所以，只要注册一个 GitHub 账号，就可以免费获得 Git 远程仓库。</p>\n<p>在继续阅读后续内容前，请自行注册 GitHub 账号。由于您的本地 Git 仓库和 GitHub 仓库之间的传输是通过 SSH 加密的，所以，需要一点设置:</p>\n<ul>\n<li>\n<p>第 1 步: 创建 SSH Key。在用户主目录下，看看有没有.ssh 目录，如果有，再看看这个目录下有没有 id_rsa 和 id_rsa.pub 这两个文件，如果已经有了，可直接跳到下一步。如果没有，打开 Shell (Windows 下打开 Git Bash)，创建 SSH Key:</p>\n<div class=\"language-sh\" data-highlighter=\"shiki\" data-ext=\"sh\" data-title=\"sh\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">ssh-keygen</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> -t</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> rsa</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> -C</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"youremail@example.com\"</span></span></code></pre>\n</div><p>您需要把邮件地址换成您自己的邮件地址，然后一路回车，使用默认值即可，由于这个 Key 也不是用于军事目的，所以也无需设置密码。</p>\n<p>如果一切顺利的话，可以在用户主目录里找到.ssh 目录，里面有 id_rsa 和 id_rsa.pub 两个文件，这两个就是 SSH Key 的秘钥对，id_rsa 是私钥，不能泄露出去，id_rsa.pub 是公钥，可以放心地告诉任何人。</p>\n</li>\n<li>\n<p>第 2 步: 登陆 GitHub，点击右上角头像，进入设置。</p>\n<p>进入安全设置下的 SSH 公钥界面。</p>\n<p>在标题中填写公钥的备注名称，把 id_rsa.pub 文件的内容粘贴到底下的输入框中。</p>\n</li>\n</ul>\n<p>为什么 GitHub 需要 SSH Key 呢? 因为 GitHub 需要识别出您推送的提交确实是您推送的，而不是别人冒充的，而 Git 支持 SSH 协议，所以，GitHub 只要知道了您的公钥，就可以确认只有您自己才能推送。</p>\n<p>当然，GitHub 允许您添加多个 Key。假定您有若干电脑，您一会儿在公司提交，一会儿在家里提交，只要把每台电脑的 Key 都添加到 GitHub，就可以在每台电脑上往 GitHub 推送了。</p>\n<p>最后友情提示，在 GitHub 上免费托管的 Git 仓库，任何人都可以看到喔(但只有您自己才能改)。所以，不要把敏感信息放进去。</p>\n<p>如果您不想让别人看到 Git 库，一是让 GitHub 把公开的仓库变成私有的，这样别人就看不见了(不可读更不可写)。另一个办法是自己动手，搭一个 Git 服务器，因为是您自己的 Git 服务器，所以别人也是看不见的。</p>\n<p>确保您拥有一个 GitHub 账号后，我们就即将开始远程仓库的学习。</p>\n<h2 id=\"添加远程库\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#添加远程库\"><span>添加远程库</span></a></h2>\n<p>现在的情景是，您已经在本地创建了一个 Git 仓库后，又想在 GitHub 创建一个 Git 仓库，并且让这两个仓库进行远程同步，这样，GitHub 上的仓库既可以作为备份，又可以让其他人通过该仓库来协作，真是一举多得。</p>\n<p>首先，登陆 GitHub，然后，在右上角找到 “+” 按钮，点击 &quot;New Repository&quot;。</p>\n<p>在项目填入 learngit，其他保持默认设置，点击“创建”按钮，就成功地创建了一个新的 Git 仓库:</p>\n<p>目前，在 GitHub 上的这个 learngit 仓库还是空的，GitHub 告诉我们，可以从这个仓库克隆出新的仓库，也可以把一个已有的本地仓库与之关联，然后，把本地仓库的内容推送到 GitHub 仓库。</p>\n<p>现在，我们根据 GitHub 的提示，在本地的 learngit 仓库下运行命令:</p>\n<div class=\"language-sh\" data-highlighter=\"shiki\" data-ext=\"sh\" data-title=\"sh\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">git</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> remote</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> add</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> origin</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> git@github.com:Hope-Studio/learngit.git</span></span></code></pre>\n</div><p>请千万注意，把上面的 Hope-Studio 替换成您自己的 GitHub 账户名，否则，您在本地关联的就是希望工作室的远程库，关联没有问题，但是推送是推不上去的，因为您的 SSH Key 公钥不在希望工作室的账户列表中。</p>\n<p>添加后，远程库的名字就是 <code v-pre>origin</code>，这是 Git 默认的叫法，也可以改成别的。</p>\n<p>下一步，就可以把本地库的所有内容推送到远程库上:</p>\n<div class=\"language-sh line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"sh\" data-title=\"sh\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">$</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> git</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> push</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> -u</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> origin</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> master</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">Counting</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> objects:</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 20,</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> done.</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">Delta</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> compression</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> using</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> up</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> to</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 4</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> threads.</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">Compressing</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> objects:</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 100%</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (15/15), done.</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">Writing</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> objects:</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 100%</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (20/20), 1.64 KiB | </span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">560.00</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> KiB/s,</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> done.</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">Total</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 20</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (delta </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">5</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">), reused 0 (</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">delta</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">remote:</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> Resolving</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> deltas:</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 100%</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (5/5), done.</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">To</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> github.com:Hope-Studio/learngit.git</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> *</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> [new </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">branch]</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">      master</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> -> </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">master</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">Branch</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 'master'</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> set</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> up</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> to</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> track</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> remote</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> branch</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 'master'</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> from</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 'origin'.</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>把本地库的内容推送到远程，用 <code v-pre>git push</code> 命令，实际上是把当前分支 <code v-pre>master</code> 推送到远程。</p>\n<p>由于远程库是空的，我们第一次推送 <code v-pre>master</code> 分支时，加上了 <code v-pre>-u</code> 参数，Git 不但会把本地的 <code v-pre>master</code> 分支内容推送的远程新的 <code v-pre>master</code> 分支，还会把本地的 <code v-pre>master</code> 分支和远程的 <code v-pre>master</code> 分支关联起来，在以后的推送或者拉取时就可以简化命令。</p>\n<p>推送成功后，可以立刻在 GitHub 页面中看到远程库的内容已经和本地一模一样:</p>\n<p>从现在起，只要本地作了提交，就可以通过命令:</p>\n<div class=\"language-sh\" data-highlighter=\"shiki\" data-ext=\"sh\" data-title=\"sh\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">git</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> push</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> origin</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> master</span></span></code></pre>\n</div><p>把本地 <code v-pre>master</code> 分支的最新修改推送至 GitHub，现在，您就拥有了真正的分布式版本库!</p>\n<h2 id=\"ssh-警告\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#ssh-警告\"><span>SSH 警告</span></a></h2>\n<p>当您第一次使用 Git 的 clone 或者 push 命令连接 GitHub 时，会得到一个警告:</p>\n<div class=\"language-sh\" data-highlighter=\"shiki\" data-ext=\"sh\" data-title=\"sh\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">The</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> authenticity</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> of</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> host</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 'github.com (xx.xx.xx.xx)'</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> can't be established.</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">RSA key fingerprint is xx.xx.xx.xx.xx.</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">Are you sure you want to continue connecting (yes/no)?</span></span></code></pre>\n</div><p>这是因为 Git 使用 SSH 连接，而 SSH 连接在第一次验证 GitHub 服务器的 Key 时，需要您确认 GitHub 的 Key 的指纹信息是否真的来自 GitHub 的服务器，输入 <code v-pre>yes</code> 回车即可。</p>\n<p>Git 会输出一个警告，告诉您已经把 GitHub 的 Key 添加到本机的一个信任列表里了:</p>\n<div class=\"language-md\" data-highlighter=\"shiki\" data-ext=\"md\" data-title=\"md\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">Warning: Permanently added 'github.com' (RSA) to the list of known hosts.</span></span></code></pre>\n</div><p>这个警告只会出现一次，后面的操作就不会有任何警告了。</p>\n<p>如果您实在担心有人冒充 GitHub 服务器，输入 <code v-pre>yes</code> 前可以对照 GitHub 的 RSA Key 的指纹信息是否与 SSH 连接给出的一致。</p>\n<h3 id=\"关联小结\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#关联小结\"><span>关联小结</span></a></h3>\n<p>要关联一个远程库，使用命令 <code v-pre>git remote add origin git@&lt;server-name&gt;:&lt;path&gt;/&lt;repo-name&gt;.git</code>；</p>\n<p>关联后，使用命令 <code v-pre>git push -u origin master</code> 第一次推送 master 分支的所有内容；</p>\n<p>此后，每次本地提交后，只要有必要，就可以使用命令 <code v-pre>git push origin master</code> 推送最新修改；</p>\n<p>分布式版本系统的最大好处之一是在本地工作完全不需要考虑远程库的存在，也就是有没有联网都可以正常工作，而 SVN 在没有联网的时候是拒绝干活的! 当有网络的时候，再把本地提交推送一下就完成了同步，真是太方便了!</p>\n<h2 id=\"从远程库克隆\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#从远程库克隆\"><span>从远程库克隆</span></a></h2>\n<p>上次我们讲了先有本地库，后有远程库的时候，如何关联远程库。</p>\n<p>现在，假设我们从零开发，那么最好的方式是先创建远程库，然后，从远程库克隆。</p>\n<p>首先，登陆 GitHub，创建一个新的仓库，名字叫 <code v-pre>gitskills</code>:</p>\n<p>我们勾选使用 “readme 初始化项目”，这样 GitHub 会自动为我们创建一个 README.md 文件。创建完毕后，可以看到 README.md 文件。</p>\n<p>现在，远程库已经准备好了，下一步是用命令 <code v-pre>git clone</code> 克隆一个本地库:</p>\n<div class=\"language-sh\" data-highlighter=\"shiki\" data-ext=\"sh\" data-title=\"sh\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">$</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> git</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> clone</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> git@github.com:Hope-Studio/gitskills.git</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">Cloning</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> into</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 'gitskills'...</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">remote:</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> Counting</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> objects:</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 3,</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> done.</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">remote:</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> Total</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 3</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (delta </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">), reused 0 (</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">delta</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">), pack-reused 3</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">Receiving</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> objects:</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 100%</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (3/3), done.</span></span></code></pre>\n</div><div class=\"hint-container tip\">\n<p class=\"hint-container-title\">提示</p>\n<p>如果您使用 clone 命令克隆了一个仓库，命令会自动将其添加为远程仓库并默认以 “origin” 为简写。</p>\n</div>\n<p>注意把 Git 库的地址换成您自己的，然后进入 <code v-pre>gitskills</code> 目录看看，已经有 README.md 文件了:</p>\n<div class=\"language-sh\" data-highlighter=\"shiki\" data-ext=\"sh\" data-title=\"sh\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">$</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> cd</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> gitskills</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">$</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> ls</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">README.md</span></span></code></pre>\n</div><p>如果有多个人协作开发，那么每个人各自从远程克隆一份就可以了。</p>\n<p>您也许还注意到，GitHub 给出的地址不止一个，还可以用 <a href=\"https://github.com/Hope-Studio/gitskills.git\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/Hope-Studio/gitskills.git</a> 这样的地址。实际上，Git 支持多种协议，默认的 <code v-pre>git://</code> 使用 ssh，但也可以使用 HTTPS 等其他协议。</p>\n<p>使用 HTTPS 除了速度慢以外，还有个最大的麻烦是每次推送都必须输入口令，但是在某些只开放 http 端口的公司内部就无法使用 ssh 协议而只能用 https。</p>\n<h3 id=\"克隆小结\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#克隆小结\"><span>克隆小结</span></a></h3>\n<p>要克隆一个仓库，首先必须知道仓库的地址，然后使用 <code v-pre>git clone</code> 命令克隆。</p>\n<p>Git 支持多种协议，包括 https，但通过 ssh 支持的原生 git 协议速度最快。</p>\n<h2 id=\"从远程仓库中抓取\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#从远程仓库中抓取\"><span>从远程仓库中抓取</span></a></h2>\n<p>从远程仓库中获得数据，可以执行:</p>\n<div class=\"language-sh\" data-highlighter=\"shiki\" data-ext=\"sh\" data-title=\"sh\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">git</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> fetch</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> &#x3C;</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">remot</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">e></span></span></code></pre>\n</div><p>这个命令会访问远程仓库，从中拉取所有您还没有的数据。执行完成后，您将会拥有那个远程仓库中所有分支的引用，可以随时合并或查看。</p>\n<p><code v-pre>git fetch origin</code> 会抓取克隆(或上一次抓取)后新推送的所有工作。必须注意 <code v-pre>git fetch</code> 命令只会将数据下载到您的本地仓库——它并不会自动合并或修改您当前的工作。当准备好时您必须手动将其合并入您的工作。</p>\n<h2 id=\"推送到远程仓库\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#推送到远程仓库\"><span>推送到远程仓库</span></a></h2>\n<p>当您想分享您的项目时，必须将其推送到上游。这个命令很简单: <code v-pre>git push &lt;remote&gt; &lt;branch&gt;</code>。当您\n想要将 master 分支推送到 origin 服务器时(再次说明，克隆时通常会自动帮您设置好那两个名字)， 那么\n运行这个命令就可以将您所做的备份到服务器:</p>\n<div class=\"language-sh\" data-highlighter=\"shiki\" data-ext=\"sh\" data-title=\"sh\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">git</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> push</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> origin</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> master</span></span></code></pre>\n</div><p>只有当您有所克隆服务器的写入权限，并且之前没有人推送过时，这条命令才能生效。当您和其他人在同一时间克隆，他们先推送到上游然后您再推送到上游，您的推送就会毫无疑问地被拒绝。您必须先抓取他们的工作并将其合并进您的工作后才能推送。</p>\n<h2 id=\"查看某个远程仓库\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#查看某个远程仓库\"><span>查看某个远程仓库</span></a></h2>\n<p>如果想要查看某一个远程仓库的更多信息，可以使用 <code v-pre>git remote show &lt;remote&gt;</code> 命令。如果想以一个特\n定的缩写名运行这个命令，例如 origin，会得到像下面类似的信息:</p>\n<div class=\"language-sh line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"sh\" data-title=\"sh\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">$</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> git</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> remote</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> show</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> origin</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">* remote origin</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">Fetch</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> URL:</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> https://github.com/schacon/ticgit</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">Push</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> URL:</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> https://github.com/schacon/ticgit</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">HEAD</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> branch:</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> master</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">Remote</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> branches:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">master</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> tracked</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">dev-branch</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> tracked</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">Local</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> branch</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> configured</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> for</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 'git pull':</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">master</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> merges</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> with</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> remote</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> master</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">Local</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> ref</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> configured</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> for</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 'git push':</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">master</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> pushes</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> to</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> master</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (up </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">to</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> date</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>它同样会列出远程仓库的 URL 与跟踪分支的信息。这些信息非常有用，它告诉您正处于 master 分支，并且如果运行 <code v-pre>git pull</code>，就会抓取所有的远程引用，然后将远程 master 分支合并到本地 master 分支。它也会列出拉取到的所有远程引用。</p>\n<h2 id=\"远程仓库的重命名与移除\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#远程仓库的重命名与移除\"><span>远程仓库的重命名与移除</span></a></h2>\n<p>您可以运行 <code v-pre>git remote rename</code> 来修改一个远程仓库的简写名。例如，想要将 pb 重命名为 paul，可以用 <code v-pre>git remote rename</code> 这样做:</p>\n<div class=\"language-sh\" data-highlighter=\"shiki\" data-ext=\"sh\" data-title=\"sh\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">$</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> git</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> remote</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> rename</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> pb</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> paul</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">$</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> git</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> remote</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">origin</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">paul</span></span></code></pre>\n</div><p>值得注意的是这同样也会修改您所有远程跟踪的分支名字。那些过去引用 <code v-pre>pb/master</code> 的现在会引用 <code v-pre>paul/master</code>。</p>\n<p>如果因为一些原因想要移除一个远程仓库——您已经从服务器上搬走了或不再想使用某一个特定的镜像了，又或者某一个贡献者不再贡献了——可以使用 <code v-pre>git remote remove</code> 或 <code v-pre>git remote rm</code>:</p>\n<div class=\"language-sh\" data-highlighter=\"shiki\" data-ext=\"sh\" data-title=\"sh\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">$</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> git</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> remote</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> remove</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> paul</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">$</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> git</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> remote</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">origin</span></span></code></pre>\n</div><p>一旦您使用这种方式删除了一个远程仓库，那么所有和这个远程仓库相关的远程跟踪分支以及配置信息也会一起被删除。</p>\n</template>","contentStripped":"<h2 id=\"什么是远程仓库\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#什么是远程仓库\"><span>什么是远程仓库</span></a></h2>\n<p>Git 是分布式版本控制系统，同一个 Git 仓库，可以分布到不同的机器上。怎么分布呢? 最早，肯定只有一台机器有一个原始版本库，此后，别的机器可以“克隆”这个原始版本库，而且每台机器的版本库其实都是一样的，并没有主次之分。</p>\n<p>实际情况往往是这样，找一台电脑充当服务器的角色，每天 24 小时开机，其他每个人都从这个“服务器”仓库克隆一份到自己的电脑上，并且各自把各自的提交推送到服务器仓库里，也从服务器仓库中拉取别人的提交。</p>\n<p>完全可以自己搭建一台运行 Git 的服务器，不过现阶段，为了学 Git 先搭个服务器绝对是小题大作。好在这个世界上有个叫 GitHub 的神奇的网站，从名字就可以看出，这个网站就是提供 Git 仓库托管服务的，所以，只要注册一个 GitHub 账号，就可以免费获得 Git 远程仓库。</p>\n<p>在继续阅读后续内容前，请自行注册 GitHub 账号。由于您的本地 Git 仓库和 GitHub 仓库之间的传输是通过 SSH 加密的，所以，需要一点设置:</p>\n<ul>\n<li>\n<p>第 1 步: 创建 SSH Key。在用户主目录下，看看有没有.ssh 目录，如果有，再看看这个目录下有没有 id_rsa 和 id_rsa.pub 这两个文件，如果已经有了，可直接跳到下一步。如果没有，打开 Shell (Windows 下打开 Git Bash)，创建 SSH Key:</p>\n<div class=\"language-sh\" data-highlighter=\"shiki\" data-ext=\"sh\" data-title=\"sh\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">ssh-keygen</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> -t</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> rsa</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> -C</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"youremail@example.com\"</span></span></code></pre>\n</div><p>您需要把邮件地址换成您自己的邮件地址，然后一路回车，使用默认值即可，由于这个 Key 也不是用于军事目的，所以也无需设置密码。</p>\n<p>如果一切顺利的话，可以在用户主目录里找到.ssh 目录，里面有 id_rsa 和 id_rsa.pub 两个文件，这两个就是 SSH Key 的秘钥对，id_rsa 是私钥，不能泄露出去，id_rsa.pub 是公钥，可以放心地告诉任何人。</p>\n</li>\n<li>\n<p>第 2 步: 登陆 GitHub，点击右上角头像，进入设置。</p>\n<p>进入安全设置下的 SSH 公钥界面。</p>\n<p>在标题中填写公钥的备注名称，把 id_rsa.pub 文件的内容粘贴到底下的输入框中。</p>\n</li>\n</ul>\n<p>为什么 GitHub 需要 SSH Key 呢? 因为 GitHub 需要识别出您推送的提交确实是您推送的，而不是别人冒充的，而 Git 支持 SSH 协议，所以，GitHub 只要知道了您的公钥，就可以确认只有您自己才能推送。</p>\n<p>当然，GitHub 允许您添加多个 Key。假定您有若干电脑，您一会儿在公司提交，一会儿在家里提交，只要把每台电脑的 Key 都添加到 GitHub，就可以在每台电脑上往 GitHub 推送了。</p>\n<p>最后友情提示，在 GitHub 上免费托管的 Git 仓库，任何人都可以看到喔(但只有您自己才能改)。所以，不要把敏感信息放进去。</p>\n<p>如果您不想让别人看到 Git 库，一是让 GitHub 把公开的仓库变成私有的，这样别人就看不见了(不可读更不可写)。另一个办法是自己动手，搭一个 Git 服务器，因为是您自己的 Git 服务器，所以别人也是看不见的。</p>\n<p>确保您拥有一个 GitHub 账号后，我们就即将开始远程仓库的学习。</p>\n<h2 id=\"添加远程库\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#添加远程库\"><span>添加远程库</span></a></h2>\n<p>现在的情景是，您已经在本地创建了一个 Git 仓库后，又想在 GitHub 创建一个 Git 仓库，并且让这两个仓库进行远程同步，这样，GitHub 上的仓库既可以作为备份，又可以让其他人通过该仓库来协作，真是一举多得。</p>\n<p>首先，登陆 GitHub，然后，在右上角找到 “+” 按钮，点击 &quot;New Repository&quot;。</p>\n<p>在项目填入 learngit，其他保持默认设置，点击“创建”按钮，就成功地创建了一个新的 Git 仓库:</p>\n<p>目前，在 GitHub 上的这个 learngit 仓库还是空的，GitHub 告诉我们，可以从这个仓库克隆出新的仓库，也可以把一个已有的本地仓库与之关联，然后，把本地仓库的内容推送到 GitHub 仓库。</p>\n<p>现在，我们根据 GitHub 的提示，在本地的 learngit 仓库下运行命令:</p>\n<div class=\"language-sh\" data-highlighter=\"shiki\" data-ext=\"sh\" data-title=\"sh\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">git</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> remote</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> add</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> origin</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> git@github.com:Hope-Studio/learngit.git</span></span></code></pre>\n</div><p>请千万注意，把上面的 Hope-Studio 替换成您自己的 GitHub 账户名，否则，您在本地关联的就是希望工作室的远程库，关联没有问题，但是推送是推不上去的，因为您的 SSH Key 公钥不在希望工作室的账户列表中。</p>\n<p>添加后，远程库的名字就是 <code v-pre>origin</code>，这是 Git 默认的叫法，也可以改成别的。</p>\n<p>下一步，就可以把本地库的所有内容推送到远程库上:</p>\n<div class=\"language-sh line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"sh\" data-title=\"sh\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">$</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> git</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> push</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> -u</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> origin</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> master</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">Counting</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> objects:</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 20,</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> done.</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">Delta</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> compression</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> using</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> up</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> to</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 4</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> threads.</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">Compressing</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> objects:</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 100%</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (15/15), done.</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">Writing</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> objects:</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 100%</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (20/20), 1.64 KiB | </span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">560.00</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> KiB/s,</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> done.</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">Total</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 20</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (delta </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">5</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">), reused 0 (</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">delta</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">remote:</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> Resolving</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> deltas:</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 100%</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (5/5), done.</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">To</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> github.com:Hope-Studio/learngit.git</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> *</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> [new </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">branch]</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">      master</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> -> </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">master</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">Branch</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 'master'</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> set</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> up</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> to</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> track</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> remote</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> branch</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 'master'</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> from</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 'origin'.</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>把本地库的内容推送到远程，用 <code v-pre>git push</code> 命令，实际上是把当前分支 <code v-pre>master</code> 推送到远程。</p>\n<p>由于远程库是空的，我们第一次推送 <code v-pre>master</code> 分支时，加上了 <code v-pre>-u</code> 参数，Git 不但会把本地的 <code v-pre>master</code> 分支内容推送的远程新的 <code v-pre>master</code> 分支，还会把本地的 <code v-pre>master</code> 分支和远程的 <code v-pre>master</code> 分支关联起来，在以后的推送或者拉取时就可以简化命令。</p>\n<p>推送成功后，可以立刻在 GitHub 页面中看到远程库的内容已经和本地一模一样:</p>\n<p>从现在起，只要本地作了提交，就可以通过命令:</p>\n<div class=\"language-sh\" data-highlighter=\"shiki\" data-ext=\"sh\" data-title=\"sh\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">git</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> push</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> origin</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> master</span></span></code></pre>\n</div><p>把本地 <code v-pre>master</code> 分支的最新修改推送至 GitHub，现在，您就拥有了真正的分布式版本库!</p>\n<h2 id=\"ssh-警告\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#ssh-警告\"><span>SSH 警告</span></a></h2>\n<p>当您第一次使用 Git 的 clone 或者 push 命令连接 GitHub 时，会得到一个警告:</p>\n<div class=\"language-sh\" data-highlighter=\"shiki\" data-ext=\"sh\" data-title=\"sh\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">The</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> authenticity</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> of</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> host</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 'github.com (xx.xx.xx.xx)'</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> can't be established.</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">RSA key fingerprint is xx.xx.xx.xx.xx.</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">Are you sure you want to continue connecting (yes/no)?</span></span></code></pre>\n</div><p>这是因为 Git 使用 SSH 连接，而 SSH 连接在第一次验证 GitHub 服务器的 Key 时，需要您确认 GitHub 的 Key 的指纹信息是否真的来自 GitHub 的服务器，输入 <code v-pre>yes</code> 回车即可。</p>\n<p>Git 会输出一个警告，告诉您已经把 GitHub 的 Key 添加到本机的一个信任列表里了:</p>\n<div class=\"language-md\" data-highlighter=\"shiki\" data-ext=\"md\" data-title=\"md\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">Warning: Permanently added 'github.com' (RSA) to the list of known hosts.</span></span></code></pre>\n</div><p>这个警告只会出现一次，后面的操作就不会有任何警告了。</p>\n<p>如果您实在担心有人冒充 GitHub 服务器，输入 <code v-pre>yes</code> 前可以对照 GitHub 的 RSA Key 的指纹信息是否与 SSH 连接给出的一致。</p>\n<h3 id=\"关联小结\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#关联小结\"><span>关联小结</span></a></h3>\n<p>要关联一个远程库，使用命令 <code v-pre>git remote add origin git@&lt;server-name&gt;:&lt;path&gt;/&lt;repo-name&gt;.git</code>；</p>\n<p>关联后，使用命令 <code v-pre>git push -u origin master</code> 第一次推送 master 分支的所有内容；</p>\n<p>此后，每次本地提交后，只要有必要，就可以使用命令 <code v-pre>git push origin master</code> 推送最新修改；</p>\n<p>分布式版本系统的最大好处之一是在本地工作完全不需要考虑远程库的存在，也就是有没有联网都可以正常工作，而 SVN 在没有联网的时候是拒绝干活的! 当有网络的时候，再把本地提交推送一下就完成了同步，真是太方便了!</p>\n<h2 id=\"从远程库克隆\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#从远程库克隆\"><span>从远程库克隆</span></a></h2>\n<p>上次我们讲了先有本地库，后有远程库的时候，如何关联远程库。</p>\n<p>现在，假设我们从零开发，那么最好的方式是先创建远程库，然后，从远程库克隆。</p>\n<p>首先，登陆 GitHub，创建一个新的仓库，名字叫 <code v-pre>gitskills</code>:</p>\n<p>我们勾选使用 “readme 初始化项目”，这样 GitHub 会自动为我们创建一个 README.md 文件。创建完毕后，可以看到 README.md 文件。</p>\n<p>现在，远程库已经准备好了，下一步是用命令 <code v-pre>git clone</code> 克隆一个本地库:</p>\n<div class=\"language-sh\" data-highlighter=\"shiki\" data-ext=\"sh\" data-title=\"sh\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">$</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> git</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> clone</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> git@github.com:Hope-Studio/gitskills.git</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">Cloning</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> into</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 'gitskills'...</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">remote:</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> Counting</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> objects:</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 3,</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> done.</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">remote:</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> Total</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 3</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (delta </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">), reused 0 (</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">delta</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">), pack-reused 3</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">Receiving</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> objects:</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 100%</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (3/3), done.</span></span></code></pre>\n</div><div class=\"hint-container tip\">\n<p class=\"hint-container-title\">提示</p>\n<p>如果您使用 clone 命令克隆了一个仓库，命令会自动将其添加为远程仓库并默认以 “origin” 为简写。</p>\n</div>\n<p>注意把 Git 库的地址换成您自己的，然后进入 <code v-pre>gitskills</code> 目录看看，已经有 README.md 文件了:</p>\n<div class=\"language-sh\" data-highlighter=\"shiki\" data-ext=\"sh\" data-title=\"sh\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">$</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> cd</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> gitskills</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">$</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> ls</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">README.md</span></span></code></pre>\n</div><p>如果有多个人协作开发，那么每个人各自从远程克隆一份就可以了。</p>\n<p>您也许还注意到，GitHub 给出的地址不止一个，还可以用 <a href=\"https://github.com/Hope-Studio/gitskills.git\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/Hope-Studio/gitskills.git</a> 这样的地址。实际上，Git 支持多种协议，默认的 <code v-pre>git://</code> 使用 ssh，但也可以使用 HTTPS 等其他协议。</p>\n<p>使用 HTTPS 除了速度慢以外，还有个最大的麻烦是每次推送都必须输入口令，但是在某些只开放 http 端口的公司内部就无法使用 ssh 协议而只能用 https。</p>\n<h3 id=\"克隆小结\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#克隆小结\"><span>克隆小结</span></a></h3>\n<p>要克隆一个仓库，首先必须知道仓库的地址，然后使用 <code v-pre>git clone</code> 命令克隆。</p>\n<p>Git 支持多种协议，包括 https，但通过 ssh 支持的原生 git 协议速度最快。</p>\n<h2 id=\"从远程仓库中抓取\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#从远程仓库中抓取\"><span>从远程仓库中抓取</span></a></h2>\n<p>从远程仓库中获得数据，可以执行:</p>\n<div class=\"language-sh\" data-highlighter=\"shiki\" data-ext=\"sh\" data-title=\"sh\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">git</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> fetch</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> &#x3C;</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">remot</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">e></span></span></code></pre>\n</div><p>这个命令会访问远程仓库，从中拉取所有您还没有的数据。执行完成后，您将会拥有那个远程仓库中所有分支的引用，可以随时合并或查看。</p>\n<p><code v-pre>git fetch origin</code> 会抓取克隆(或上一次抓取)后新推送的所有工作。必须注意 <code v-pre>git fetch</code> 命令只会将数据下载到您的本地仓库——它并不会自动合并或修改您当前的工作。当准备好时您必须手动将其合并入您的工作。</p>\n<h2 id=\"推送到远程仓库\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#推送到远程仓库\"><span>推送到远程仓库</span></a></h2>\n<p>当您想分享您的项目时，必须将其推送到上游。这个命令很简单: <code v-pre>git push &lt;remote&gt; &lt;branch&gt;</code>。当您\n想要将 master 分支推送到 origin 服务器时(再次说明，克隆时通常会自动帮您设置好那两个名字)， 那么\n运行这个命令就可以将您所做的备份到服务器:</p>\n<div class=\"language-sh\" data-highlighter=\"shiki\" data-ext=\"sh\" data-title=\"sh\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">git</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> push</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> origin</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> master</span></span></code></pre>\n</div><p>只有当您有所克隆服务器的写入权限，并且之前没有人推送过时，这条命令才能生效。当您和其他人在同一时间克隆，他们先推送到上游然后您再推送到上游，您的推送就会毫无疑问地被拒绝。您必须先抓取他们的工作并将其合并进您的工作后才能推送。</p>\n<h2 id=\"查看某个远程仓库\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#查看某个远程仓库\"><span>查看某个远程仓库</span></a></h2>\n<p>如果想要查看某一个远程仓库的更多信息，可以使用 <code v-pre>git remote show &lt;remote&gt;</code> 命令。如果想以一个特\n定的缩写名运行这个命令，例如 origin，会得到像下面类似的信息:</p>\n<div class=\"language-sh line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"sh\" data-title=\"sh\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">$</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> git</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> remote</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> show</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> origin</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">* remote origin</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">Fetch</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> URL:</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> https://github.com/schacon/ticgit</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">Push</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> URL:</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> https://github.com/schacon/ticgit</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">HEAD</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> branch:</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> master</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">Remote</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> branches:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">master</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> tracked</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">dev-branch</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> tracked</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">Local</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> branch</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> configured</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> for</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 'git pull':</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">master</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> merges</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> with</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> remote</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> master</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">Local</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> ref</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> configured</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> for</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 'git push':</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">master</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> pushes</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> to</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> master</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (up </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">to</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> date</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>它同样会列出远程仓库的 URL 与跟踪分支的信息。这些信息非常有用，它告诉您正处于 master 分支，并且如果运行 <code v-pre>git pull</code>，就会抓取所有的远程引用，然后将远程 master 分支合并到本地 master 分支。它也会列出拉取到的所有远程引用。</p>\n<h2 id=\"远程仓库的重命名与移除\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#远程仓库的重命名与移除\"><span>远程仓库的重命名与移除</span></a></h2>\n<p>您可以运行 <code v-pre>git remote rename</code> 来修改一个远程仓库的简写名。例如，想要将 pb 重命名为 paul，可以用 <code v-pre>git remote rename</code> 这样做:</p>\n<div class=\"language-sh\" data-highlighter=\"shiki\" data-ext=\"sh\" data-title=\"sh\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">$</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> git</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> remote</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> rename</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> pb</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> paul</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">$</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> git</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> remote</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">origin</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">paul</span></span></code></pre>\n</div><p>值得注意的是这同样也会修改您所有远程跟踪的分支名字。那些过去引用 <code v-pre>pb/master</code> 的现在会引用 <code v-pre>paul/master</code>。</p>\n<p>如果因为一些原因想要移除一个远程仓库——您已经从服务器上搬走了或不再想使用某一个特定的镜像了，又或者某一个贡献者不再贡献了——可以使用 <code v-pre>git remote remove</code> 或 <code v-pre>git remote rm</code>:</p>\n<div class=\"language-sh\" data-highlighter=\"shiki\" data-ext=\"sh\" data-title=\"sh\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">$</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> git</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> remote</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> remove</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> paul</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">$</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> git</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> remote</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">origin</span></span></code></pre>\n</div><p>一旦您使用这种方式删除了一个远程仓库，那么所有和这个远程仓库相关的远程跟踪分支以及配置信息也会一起被删除。</p>\n","tagOpen":"<template>","tagClose":"</template>"},"script":null,"scriptSetup":null,"scripts":[],"styles":[],"customBlocks":[]},"content":"\n## 什么是远程仓库\n\nGit 是分布式版本控制系统，同一个 Git 仓库，可以分布到不同的机器上。怎么分布呢? 最早，肯定只有一台机器有一个原始版本库，此后，别的机器可以“克隆”这个原始版本库，而且每台机器的版本库其实都是一样的，并没有主次之分。\n\n实际情况往往是这样，找一台电脑充当服务器的角色，每天 24 小时开机，其他每个人都从这个“服务器”仓库克隆一份到自己的电脑上，并且各自把各自的提交推送到服务器仓库里，也从服务器仓库中拉取别人的提交。\n\n完全可以自己搭建一台运行 Git 的服务器，不过现阶段，为了学 Git 先搭个服务器绝对是小题大作。好在这个世界上有个叫 GitHub 的神奇的网站，从名字就可以看出，这个网站就是提供 Git 仓库托管服务的，所以，只要注册一个 GitHub 账号，就可以免费获得 Git 远程仓库。\n\n在继续阅读后续内容前，请自行注册 GitHub 账号。由于您的本地 Git 仓库和 GitHub 仓库之间的传输是通过 SSH 加密的，所以，需要一点设置:\n\n- 第 1 步: 创建 SSH Key。在用户主目录下，看看有没有.ssh 目录，如果有，再看看这个目录下有没有 id_rsa 和 id_rsa.pub 这两个文件，如果已经有了，可直接跳到下一步。如果没有，打开 Shell (Windows 下打开 Git Bash)，创建 SSH Key:\n\n  ```sh\n  ssh-keygen -t rsa -C \"youremail@example.com\"\n  ```\n\n  您需要把邮件地址换成您自己的邮件地址，然后一路回车，使用默认值即可，由于这个 Key 也不是用于军事目的，所以也无需设置密码。\n\n  如果一切顺利的话，可以在用户主目录里找到.ssh 目录，里面有 id_rsa 和 id_rsa.pub 两个文件，这两个就是 SSH Key 的秘钥对，id_rsa 是私钥，不能泄露出去，id_rsa.pub 是公钥，可以放心地告诉任何人。\n\n- 第 2 步: 登陆 GitHub，点击右上角头像，进入设置。\n\n  进入安全设置下的 SSH 公钥界面。\n\n  在标题中填写公钥的备注名称，把 id_rsa.pub 文件的内容粘贴到底下的输入框中。\n\n为什么 GitHub 需要 SSH Key 呢? 因为 GitHub 需要识别出您推送的提交确实是您推送的，而不是别人冒充的，而 Git 支持 SSH 协议，所以，GitHub 只要知道了您的公钥，就可以确认只有您自己才能推送。\n\n当然，GitHub 允许您添加多个 Key。假定您有若干电脑，您一会儿在公司提交，一会儿在家里提交，只要把每台电脑的 Key 都添加到 GitHub，就可以在每台电脑上往 GitHub 推送了。\n\n最后友情提示，在 GitHub 上免费托管的 Git 仓库，任何人都可以看到喔(但只有您自己才能改)。所以，不要把敏感信息放进去。\n\n如果您不想让别人看到 Git 库，一是让 GitHub 把公开的仓库变成私有的，这样别人就看不见了(不可读更不可写)。另一个办法是自己动手，搭一个 Git 服务器，因为是您自己的 Git 服务器，所以别人也是看不见的。\n\n确保您拥有一个 GitHub 账号后，我们就即将开始远程仓库的学习。\n\n## 添加远程库\n\n现在的情景是，您已经在本地创建了一个 Git 仓库后，又想在 GitHub 创建一个 Git 仓库，并且让这两个仓库进行远程同步，这样，GitHub 上的仓库既可以作为备份，又可以让其他人通过该仓库来协作，真是一举多得。\n\n首先，登陆 GitHub，然后，在右上角找到 “+” 按钮，点击 \"New Repository\"。\n\n在项目填入 learngit，其他保持默认设置，点击“创建”按钮，就成功地创建了一个新的 Git 仓库:\n\n目前，在 GitHub 上的这个 learngit 仓库还是空的，GitHub 告诉我们，可以从这个仓库克隆出新的仓库，也可以把一个已有的本地仓库与之关联，然后，把本地仓库的内容推送到 GitHub 仓库。\n\n现在，我们根据 GitHub 的提示，在本地的 learngit 仓库下运行命令:\n\n```sh\ngit remote add origin git@github.com:Hope-Studio/learngit.git\n```\n\n请千万注意，把上面的 Hope-Studio 替换成您自己的 GitHub 账户名，否则，您在本地关联的就是希望工作室的远程库，关联没有问题，但是推送是推不上去的，因为您的 SSH Key 公钥不在希望工作室的账户列表中。\n\n添加后，远程库的名字就是 `origin`，这是 Git 默认的叫法，也可以改成别的。\n\n下一步，就可以把本地库的所有内容推送到远程库上:\n\n```sh\n$ git push -u origin master\nCounting objects: 20, done.\nDelta compression using up to 4 threads.\nCompressing objects: 100% (15/15), done.\nWriting objects: 100% (20/20), 1.64 KiB | 560.00 KiB/s, done.\nTotal 20 (delta 5), reused 0 (delta 0)\nremote: Resolving deltas: 100% (5/5), done.\nTo github.com:Hope-Studio/learngit.git\n * [new branch]      master -> master\nBranch 'master' set up to track remote branch 'master' from 'origin'.\n```\n\n把本地库的内容推送到远程，用 `git push` 命令，实际上是把当前分支 `master` 推送到远程。\n\n由于远程库是空的，我们第一次推送 `master` 分支时，加上了 `-u` 参数，Git 不但会把本地的 `master` 分支内容推送的远程新的 `master` 分支，还会把本地的 `master` 分支和远程的 `master` 分支关联起来，在以后的推送或者拉取时就可以简化命令。\n\n推送成功后，可以立刻在 GitHub 页面中看到远程库的内容已经和本地一模一样:\n\n从现在起，只要本地作了提交，就可以通过命令:\n\n```sh\ngit push origin master\n```\n\n把本地 `master` 分支的最新修改推送至 GitHub，现在，您就拥有了真正的分布式版本库!\n\n## SSH 警告\n\n当您第一次使用 Git 的 clone 或者 push 命令连接 GitHub 时，会得到一个警告:\n\n```sh\nThe authenticity of host 'github.com (xx.xx.xx.xx)' can't be established.\nRSA key fingerprint is xx.xx.xx.xx.xx.\nAre you sure you want to continue connecting (yes/no)?\n```\n\n这是因为 Git 使用 SSH 连接，而 SSH 连接在第一次验证 GitHub 服务器的 Key 时，需要您确认 GitHub 的 Key 的指纹信息是否真的来自 GitHub 的服务器，输入 `yes` 回车即可。\n\nGit 会输出一个警告，告诉您已经把 GitHub 的 Key 添加到本机的一个信任列表里了:\n\n```md\nWarning: Permanently added 'github.com' (RSA) to the list of known hosts.\n```\n\n这个警告只会出现一次，后面的操作就不会有任何警告了。\n\n如果您实在担心有人冒充 GitHub 服务器，输入 `yes` 前可以对照 GitHub 的 RSA Key 的指纹信息是否与 SSH 连接给出的一致。\n\n### 关联小结\n\n要关联一个远程库，使用命令 `git remote add origin git@<server-name>:<path>/<repo-name>.git`；\n\n关联后，使用命令 `git push -u origin master` 第一次推送 master 分支的所有内容；\n\n此后，每次本地提交后，只要有必要，就可以使用命令 `git push origin master` 推送最新修改；\n\n分布式版本系统的最大好处之一是在本地工作完全不需要考虑远程库的存在，也就是有没有联网都可以正常工作，而 SVN 在没有联网的时候是拒绝干活的! 当有网络的时候，再把本地提交推送一下就完成了同步，真是太方便了!\n\n## 从远程库克隆\n\n上次我们讲了先有本地库，后有远程库的时候，如何关联远程库。\n\n现在，假设我们从零开发，那么最好的方式是先创建远程库，然后，从远程库克隆。\n\n首先，登陆 GitHub，创建一个新的仓库，名字叫 `gitskills`:\n\n我们勾选使用 “readme 初始化项目”，这样 GitHub 会自动为我们创建一个 README.md 文件。创建完毕后，可以看到 README.md 文件。\n\n现在，远程库已经准备好了，下一步是用命令 `git clone` 克隆一个本地库:\n\n```sh\n$ git clone git@github.com:Hope-Studio/gitskills.git\nCloning into 'gitskills'...\nremote: Counting objects: 3, done.\nremote: Total 3 (delta 0), reused 0 (delta 0), pack-reused 3\nReceiving objects: 100% (3/3), done.\n```\n\n::: tip\n\n如果您使用 clone 命令克隆了一个仓库，命令会自动将其添加为远程仓库并默认以 “origin” 为简写。\n\n:::\n\n注意把 Git 库的地址换成您自己的，然后进入 `gitskills` 目录看看，已经有 README.md 文件了:\n\n```sh\n$ cd gitskills\n$ ls\nREADME.md\n```\n\n如果有多个人协作开发，那么每个人各自从远程克隆一份就可以了。\n\n您也许还注意到，GitHub 给出的地址不止一个，还可以用 [https://github.com/Hope-Studio/gitskills.git](https://github.com/Hope-Studio/gitskills.git) 这样的地址。实际上，Git 支持多种协议，默认的 `git://` 使用 ssh，但也可以使用 HTTPS 等其他协议。\n\n使用 HTTPS 除了速度慢以外，还有个最大的麻烦是每次推送都必须输入口令，但是在某些只开放 http 端口的公司内部就无法使用 ssh 协议而只能用 https。\n\n### 克隆小结\n\n要克隆一个仓库，首先必须知道仓库的地址，然后使用 `git clone` 命令克隆。\n\nGit 支持多种协议，包括 https，但通过 ssh 支持的原生 git 协议速度最快。\n\n## 从远程仓库中抓取\n\n从远程仓库中获得数据，可以执行:\n\n```sh\ngit fetch <remote>\n```\n\n这个命令会访问远程仓库，从中拉取所有您还没有的数据。执行完成后，您将会拥有那个远程仓库中所有分支的引用，可以随时合并或查看。\n\n`git fetch origin` 会抓取克隆(或上一次抓取)后新推送的所有工作。必须注意 `git fetch` 命令只会将数据下载到您的本地仓库——它并不会自动合并或修改您当前的工作。当准备好时您必须手动将其合并入您的工作。\n\n## 推送到远程仓库\n\n当您想分享您的项目时，必须将其推送到上游。这个命令很简单: `git push <remote> <branch>`。当您\n想要将 master 分支推送到 origin 服务器时(再次说明，克隆时通常会自动帮您设置好那两个名字)， 那么\n运行这个命令就可以将您所做的备份到服务器:\n\n```sh\ngit push origin master\n```\n\n只有当您有所克隆服务器的写入权限，并且之前没有人推送过时，这条命令才能生效。当您和其他人在同一时间克隆，他们先推送到上游然后您再推送到上游，您的推送就会毫无疑问地被拒绝。您必须先抓取他们的工作并将其合并进您的工作后才能推送。\n\n## 查看某个远程仓库\n\n如果想要查看某一个远程仓库的更多信息，可以使用 `git remote show <remote>` 命令。如果想以一个特\n定的缩写名运行这个命令，例如 origin，会得到像下面类似的信息:\n\n```sh\n$ git remote show origin\n* remote origin\nFetch URL: https://github.com/schacon/ticgit\nPush URL: https://github.com/schacon/ticgit\nHEAD branch: master\nRemote branches:\nmaster tracked\ndev-branch tracked\nLocal branch configured for 'git pull':\nmaster merges with remote master\nLocal ref configured for 'git push':\nmaster pushes to master (up to date)\n```\n\n它同样会列出远程仓库的 URL 与跟踪分支的信息。这些信息非常有用，它告诉您正处于 master 分支，并且如果运行 `git pull`，就会抓取所有的远程引用，然后将远程 master 分支合并到本地 master 分支。它也会列出拉取到的所有远程引用。\n\n## 远程仓库的重命名与移除\n\n您可以运行 `git remote rename` 来修改一个远程仓库的简写名。例如，想要将 pb 重命名为 paul，可以用 `git remote rename` 这样做:\n\n```sh\n$ git remote rename pb paul\n$ git remote\norigin\npaul\n```\n\n值得注意的是这同样也会修改您所有远程跟踪的分支名字。那些过去引用 `pb/master` 的现在会引用 `paul/master`。\n\n如果因为一些原因想要移除一个远程仓库——您已经从服务器上搬走了或不再想使用某一个特定的镜像了，又或者某一个贡献者不再贡献了——可以使用 `git remote remove` 或 `git remote rm`:\n\n```sh\n$ git remote remove paul\n$ git remote\norigin\n```\n\n一旦您使用这种方式删除了一个远程仓库，那么所有和这个远程仓库相关的远程跟踪分支以及配置信息也会一起被删除。\n","excerpt":"","title":"","headers":[{"level":2,"title":"什么是远程仓库","slug":"什么是远程仓库","link":"#什么是远程仓库","children":[]},{"level":2,"title":"添加远程库","slug":"添加远程库","link":"#添加远程库","children":[]},{"level":2,"title":"SSH 警告","slug":"ssh-警告","link":"#ssh-警告","children":[{"level":3,"title":"关联小结","slug":"关联小结","link":"#关联小结","children":[]}]},{"level":2,"title":"从远程库克隆","slug":"从远程库克隆","link":"#从远程库克隆","children":[{"level":3,"title":"克隆小结","slug":"克隆小结","link":"#克隆小结","children":[]}]},{"level":2,"title":"从远程仓库中抓取","slug":"从远程仓库中抓取","link":"#从远程仓库中抓取","children":[]},{"level":2,"title":"推送到远程仓库","slug":"推送到远程仓库","link":"#推送到远程仓库","children":[]},{"level":2,"title":"查看某个远程仓库","slug":"查看某个远程仓库","link":"#查看某个远程仓库","children":[]},{"level":2,"title":"远程仓库的重命名与移除","slug":"远程仓库的重命名与移除","link":"#远程仓库的重命名与移除","children":[]}]}}
