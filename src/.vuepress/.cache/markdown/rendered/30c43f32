{"content":"<p>字符串是编程时涉及到的最多的一种数据结构，对字符串进行操作的需求几乎无处不在。比如判断一个字符串是否是合法的 Email 地址，虽然可以编程提取 <code v-pre>@</code> 前后的子串，再分别判断是否是单词和域名，但这样做不但麻烦，而且代码难以复用。</p>\n<!-- more -->\n<h2 id=\"正则表达式介绍\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#正则表达式介绍\"><span>正则表达式介绍</span></a></h2>\n<p>正则表达式是一种用来匹配字符串的强有力的武器。它的设计思想是用一种描述性的语言来给字符串定义一个规则，凡是符合规则的字符串，我们就认为它“匹配”了，否则，该字符串就是不合法的。</p>\n<p>所以我们判断一个字符串是否是合法的 Email 的方法是:</p>\n<ol>\n<li>\n<p>创建一个匹配 Email 的正则表达式；</p>\n</li>\n<li>\n<p>用该正则表达式去匹配用户的输入来判断是否合法。</p>\n</li>\n</ol>\n<p>因为正则表达式也是用字符串表示的，所以，我们要首先了解如何用字符来描述字符。</p>\n<h3 id=\"数字与字母\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#数字与字母\"><span>数字与字母</span></a></h3>\n<p>在正则表达式中，如果直接给出字符，就是精确匹配。用 <code v-pre>\\d</code> 可以匹配一个数字，<code v-pre>\\w</code> 可以匹配一个字母或数字，所以:</p>\n<ul>\n<li>\n<p><code v-pre>'00\\d'</code> 可以匹配 <code v-pre>'007'</code>，但无法匹配 <code v-pre>'00A'</code>；</p>\n</li>\n<li>\n<p><code v-pre>'\\d\\d\\d'</code> 可以匹配 <code v-pre>'010'</code>；</p>\n</li>\n<li>\n<p><code v-pre>'\\w\\w'</code> 可以匹配 <code v-pre>'js'</code>；</p>\n</li>\n</ul>\n<h3 id=\"任意字符\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#任意字符\"><span>任意字符</span></a></h3>\n<p><code v-pre>.</code> 可以匹配任意字符，所以:</p>\n<ul>\n<li><code v-pre>'js.'</code> 可以匹配 <code v-pre>'jsp'</code>、<code v-pre>'jss'</code>、<code v-pre>'js!'</code> 等等。</li>\n</ul>\n<h3 id=\"多个字符匹配\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#多个字符匹配\"><span>多个字符匹配</span></a></h3>\n<p>要匹配变长的字符，在正则表达式中，用 <code v-pre>*</code> 表示任意个字符(包括 0 个)，用 <code v-pre>+</code> 表示至少一个字符，用 <code v-pre>?</code> 表示 0 个或 1 个字符，用 <code v-pre>{n}</code> 表示 n 个字符，用 <code v-pre>{n,m}</code> 表示 <code v-pre>n-m</code> 个字符:</p>\n<p>来看一个复杂的例子: <code v-pre>\\d{3}\\s+\\d{3,8}</code>。</p>\n<p>我们来从左到右解读一下:</p>\n<ol>\n<li>\n<p><code v-pre>\\d{3}</code> 表示匹配 3 个数字，例如 <code v-pre>'010'</code>；</p>\n</li>\n<li>\n<p><code v-pre>\\s</code> 可以匹配一个空格(也包括 Tab 等空白符)，所以 <code v-pre>\\s+</code> 表示至少有一个空格，例如匹配 <code v-pre>' '</code>，<code v-pre>'\\t\\t'</code> 等；</p>\n</li>\n<li>\n<p><code v-pre>\\d{3,8}</code> 表示 3-8 个数字，例如 <code v-pre>'1234567'</code>。</p>\n</li>\n</ol>\n<p>综合起来，上面的正则表达式可以匹配以任意个空格隔开的带区号的电话号码。</p>\n<p>如果要匹配 <code v-pre>'010-12345'</code> 这样的号码呢? 由于 <code v-pre>'-'</code> 是特殊字符，在正则表达式中，要用 <code v-pre>'\\'</code> 转义，所以，上面的正则是 <code v-pre>\\d{3}\\-\\d{3,8}</code>。</p>\n<p>但是，仍然无法匹配 <code v-pre>'010 - 12345'</code>，因为带有空格。所以我们需要更复杂的匹配方式。</p>\n<h2 id=\"进阶\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#进阶\"><span>进阶</span></a></h2>\n<h3 id=\"指定匹配范围\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#指定匹配范围\"><span>指定匹配范围</span></a></h3>\n<p>要做更精确地匹配，可以用 <code v-pre>[]</code> 表示范围，比如:</p>\n<ul>\n<li>\n<p><code v-pre>[0-9a-zA-Z\\_]</code> 可以匹配一个数字、字母或者下划线；</p>\n</li>\n<li>\n<p><code v-pre>[0-9a-zA-Z\\_]+</code> 可以匹配至少由一个数字、字母或者下划线组成的字符串，比如 <code v-pre>'a100'</code>，<code v-pre>'0_Z'</code>，<code v-pre>'js2015'</code> 等等；</p>\n</li>\n<li>\n<p><code v-pre>[a-zA-Z\\_\\$][0-9a-zA-Z\\_\\$]*</code> 可以匹配由字母或下划线、<code v-pre>$</code> 开头，后接任意个由一个数字、字母或者下划线、<code v-pre>$</code> 组成的字符串，也就是 JavaScript 允许的变量名；</p>\n</li>\n<li>\n<p><code v-pre>[a-zA-Z\\_\\$][0-9a-zA-Z\\_\\$]{0, 19}</code> 更精确地限制了变量的长度是 1-20 个字符(前面 1 个字符+后面最多 19 个字符)。</p>\n</li>\n</ul>\n<hr>\n<p><code v-pre>A|B</code> 可以匹配 <code v-pre>A</code> 或 <code v-pre>B</code>，所以 <code v-pre>(J|j)ava(S|s)cript</code> 可以匹配 <code v-pre>'JavaScript'</code>、<code v-pre>'Javascript'</code>、<code v-pre>'javaScript'</code> 或者 <code v-pre>'javascript'</code>。</p>\n<h3 id=\"头尾匹配\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#头尾匹配\"><span>头尾匹配</span></a></h3>\n<p><code v-pre>^</code> 表示行的开头，<code v-pre>^\\d</code> 表示必须以数字开头。</p>\n<p><code v-pre>$</code> 表示行的结束，<code v-pre>\\d$</code> 表示必须以数字结束。</p>\n<p>您可能注意到了，<code v-pre>js</code> 也可以匹配 <code v-pre>'jsp'</code>，但是加上 <code v-pre>^js$</code> 就变成了整行匹配，就只能匹配 <code v-pre>'js'</code> 了。</p>\n<h2 id=\"正则的使用\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#正则的使用\"><span>正则的使用</span></a></h2>\n<p>有了准备知识，我们就可以在 JavaScript 中使用正则表达式了。</p>\n<p>JavaScript 有两种方式创建一个正则表达式:</p>\n<ul>\n<li>第一种方式是直接通过/正则表达式/写出来</li>\n<li>第二种方式是通过 <code v-pre>new RegExp('正则表达式')</code> 创建一个 regular expression 对象。</li>\n</ul>\n<p>两种写法是一样的:</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> re1</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\"> /ABC</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">\\-</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">001/</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> re2</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> new</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> RegExp</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"ABC</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">\\\\</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">-001\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">re1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// /ABC\\-001/</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">re2</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// /ABC\\-001/</span></span></code></pre>\n</div><div class=\"hint-container warning\">\n<p class=\"hint-container-title\">注意</p>\n<p>如果使用第二种写法，因为字符串的转义问题，字符串的两个 <code v-pre>\\\\</code> 实际上是一个 <code v-pre>\\</code>。</p>\n</div>\n<p>先看看如何判断正则表达式是否匹配:</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> re</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\"> /</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">^</span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">\\d</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">{3}</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">\\-</span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">\\d</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">{3,8}</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">$</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">re</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">test</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"010-12345\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">); </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// true</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">re</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">test</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"010-1234x\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">); </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// false</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">re</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">test</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"010 12345\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">); </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// false</span></span></code></pre>\n</div><p>Regular expression 对象的 <code v-pre>test()</code> 方法用于测试给定的字符串是否符合条件。</p>\n<h3 id=\"切分字符串\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#切分字符串\"><span>切分字符串</span></a></h3>\n<p>用正则表达式切分字符串比用固定的字符更灵活，请看正常的切分代码:</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"a b   c\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">split</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\" \"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">); </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// ['a', 'b', '', '', 'c']</span></span></code></pre>\n</div><p>嗯，无法识别连续的空格，用正则表达式试试:</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"a b   c\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">split</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">\\s</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">+</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">); </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// ['a', 'b', 'c']</span></span></code></pre>\n</div><p>无论多少个空格都可以正常分割。加入<code v-pre>,</code>试试:</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"a,b, c  d\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">split</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">[</span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">\\s</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">\\,</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">]</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">+</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">); </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// ['a', 'b', 'c', 'd']</span></span></code></pre>\n</div><p>再加入 <code v-pre>;</code> 试试:</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"a,b;; c  d\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">split</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">[</span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">\\s</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">\\,\\;</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">]</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">+</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">); </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// ['a', 'b', 'c', 'd']</span></span></code></pre>\n</div><p>如果用户输入了一组标签，下次记得用正则表达式来把不规范的输入转化成正确的数组。</p>\n<h3 id=\"分组\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#分组\"><span>分组</span></a></h3>\n<p>除了简单地判断是否匹配之外，正则表达式还有提取子串的强大功能。用 <code v-pre>()</code> 表示的就是要提取的分组 (Group)。比如:</p>\n<p><code v-pre>^(\\d{3})-(\\d{3,8})$</code> 分别定义了两个组，可以直接从匹配的字符串中提取出区号和本地号码:</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> re</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\"> /</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">^</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">(</span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">\\d</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">{3}</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">)-(</span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">\\d</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">{3,8}</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">)</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">$</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">re</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">exec</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"010-12345\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">); </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// ['010-12345', '010', '12345']</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">re</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">exec</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"010 12345\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">); </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// null</span></span></code></pre>\n</div><p>如果正则表达式中定义了组，就可以在 regular expression 对象上用 <code v-pre>exec()</code> 方法提取出子串来。</p>\n<p><code v-pre>exec()</code> 方法在匹配成功后，会返回一个 <code v-pre>Array</code>，第一个元素是正则表达式匹配到的整个字符串，后面的字符串表示匹配成功的子串。</p>\n<p><code v-pre>exec()</code> 方法在匹配失败时返回 <code v-pre>null</code>。</p>\n<p>提取子串非常有用。来看一个更凶残的例子:</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> re</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">  /</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">^</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">(0</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">[0-9]</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">|</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">1</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">[0-9]</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">|</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">2</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">[0-3]</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">|</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">[0-9]</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">)</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">\\:</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">(0</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">[0-9]</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">|</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">1</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">[0-9]</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">|</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">2</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">[0-9]</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">|</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">3</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">[0-9]</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">|</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">4</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">[0-9]</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">|</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">5</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">[0-9]</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">|</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">[0-9]</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">)</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">\\:</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">(0</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">[0-9]</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">|</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">1</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">[0-9]</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">|</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">2</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">[0-9]</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">|</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">3</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">[0-9]</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">|</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">4</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">[0-9]</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">|</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">5</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">[0-9]</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">|</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">[0-9]</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">)</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">$</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">re</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">exec</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"19:05:30\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">); </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// ['19:05:30', '19', '05', '30']</span></span></code></pre>\n</div><p>这个正则表达式可以直接识别合法的时间。但是有些时候，用正则表达式也无法做到完全验证，比如识别日期:</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> re</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\"> /</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">^</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">(0</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">[1-9]</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">|</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">1</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">[0-2]</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">|</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">[0-9]</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">)-(0</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">[1-9]</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">|</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">1</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">[0-9]</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">|</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">2</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">[0-9]</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">|</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">3</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">[0-1]</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">|</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">[0-9]</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">)</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">$</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span></code></pre>\n</div><p>对于 <code v-pre>'2-30'</code>，<code v-pre>'4-31'</code> 这样的非法日期，用正则还是识别不了，或者说写出来非常困难，这时就需要程序配合识别了。</p>\n<h2 id=\"贪婪匹配\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#贪婪匹配\"><span>贪婪匹配</span></a></h2>\n<p>需要特别指出的是，正则匹配默认是贪婪匹配，也就是匹配尽可能多的字符。举例如下，匹配出数字后面的 0:</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> re</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\"> /</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">^</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">(</span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">\\d</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">+</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">)(0</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">*</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">)</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">$</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">re</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">exec</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"102300\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">); </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// ['102300', '102300', '']</span></span></code></pre>\n</div><p>由于 <code v-pre>\\d+</code> 采用贪婪匹配，直接把后面的 <code v-pre>0</code> 全部匹配了，结果 <code v-pre>0*</code> 只能匹配空字符串了。</p>\n<p>必须让 <code v-pre>\\d+</code> 采用非贪婪匹配(也就是尽可能少匹配)，才能把后面的 <code v-pre>0</code> 匹配出来，加个 <code v-pre>?</code> 就可以让 <code v-pre>\\d+</code> 采用非贪婪匹配:</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> re</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\"> /</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">^</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">(</span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">\\d</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">+?</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">)(0</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">*</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">)</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">$</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">re</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">exec</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"102300\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">); </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// ['102300', '1023', '00']</span></span></code></pre>\n</div><h2 id=\"全局搜索\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#全局搜索\"><span>全局搜索</span></a></h2>\n<p>JavaScript 的正则表达式还有几个特殊的标志，最常用的是 <code v-pre>g</code>，表示全局匹配:</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> r1</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\"> /test/</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">g</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 等价于:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> r2</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> new</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> RegExp</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"test\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"g\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span></code></pre>\n</div><p>全局匹配可以多次执行 <code v-pre>exec()</code> 方法来搜索一个匹配的字符串。当我们指定 <code v-pre>g</code> 标志后，每次运行 <code v-pre>exec()</code>，正则表达式本身会更新 <code v-pre>lastIndex</code> 属性，表示上次匹配到的最后索引:</p>\n<div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> s</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"JavaScript, VBScript, JScript and ECMAScript\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> re</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\"> /</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">[a-zA-Z]</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">+</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">Script/</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">g</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 使用全局匹配:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">re</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">exec</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">s</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">); </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// ['JavaScript']</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">re</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">lastIndex</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 10</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">re</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">exec</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">s</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">); </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// ['VBScript']</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">re</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">lastIndex</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 20</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">re</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">exec</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">s</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">); </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// ['JScript']</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">re</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">lastIndex</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 29</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">re</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">exec</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">s</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">); </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// ['ECMAScript']</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">re</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">lastIndex</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 44</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">re</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">exec</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">s</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">); </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// null，直到结束仍没有匹配到</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>全局匹配类似搜索，因此不能使用 <code v-pre>/^...$/</code>，那样只会最多匹配一次。</p>\n<p>正则表达式还可以指定 <code v-pre>i</code> 标志，表示忽略大小写，<code v-pre>m</code> 标志，表示执行多行匹配。</p>\n<h2 id=\"正则小结\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#正则小结\"><span>正则小结</span></a></h2>\n<p>正则表达式非常强大，要在短短的一节里讲完是不可能的。要讲清楚正则的所有内容，可以写一本厚厚的书了。如果您经常遇到正则表达式的问题，您可能需要一本正则表达式的参考书。</p>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">提示</p>\n<p>有兴趣的同学可以查看<a href=\"https://www.runoob.com/regexp/regexp-tutorial.html\" target=\"_blank\" rel=\"noopener noreferrer\">菜鸟教程上关于正则表达式的介绍</a>。</p>\n</div>\n","env":{"base":"/","filePath":"/Users/carson/Desktop/Mister-Hope.github.io-main/src/code/language/js/object/regExp.md","filePathRelative":"code/language/js/object/regExp.md","frontmatter":{"title":"RegExp","icon":"regexp","date":"2019-10-13T00:00:00.000Z","category":"JavaScript"},"sfcBlocks":{"template":{"type":"template","content":"<template><p>字符串是编程时涉及到的最多的一种数据结构，对字符串进行操作的需求几乎无处不在。比如判断一个字符串是否是合法的 Email 地址，虽然可以编程提取 <code v-pre>@</code> 前后的子串，再分别判断是否是单词和域名，但这样做不但麻烦，而且代码难以复用。</p>\n<!-- more -->\n<h2 id=\"正则表达式介绍\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#正则表达式介绍\"><span>正则表达式介绍</span></a></h2>\n<p>正则表达式是一种用来匹配字符串的强有力的武器。它的设计思想是用一种描述性的语言来给字符串定义一个规则，凡是符合规则的字符串，我们就认为它“匹配”了，否则，该字符串就是不合法的。</p>\n<p>所以我们判断一个字符串是否是合法的 Email 的方法是:</p>\n<ol>\n<li>\n<p>创建一个匹配 Email 的正则表达式；</p>\n</li>\n<li>\n<p>用该正则表达式去匹配用户的输入来判断是否合法。</p>\n</li>\n</ol>\n<p>因为正则表达式也是用字符串表示的，所以，我们要首先了解如何用字符来描述字符。</p>\n<h3 id=\"数字与字母\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#数字与字母\"><span>数字与字母</span></a></h3>\n<p>在正则表达式中，如果直接给出字符，就是精确匹配。用 <code v-pre>\\d</code> 可以匹配一个数字，<code v-pre>\\w</code> 可以匹配一个字母或数字，所以:</p>\n<ul>\n<li>\n<p><code v-pre>'00\\d'</code> 可以匹配 <code v-pre>'007'</code>，但无法匹配 <code v-pre>'00A'</code>；</p>\n</li>\n<li>\n<p><code v-pre>'\\d\\d\\d'</code> 可以匹配 <code v-pre>'010'</code>；</p>\n</li>\n<li>\n<p><code v-pre>'\\w\\w'</code> 可以匹配 <code v-pre>'js'</code>；</p>\n</li>\n</ul>\n<h3 id=\"任意字符\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#任意字符\"><span>任意字符</span></a></h3>\n<p><code v-pre>.</code> 可以匹配任意字符，所以:</p>\n<ul>\n<li><code v-pre>'js.'</code> 可以匹配 <code v-pre>'jsp'</code>、<code v-pre>'jss'</code>、<code v-pre>'js!'</code> 等等。</li>\n</ul>\n<h3 id=\"多个字符匹配\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#多个字符匹配\"><span>多个字符匹配</span></a></h3>\n<p>要匹配变长的字符，在正则表达式中，用 <code v-pre>*</code> 表示任意个字符(包括 0 个)，用 <code v-pre>+</code> 表示至少一个字符，用 <code v-pre>?</code> 表示 0 个或 1 个字符，用 <code v-pre>{n}</code> 表示 n 个字符，用 <code v-pre>{n,m}</code> 表示 <code v-pre>n-m</code> 个字符:</p>\n<p>来看一个复杂的例子: <code v-pre>\\d{3}\\s+\\d{3,8}</code>。</p>\n<p>我们来从左到右解读一下:</p>\n<ol>\n<li>\n<p><code v-pre>\\d{3}</code> 表示匹配 3 个数字，例如 <code v-pre>'010'</code>；</p>\n</li>\n<li>\n<p><code v-pre>\\s</code> 可以匹配一个空格(也包括 Tab 等空白符)，所以 <code v-pre>\\s+</code> 表示至少有一个空格，例如匹配 <code v-pre>' '</code>，<code v-pre>'\\t\\t'</code> 等；</p>\n</li>\n<li>\n<p><code v-pre>\\d{3,8}</code> 表示 3-8 个数字，例如 <code v-pre>'1234567'</code>。</p>\n</li>\n</ol>\n<p>综合起来，上面的正则表达式可以匹配以任意个空格隔开的带区号的电话号码。</p>\n<p>如果要匹配 <code v-pre>'010-12345'</code> 这样的号码呢? 由于 <code v-pre>'-'</code> 是特殊字符，在正则表达式中，要用 <code v-pre>'\\'</code> 转义，所以，上面的正则是 <code v-pre>\\d{3}\\-\\d{3,8}</code>。</p>\n<p>但是，仍然无法匹配 <code v-pre>'010 - 12345'</code>，因为带有空格。所以我们需要更复杂的匹配方式。</p>\n<h2 id=\"进阶\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#进阶\"><span>进阶</span></a></h2>\n<h3 id=\"指定匹配范围\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#指定匹配范围\"><span>指定匹配范围</span></a></h3>\n<p>要做更精确地匹配，可以用 <code v-pre>[]</code> 表示范围，比如:</p>\n<ul>\n<li>\n<p><code v-pre>[0-9a-zA-Z\\_]</code> 可以匹配一个数字、字母或者下划线；</p>\n</li>\n<li>\n<p><code v-pre>[0-9a-zA-Z\\_]+</code> 可以匹配至少由一个数字、字母或者下划线组成的字符串，比如 <code v-pre>'a100'</code>，<code v-pre>'0_Z'</code>，<code v-pre>'js2015'</code> 等等；</p>\n</li>\n<li>\n<p><code v-pre>[a-zA-Z\\_\\$][0-9a-zA-Z\\_\\$]*</code> 可以匹配由字母或下划线、<code v-pre>$</code> 开头，后接任意个由一个数字、字母或者下划线、<code v-pre>$</code> 组成的字符串，也就是 JavaScript 允许的变量名；</p>\n</li>\n<li>\n<p><code v-pre>[a-zA-Z\\_\\$][0-9a-zA-Z\\_\\$]{0, 19}</code> 更精确地限制了变量的长度是 1-20 个字符(前面 1 个字符+后面最多 19 个字符)。</p>\n</li>\n</ul>\n<hr>\n<p><code v-pre>A|B</code> 可以匹配 <code v-pre>A</code> 或 <code v-pre>B</code>，所以 <code v-pre>(J|j)ava(S|s)cript</code> 可以匹配 <code v-pre>'JavaScript'</code>、<code v-pre>'Javascript'</code>、<code v-pre>'javaScript'</code> 或者 <code v-pre>'javascript'</code>。</p>\n<h3 id=\"头尾匹配\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#头尾匹配\"><span>头尾匹配</span></a></h3>\n<p><code v-pre>^</code> 表示行的开头，<code v-pre>^\\d</code> 表示必须以数字开头。</p>\n<p><code v-pre>$</code> 表示行的结束，<code v-pre>\\d$</code> 表示必须以数字结束。</p>\n<p>您可能注意到了，<code v-pre>js</code> 也可以匹配 <code v-pre>'jsp'</code>，但是加上 <code v-pre>^js$</code> 就变成了整行匹配，就只能匹配 <code v-pre>'js'</code> 了。</p>\n<h2 id=\"正则的使用\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#正则的使用\"><span>正则的使用</span></a></h2>\n<p>有了准备知识，我们就可以在 JavaScript 中使用正则表达式了。</p>\n<p>JavaScript 有两种方式创建一个正则表达式:</p>\n<ul>\n<li>第一种方式是直接通过/正则表达式/写出来</li>\n<li>第二种方式是通过 <code v-pre>new RegExp('正则表达式')</code> 创建一个 regular expression 对象。</li>\n</ul>\n<p>两种写法是一样的:</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> re1</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\"> /ABC</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">\\-</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">001/</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> re2</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> new</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> RegExp</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"ABC</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">\\\\</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">-001\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">re1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// /ABC\\-001/</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">re2</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// /ABC\\-001/</span></span></code></pre>\n</div><div class=\"hint-container warning\">\n<p class=\"hint-container-title\">注意</p>\n<p>如果使用第二种写法，因为字符串的转义问题，字符串的两个 <code v-pre>\\\\</code> 实际上是一个 <code v-pre>\\</code>。</p>\n</div>\n<p>先看看如何判断正则表达式是否匹配:</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> re</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\"> /</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">^</span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">\\d</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">{3}</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">\\-</span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">\\d</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">{3,8}</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">$</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">re</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">test</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"010-12345\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">); </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// true</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">re</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">test</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"010-1234x\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">); </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// false</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">re</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">test</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"010 12345\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">); </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// false</span></span></code></pre>\n</div><p>Regular expression 对象的 <code v-pre>test()</code> 方法用于测试给定的字符串是否符合条件。</p>\n<h3 id=\"切分字符串\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#切分字符串\"><span>切分字符串</span></a></h3>\n<p>用正则表达式切分字符串比用固定的字符更灵活，请看正常的切分代码:</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"a b   c\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">split</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\" \"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">); </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// ['a', 'b', '', '', 'c']</span></span></code></pre>\n</div><p>嗯，无法识别连续的空格，用正则表达式试试:</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"a b   c\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">split</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">\\s</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">+</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">); </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// ['a', 'b', 'c']</span></span></code></pre>\n</div><p>无论多少个空格都可以正常分割。加入<code v-pre>,</code>试试:</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"a,b, c  d\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">split</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">[</span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">\\s</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">\\,</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">]</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">+</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">); </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// ['a', 'b', 'c', 'd']</span></span></code></pre>\n</div><p>再加入 <code v-pre>;</code> 试试:</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"a,b;; c  d\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">split</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">[</span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">\\s</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">\\,\\;</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">]</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">+</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">); </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// ['a', 'b', 'c', 'd']</span></span></code></pre>\n</div><p>如果用户输入了一组标签，下次记得用正则表达式来把不规范的输入转化成正确的数组。</p>\n<h3 id=\"分组\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#分组\"><span>分组</span></a></h3>\n<p>除了简单地判断是否匹配之外，正则表达式还有提取子串的强大功能。用 <code v-pre>()</code> 表示的就是要提取的分组 (Group)。比如:</p>\n<p><code v-pre>^(\\d{3})-(\\d{3,8})$</code> 分别定义了两个组，可以直接从匹配的字符串中提取出区号和本地号码:</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> re</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\"> /</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">^</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">(</span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">\\d</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">{3}</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">)-(</span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">\\d</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">{3,8}</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">)</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">$</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">re</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">exec</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"010-12345\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">); </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// ['010-12345', '010', '12345']</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">re</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">exec</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"010 12345\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">); </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// null</span></span></code></pre>\n</div><p>如果正则表达式中定义了组，就可以在 regular expression 对象上用 <code v-pre>exec()</code> 方法提取出子串来。</p>\n<p><code v-pre>exec()</code> 方法在匹配成功后，会返回一个 <code v-pre>Array</code>，第一个元素是正则表达式匹配到的整个字符串，后面的字符串表示匹配成功的子串。</p>\n<p><code v-pre>exec()</code> 方法在匹配失败时返回 <code v-pre>null</code>。</p>\n<p>提取子串非常有用。来看一个更凶残的例子:</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> re</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">  /</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">^</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">(0</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">[0-9]</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">|</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">1</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">[0-9]</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">|</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">2</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">[0-3]</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">|</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">[0-9]</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">)</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">\\:</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">(0</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">[0-9]</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">|</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">1</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">[0-9]</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">|</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">2</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">[0-9]</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">|</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">3</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">[0-9]</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">|</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">4</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">[0-9]</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">|</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">5</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">[0-9]</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">|</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">[0-9]</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">)</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">\\:</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">(0</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">[0-9]</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">|</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">1</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">[0-9]</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">|</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">2</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">[0-9]</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">|</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">3</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">[0-9]</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">|</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">4</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">[0-9]</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">|</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">5</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">[0-9]</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">|</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">[0-9]</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">)</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">$</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">re</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">exec</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"19:05:30\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">); </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// ['19:05:30', '19', '05', '30']</span></span></code></pre>\n</div><p>这个正则表达式可以直接识别合法的时间。但是有些时候，用正则表达式也无法做到完全验证，比如识别日期:</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> re</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\"> /</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">^</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">(0</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">[1-9]</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">|</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">1</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">[0-2]</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">|</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">[0-9]</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">)-(0</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">[1-9]</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">|</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">1</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">[0-9]</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">|</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">2</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">[0-9]</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">|</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">3</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">[0-1]</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">|</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">[0-9]</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">)</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">$</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span></code></pre>\n</div><p>对于 <code v-pre>'2-30'</code>，<code v-pre>'4-31'</code> 这样的非法日期，用正则还是识别不了，或者说写出来非常困难，这时就需要程序配合识别了。</p>\n<h2 id=\"贪婪匹配\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#贪婪匹配\"><span>贪婪匹配</span></a></h2>\n<p>需要特别指出的是，正则匹配默认是贪婪匹配，也就是匹配尽可能多的字符。举例如下，匹配出数字后面的 0:</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> re</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\"> /</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">^</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">(</span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">\\d</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">+</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">)(0</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">*</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">)</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">$</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">re</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">exec</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"102300\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">); </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// ['102300', '102300', '']</span></span></code></pre>\n</div><p>由于 <code v-pre>\\d+</code> 采用贪婪匹配，直接把后面的 <code v-pre>0</code> 全部匹配了，结果 <code v-pre>0*</code> 只能匹配空字符串了。</p>\n<p>必须让 <code v-pre>\\d+</code> 采用非贪婪匹配(也就是尽可能少匹配)，才能把后面的 <code v-pre>0</code> 匹配出来，加个 <code v-pre>?</code> 就可以让 <code v-pre>\\d+</code> 采用非贪婪匹配:</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> re</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\"> /</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">^</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">(</span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">\\d</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">+?</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">)(0</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">*</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">)</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">$</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">re</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">exec</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"102300\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">); </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// ['102300', '1023', '00']</span></span></code></pre>\n</div><h2 id=\"全局搜索\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#全局搜索\"><span>全局搜索</span></a></h2>\n<p>JavaScript 的正则表达式还有几个特殊的标志，最常用的是 <code v-pre>g</code>，表示全局匹配:</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> r1</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\"> /test/</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">g</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 等价于:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> r2</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> new</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> RegExp</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"test\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"g\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span></code></pre>\n</div><p>全局匹配可以多次执行 <code v-pre>exec()</code> 方法来搜索一个匹配的字符串。当我们指定 <code v-pre>g</code> 标志后，每次运行 <code v-pre>exec()</code>，正则表达式本身会更新 <code v-pre>lastIndex</code> 属性，表示上次匹配到的最后索引:</p>\n<div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> s</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"JavaScript, VBScript, JScript and ECMAScript\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> re</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\"> /</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">[a-zA-Z]</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">+</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">Script/</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">g</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 使用全局匹配:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">re</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">exec</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">s</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">); </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// ['JavaScript']</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">re</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">lastIndex</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 10</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">re</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">exec</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">s</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">); </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// ['VBScript']</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">re</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">lastIndex</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 20</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">re</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">exec</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">s</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">); </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// ['JScript']</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">re</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">lastIndex</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 29</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">re</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">exec</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">s</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">); </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// ['ECMAScript']</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">re</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">lastIndex</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 44</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">re</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">exec</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">s</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">); </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// null，直到结束仍没有匹配到</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>全局匹配类似搜索，因此不能使用 <code v-pre>/^...$/</code>，那样只会最多匹配一次。</p>\n<p>正则表达式还可以指定 <code v-pre>i</code> 标志，表示忽略大小写，<code v-pre>m</code> 标志，表示执行多行匹配。</p>\n<h2 id=\"正则小结\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#正则小结\"><span>正则小结</span></a></h2>\n<p>正则表达式非常强大，要在短短的一节里讲完是不可能的。要讲清楚正则的所有内容，可以写一本厚厚的书了。如果您经常遇到正则表达式的问题，您可能需要一本正则表达式的参考书。</p>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">提示</p>\n<p>有兴趣的同学可以查看<a href=\"https://www.runoob.com/regexp/regexp-tutorial.html\" target=\"_blank\" rel=\"noopener noreferrer\">菜鸟教程上关于正则表达式的介绍</a>。</p>\n</div>\n</template>","contentStripped":"<p>字符串是编程时涉及到的最多的一种数据结构，对字符串进行操作的需求几乎无处不在。比如判断一个字符串是否是合法的 Email 地址，虽然可以编程提取 <code v-pre>@</code> 前后的子串，再分别判断是否是单词和域名，但这样做不但麻烦，而且代码难以复用。</p>\n<!-- more -->\n<h2 id=\"正则表达式介绍\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#正则表达式介绍\"><span>正则表达式介绍</span></a></h2>\n<p>正则表达式是一种用来匹配字符串的强有力的武器。它的设计思想是用一种描述性的语言来给字符串定义一个规则，凡是符合规则的字符串，我们就认为它“匹配”了，否则，该字符串就是不合法的。</p>\n<p>所以我们判断一个字符串是否是合法的 Email 的方法是:</p>\n<ol>\n<li>\n<p>创建一个匹配 Email 的正则表达式；</p>\n</li>\n<li>\n<p>用该正则表达式去匹配用户的输入来判断是否合法。</p>\n</li>\n</ol>\n<p>因为正则表达式也是用字符串表示的，所以，我们要首先了解如何用字符来描述字符。</p>\n<h3 id=\"数字与字母\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#数字与字母\"><span>数字与字母</span></a></h3>\n<p>在正则表达式中，如果直接给出字符，就是精确匹配。用 <code v-pre>\\d</code> 可以匹配一个数字，<code v-pre>\\w</code> 可以匹配一个字母或数字，所以:</p>\n<ul>\n<li>\n<p><code v-pre>'00\\d'</code> 可以匹配 <code v-pre>'007'</code>，但无法匹配 <code v-pre>'00A'</code>；</p>\n</li>\n<li>\n<p><code v-pre>'\\d\\d\\d'</code> 可以匹配 <code v-pre>'010'</code>；</p>\n</li>\n<li>\n<p><code v-pre>'\\w\\w'</code> 可以匹配 <code v-pre>'js'</code>；</p>\n</li>\n</ul>\n<h3 id=\"任意字符\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#任意字符\"><span>任意字符</span></a></h3>\n<p><code v-pre>.</code> 可以匹配任意字符，所以:</p>\n<ul>\n<li><code v-pre>'js.'</code> 可以匹配 <code v-pre>'jsp'</code>、<code v-pre>'jss'</code>、<code v-pre>'js!'</code> 等等。</li>\n</ul>\n<h3 id=\"多个字符匹配\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#多个字符匹配\"><span>多个字符匹配</span></a></h3>\n<p>要匹配变长的字符，在正则表达式中，用 <code v-pre>*</code> 表示任意个字符(包括 0 个)，用 <code v-pre>+</code> 表示至少一个字符，用 <code v-pre>?</code> 表示 0 个或 1 个字符，用 <code v-pre>{n}</code> 表示 n 个字符，用 <code v-pre>{n,m}</code> 表示 <code v-pre>n-m</code> 个字符:</p>\n<p>来看一个复杂的例子: <code v-pre>\\d{3}\\s+\\d{3,8}</code>。</p>\n<p>我们来从左到右解读一下:</p>\n<ol>\n<li>\n<p><code v-pre>\\d{3}</code> 表示匹配 3 个数字，例如 <code v-pre>'010'</code>；</p>\n</li>\n<li>\n<p><code v-pre>\\s</code> 可以匹配一个空格(也包括 Tab 等空白符)，所以 <code v-pre>\\s+</code> 表示至少有一个空格，例如匹配 <code v-pre>' '</code>，<code v-pre>'\\t\\t'</code> 等；</p>\n</li>\n<li>\n<p><code v-pre>\\d{3,8}</code> 表示 3-8 个数字，例如 <code v-pre>'1234567'</code>。</p>\n</li>\n</ol>\n<p>综合起来，上面的正则表达式可以匹配以任意个空格隔开的带区号的电话号码。</p>\n<p>如果要匹配 <code v-pre>'010-12345'</code> 这样的号码呢? 由于 <code v-pre>'-'</code> 是特殊字符，在正则表达式中，要用 <code v-pre>'\\'</code> 转义，所以，上面的正则是 <code v-pre>\\d{3}\\-\\d{3,8}</code>。</p>\n<p>但是，仍然无法匹配 <code v-pre>'010 - 12345'</code>，因为带有空格。所以我们需要更复杂的匹配方式。</p>\n<h2 id=\"进阶\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#进阶\"><span>进阶</span></a></h2>\n<h3 id=\"指定匹配范围\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#指定匹配范围\"><span>指定匹配范围</span></a></h3>\n<p>要做更精确地匹配，可以用 <code v-pre>[]</code> 表示范围，比如:</p>\n<ul>\n<li>\n<p><code v-pre>[0-9a-zA-Z\\_]</code> 可以匹配一个数字、字母或者下划线；</p>\n</li>\n<li>\n<p><code v-pre>[0-9a-zA-Z\\_]+</code> 可以匹配至少由一个数字、字母或者下划线组成的字符串，比如 <code v-pre>'a100'</code>，<code v-pre>'0_Z'</code>，<code v-pre>'js2015'</code> 等等；</p>\n</li>\n<li>\n<p><code v-pre>[a-zA-Z\\_\\$][0-9a-zA-Z\\_\\$]*</code> 可以匹配由字母或下划线、<code v-pre>$</code> 开头，后接任意个由一个数字、字母或者下划线、<code v-pre>$</code> 组成的字符串，也就是 JavaScript 允许的变量名；</p>\n</li>\n<li>\n<p><code v-pre>[a-zA-Z\\_\\$][0-9a-zA-Z\\_\\$]{0, 19}</code> 更精确地限制了变量的长度是 1-20 个字符(前面 1 个字符+后面最多 19 个字符)。</p>\n</li>\n</ul>\n<hr>\n<p><code v-pre>A|B</code> 可以匹配 <code v-pre>A</code> 或 <code v-pre>B</code>，所以 <code v-pre>(J|j)ava(S|s)cript</code> 可以匹配 <code v-pre>'JavaScript'</code>、<code v-pre>'Javascript'</code>、<code v-pre>'javaScript'</code> 或者 <code v-pre>'javascript'</code>。</p>\n<h3 id=\"头尾匹配\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#头尾匹配\"><span>头尾匹配</span></a></h3>\n<p><code v-pre>^</code> 表示行的开头，<code v-pre>^\\d</code> 表示必须以数字开头。</p>\n<p><code v-pre>$</code> 表示行的结束，<code v-pre>\\d$</code> 表示必须以数字结束。</p>\n<p>您可能注意到了，<code v-pre>js</code> 也可以匹配 <code v-pre>'jsp'</code>，但是加上 <code v-pre>^js$</code> 就变成了整行匹配，就只能匹配 <code v-pre>'js'</code> 了。</p>\n<h2 id=\"正则的使用\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#正则的使用\"><span>正则的使用</span></a></h2>\n<p>有了准备知识，我们就可以在 JavaScript 中使用正则表达式了。</p>\n<p>JavaScript 有两种方式创建一个正则表达式:</p>\n<ul>\n<li>第一种方式是直接通过/正则表达式/写出来</li>\n<li>第二种方式是通过 <code v-pre>new RegExp('正则表达式')</code> 创建一个 regular expression 对象。</li>\n</ul>\n<p>两种写法是一样的:</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> re1</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\"> /ABC</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">\\-</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">001/</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> re2</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> new</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> RegExp</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"ABC</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">\\\\</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">-001\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">re1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// /ABC\\-001/</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">re2</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// /ABC\\-001/</span></span></code></pre>\n</div><div class=\"hint-container warning\">\n<p class=\"hint-container-title\">注意</p>\n<p>如果使用第二种写法，因为字符串的转义问题，字符串的两个 <code v-pre>\\\\</code> 实际上是一个 <code v-pre>\\</code>。</p>\n</div>\n<p>先看看如何判断正则表达式是否匹配:</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> re</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\"> /</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">^</span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">\\d</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">{3}</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">\\-</span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">\\d</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">{3,8}</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">$</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">re</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">test</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"010-12345\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">); </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// true</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">re</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">test</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"010-1234x\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">); </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// false</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">re</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">test</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"010 12345\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">); </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// false</span></span></code></pre>\n</div><p>Regular expression 对象的 <code v-pre>test()</code> 方法用于测试给定的字符串是否符合条件。</p>\n<h3 id=\"切分字符串\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#切分字符串\"><span>切分字符串</span></a></h3>\n<p>用正则表达式切分字符串比用固定的字符更灵活，请看正常的切分代码:</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"a b   c\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">split</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\" \"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">); </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// ['a', 'b', '', '', 'c']</span></span></code></pre>\n</div><p>嗯，无法识别连续的空格，用正则表达式试试:</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"a b   c\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">split</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">\\s</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">+</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">); </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// ['a', 'b', 'c']</span></span></code></pre>\n</div><p>无论多少个空格都可以正常分割。加入<code v-pre>,</code>试试:</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"a,b, c  d\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">split</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">[</span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">\\s</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">\\,</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">]</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">+</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">); </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// ['a', 'b', 'c', 'd']</span></span></code></pre>\n</div><p>再加入 <code v-pre>;</code> 试试:</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"a,b;; c  d\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">split</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">[</span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">\\s</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">\\,\\;</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">]</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">+</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">); </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// ['a', 'b', 'c', 'd']</span></span></code></pre>\n</div><p>如果用户输入了一组标签，下次记得用正则表达式来把不规范的输入转化成正确的数组。</p>\n<h3 id=\"分组\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#分组\"><span>分组</span></a></h3>\n<p>除了简单地判断是否匹配之外，正则表达式还有提取子串的强大功能。用 <code v-pre>()</code> 表示的就是要提取的分组 (Group)。比如:</p>\n<p><code v-pre>^(\\d{3})-(\\d{3,8})$</code> 分别定义了两个组，可以直接从匹配的字符串中提取出区号和本地号码:</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> re</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\"> /</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">^</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">(</span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">\\d</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">{3}</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">)-(</span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">\\d</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">{3,8}</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">)</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">$</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">re</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">exec</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"010-12345\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">); </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// ['010-12345', '010', '12345']</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">re</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">exec</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"010 12345\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">); </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// null</span></span></code></pre>\n</div><p>如果正则表达式中定义了组，就可以在 regular expression 对象上用 <code v-pre>exec()</code> 方法提取出子串来。</p>\n<p><code v-pre>exec()</code> 方法在匹配成功后，会返回一个 <code v-pre>Array</code>，第一个元素是正则表达式匹配到的整个字符串，后面的字符串表示匹配成功的子串。</p>\n<p><code v-pre>exec()</code> 方法在匹配失败时返回 <code v-pre>null</code>。</p>\n<p>提取子串非常有用。来看一个更凶残的例子:</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> re</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">  /</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">^</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">(0</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">[0-9]</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">|</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">1</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">[0-9]</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">|</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">2</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">[0-3]</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">|</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">[0-9]</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">)</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">\\:</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">(0</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">[0-9]</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">|</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">1</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">[0-9]</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">|</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">2</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">[0-9]</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">|</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">3</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">[0-9]</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">|</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">4</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">[0-9]</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">|</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">5</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">[0-9]</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">|</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">[0-9]</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">)</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">\\:</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">(0</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">[0-9]</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">|</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">1</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">[0-9]</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">|</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">2</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">[0-9]</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">|</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">3</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">[0-9]</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">|</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">4</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">[0-9]</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">|</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">5</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">[0-9]</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">|</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">[0-9]</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">)</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">$</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">re</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">exec</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"19:05:30\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">); </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// ['19:05:30', '19', '05', '30']</span></span></code></pre>\n</div><p>这个正则表达式可以直接识别合法的时间。但是有些时候，用正则表达式也无法做到完全验证，比如识别日期:</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> re</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\"> /</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">^</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">(0</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">[1-9]</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">|</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">1</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">[0-2]</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">|</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">[0-9]</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">)-(0</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">[1-9]</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">|</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">1</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">[0-9]</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">|</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">2</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">[0-9]</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">|</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">3</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">[0-1]</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">|</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">[0-9]</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">)</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">$</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span></code></pre>\n</div><p>对于 <code v-pre>'2-30'</code>，<code v-pre>'4-31'</code> 这样的非法日期，用正则还是识别不了，或者说写出来非常困难，这时就需要程序配合识别了。</p>\n<h2 id=\"贪婪匹配\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#贪婪匹配\"><span>贪婪匹配</span></a></h2>\n<p>需要特别指出的是，正则匹配默认是贪婪匹配，也就是匹配尽可能多的字符。举例如下，匹配出数字后面的 0:</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> re</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\"> /</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">^</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">(</span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">\\d</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">+</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">)(0</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">*</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">)</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">$</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">re</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">exec</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"102300\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">); </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// ['102300', '102300', '']</span></span></code></pre>\n</div><p>由于 <code v-pre>\\d+</code> 采用贪婪匹配，直接把后面的 <code v-pre>0</code> 全部匹配了，结果 <code v-pre>0*</code> 只能匹配空字符串了。</p>\n<p>必须让 <code v-pre>\\d+</code> 采用非贪婪匹配(也就是尽可能少匹配)，才能把后面的 <code v-pre>0</code> 匹配出来，加个 <code v-pre>?</code> 就可以让 <code v-pre>\\d+</code> 采用非贪婪匹配:</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> re</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\"> /</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">^</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">(</span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">\\d</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">+?</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">)(0</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">*</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">)</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">$</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">re</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">exec</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"102300\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">); </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// ['102300', '1023', '00']</span></span></code></pre>\n</div><h2 id=\"全局搜索\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#全局搜索\"><span>全局搜索</span></a></h2>\n<p>JavaScript 的正则表达式还有几个特殊的标志，最常用的是 <code v-pre>g</code>，表示全局匹配:</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> r1</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\"> /test/</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">g</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 等价于:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> r2</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> new</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> RegExp</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"test\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"g\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span></code></pre>\n</div><p>全局匹配可以多次执行 <code v-pre>exec()</code> 方法来搜索一个匹配的字符串。当我们指定 <code v-pre>g</code> 标志后，每次运行 <code v-pre>exec()</code>，正则表达式本身会更新 <code v-pre>lastIndex</code> 属性，表示上次匹配到的最后索引:</p>\n<div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> s</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"JavaScript, VBScript, JScript and ECMAScript\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> re</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\"> /</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">[a-zA-Z]</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">+</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">Script/</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">g</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 使用全局匹配:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">re</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">exec</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">s</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">); </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// ['JavaScript']</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">re</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">lastIndex</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 10</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">re</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">exec</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">s</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">); </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// ['VBScript']</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">re</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">lastIndex</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 20</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">re</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">exec</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">s</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">); </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// ['JScript']</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">re</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">lastIndex</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 29</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">re</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">exec</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">s</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">); </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// ['ECMAScript']</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">re</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">lastIndex</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 44</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">re</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">exec</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">s</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">); </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// null，直到结束仍没有匹配到</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>全局匹配类似搜索，因此不能使用 <code v-pre>/^...$/</code>，那样只会最多匹配一次。</p>\n<p>正则表达式还可以指定 <code v-pre>i</code> 标志，表示忽略大小写，<code v-pre>m</code> 标志，表示执行多行匹配。</p>\n<h2 id=\"正则小结\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#正则小结\"><span>正则小结</span></a></h2>\n<p>正则表达式非常强大，要在短短的一节里讲完是不可能的。要讲清楚正则的所有内容，可以写一本厚厚的书了。如果您经常遇到正则表达式的问题，您可能需要一本正则表达式的参考书。</p>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">提示</p>\n<p>有兴趣的同学可以查看<a href=\"https://www.runoob.com/regexp/regexp-tutorial.html\" target=\"_blank\" rel=\"noopener noreferrer\">菜鸟教程上关于正则表达式的介绍</a>。</p>\n</div>\n","tagOpen":"<template>","tagClose":"</template>"},"script":null,"scriptSetup":null,"scripts":[],"styles":[],"customBlocks":[]},"content":"\n字符串是编程时涉及到的最多的一种数据结构，对字符串进行操作的需求几乎无处不在。比如判断一个字符串是否是合法的 Email 地址，虽然可以编程提取 `@` 前后的子串，再分别判断是否是单词和域名，但这样做不但麻烦，而且代码难以复用。\n\n<!-- more -->\n\n## 正则表达式介绍\n\n正则表达式是一种用来匹配字符串的强有力的武器。它的设计思想是用一种描述性的语言来给字符串定义一个规则，凡是符合规则的字符串，我们就认为它“匹配”了，否则，该字符串就是不合法的。\n\n所以我们判断一个字符串是否是合法的 Email 的方法是:\n\n1. 创建一个匹配 Email 的正则表达式；\n\n1. 用该正则表达式去匹配用户的输入来判断是否合法。\n\n因为正则表达式也是用字符串表示的，所以，我们要首先了解如何用字符来描述字符。\n\n### 数字与字母\n\n在正则表达式中，如果直接给出字符，就是精确匹配。用 `\\d` 可以匹配一个数字，`\\w` 可以匹配一个字母或数字，所以:\n\n- `'00\\d'` 可以匹配 `'007'`，但无法匹配 `'00A'`；\n\n- `'\\d\\d\\d'` 可以匹配 `'010'`；\n\n- `'\\w\\w'` 可以匹配 `'js'`；\n\n### 任意字符\n\n`.` 可以匹配任意字符，所以:\n\n- `'js.'` 可以匹配 `'jsp'`、`'jss'`、`'js!'` 等等。\n\n### 多个字符匹配\n\n要匹配变长的字符，在正则表达式中，用 `*` 表示任意个字符(包括 0 个)，用 `+` 表示至少一个字符，用 `?` 表示 0 个或 1 个字符，用 `{n}` 表示 n 个字符，用 `{n,m}` 表示 `n-m` 个字符:\n\n来看一个复杂的例子: `\\d{3}\\s+\\d{3,8}`。\n\n我们来从左到右解读一下:\n\n1. `\\d{3}` 表示匹配 3 个数字，例如 `'010'`；\n\n1. `\\s` 可以匹配一个空格(也包括 Tab 等空白符)，所以 `\\s+` 表示至少有一个空格，例如匹配 `' '`，`'\\t\\t'` 等；\n\n1. `\\d{3,8}` 表示 3-8 个数字，例如 `'1234567'`。\n\n综合起来，上面的正则表达式可以匹配以任意个空格隔开的带区号的电话号码。\n\n如果要匹配 `'010-12345'` 这样的号码呢? 由于 `'-'` 是特殊字符，在正则表达式中，要用 `'\\'` 转义，所以，上面的正则是 `\\d{3}\\-\\d{3,8}`。\n\n但是，仍然无法匹配 `'010 - 12345'`，因为带有空格。所以我们需要更复杂的匹配方式。\n\n## 进阶\n\n### 指定匹配范围\n\n要做更精确地匹配，可以用 `[]` 表示范围，比如:\n\n- `[0-9a-zA-Z\\_]` 可以匹配一个数字、字母或者下划线；\n\n- `[0-9a-zA-Z\\_]+` 可以匹配至少由一个数字、字母或者下划线组成的字符串，比如 `'a100'`，`'0_Z'`，`'js2015'` 等等；\n\n- `[a-zA-Z\\_\\$][0-9a-zA-Z\\_\\$]*` 可以匹配由字母或下划线、`$` 开头，后接任意个由一个数字、字母或者下划线、`$` 组成的字符串，也就是 JavaScript 允许的变量名；\n\n- `[a-zA-Z\\_\\$][0-9a-zA-Z\\_\\$]{0, 19}` 更精确地限制了变量的长度是 1-20 个字符(前面 1 个字符+后面最多 19 个字符)。\n\n---\n\n`A|B` 可以匹配 `A` 或 `B`，所以 `(J|j)ava(S|s)cript` 可以匹配 `'JavaScript'`、`'Javascript'`、`'javaScript'` 或者 `'javascript'`。\n\n### 头尾匹配\n\n`^` 表示行的开头，`^\\d` 表示必须以数字开头。\n\n`$` 表示行的结束，`\\d$` 表示必须以数字结束。\n\n您可能注意到了，`js` 也可以匹配 `'jsp'`，但是加上 `^js$` 就变成了整行匹配，就只能匹配 `'js'` 了。\n\n## 正则的使用\n\n有了准备知识，我们就可以在 JavaScript 中使用正则表达式了。\n\nJavaScript 有两种方式创建一个正则表达式:\n\n- 第一种方式是直接通过/正则表达式/写出来\n- 第二种方式是通过 `new RegExp('正则表达式')` 创建一个 regular expression 对象。\n\n两种写法是一样的:\n\n```js\nconst re1 = /ABC\\-001/;\nconst re2 = new RegExp(\"ABC\\\\-001\");\n\nre1; // /ABC\\-001/\nre2; // /ABC\\-001/\n```\n\n::: warning\n\n如果使用第二种写法，因为字符串的转义问题，字符串的两个 `\\\\` 实际上是一个 `\\`。\n\n:::\n\n先看看如何判断正则表达式是否匹配:\n\n```js\nconst re = /^\\d{3}\\-\\d{3,8}$/;\n\nre.test(\"010-12345\"); // true\nre.test(\"010-1234x\"); // false\nre.test(\"010 12345\"); // false\n```\n\nRegular expression 对象的 `test()` 方法用于测试给定的字符串是否符合条件。\n\n### 切分字符串\n\n用正则表达式切分字符串比用固定的字符更灵活，请看正常的切分代码:\n\n```js\n\"a b   c\".split(\" \"); // ['a', 'b', '', '', 'c']\n```\n\n嗯，无法识别连续的空格，用正则表达式试试:\n\n```js\n\"a b   c\".split(/\\s+/); // ['a', 'b', 'c']\n```\n\n无论多少个空格都可以正常分割。加入`,`试试:\n\n```js\n\"a,b, c  d\".split(/[\\s\\,]+/); // ['a', 'b', 'c', 'd']\n```\n\n再加入 `;` 试试:\n\n```js\n\"a,b;; c  d\".split(/[\\s\\,\\;]+/); // ['a', 'b', 'c', 'd']\n```\n\n如果用户输入了一组标签，下次记得用正则表达式来把不规范的输入转化成正确的数组。\n\n### 分组\n\n除了简单地判断是否匹配之外，正则表达式还有提取子串的强大功能。用 `()` 表示的就是要提取的分组 (Group)。比如:\n\n`^(\\d{3})-(\\d{3,8})$` 分别定义了两个组，可以直接从匹配的字符串中提取出区号和本地号码:\n\n```js\nconst re = /^(\\d{3})-(\\d{3,8})$/;\n\nre.exec(\"010-12345\"); // ['010-12345', '010', '12345']\nre.exec(\"010 12345\"); // null\n```\n\n如果正则表达式中定义了组，就可以在 regular expression 对象上用 `exec()` 方法提取出子串来。\n\n`exec()` 方法在匹配成功后，会返回一个 `Array`，第一个元素是正则表达式匹配到的整个字符串，后面的字符串表示匹配成功的子串。\n\n`exec()` 方法在匹配失败时返回 `null`。\n\n提取子串非常有用。来看一个更凶残的例子:\n\n```js\nconst re =\n  /^(0[0-9]|1[0-9]|2[0-3]|[0-9])\\:(0[0-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9]|[0-9])\\:(0[0-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9]|[0-9])$/;\n\nre.exec(\"19:05:30\"); // ['19:05:30', '19', '05', '30']\n```\n\n这个正则表达式可以直接识别合法的时间。但是有些时候，用正则表达式也无法做到完全验证，比如识别日期:\n\n```js\nconst re = /^(0[1-9]|1[0-2]|[0-9])-(0[1-9]|1[0-9]|2[0-9]|3[0-1]|[0-9])$/;\n```\n\n对于 `'2-30'`，`'4-31'` 这样的非法日期，用正则还是识别不了，或者说写出来非常困难，这时就需要程序配合识别了。\n\n## 贪婪匹配\n\n需要特别指出的是，正则匹配默认是贪婪匹配，也就是匹配尽可能多的字符。举例如下，匹配出数字后面的 0:\n\n```js\nconst re = /^(\\d+)(0*)$/;\n\nre.exec(\"102300\"); // ['102300', '102300', '']\n```\n\n由于 `\\d+` 采用贪婪匹配，直接把后面的 `0` 全部匹配了，结果 `0*` 只能匹配空字符串了。\n\n必须让 `\\d+` 采用非贪婪匹配(也就是尽可能少匹配)，才能把后面的 `0` 匹配出来，加个 `?` 就可以让 `\\d+` 采用非贪婪匹配:\n\n```js\nconst re = /^(\\d+?)(0*)$/;\n\nre.exec(\"102300\"); // ['102300', '1023', '00']\n```\n\n## 全局搜索\n\nJavaScript 的正则表达式还有几个特殊的标志，最常用的是 `g`，表示全局匹配:\n\n```js\nconst r1 = /test/g;\n// 等价于:\nconst r2 = new RegExp(\"test\", \"g\");\n```\n\n全局匹配可以多次执行 `exec()` 方法来搜索一个匹配的字符串。当我们指定 `g` 标志后，每次运行 `exec()`，正则表达式本身会更新 `lastIndex` 属性，表示上次匹配到的最后索引:\n\n```js\nconst s = \"JavaScript, VBScript, JScript and ECMAScript\";\nconst re = /[a-zA-Z]+Script/g;\n\n// 使用全局匹配:\nre.exec(s); // ['JavaScript']\nre.lastIndex; // 10\n\nre.exec(s); // ['VBScript']\nre.lastIndex; // 20\n\nre.exec(s); // ['JScript']\nre.lastIndex; // 29\n\nre.exec(s); // ['ECMAScript']\nre.lastIndex; // 44\n\nre.exec(s); // null，直到结束仍没有匹配到\n```\n\n全局匹配类似搜索，因此不能使用 `/^...$/`，那样只会最多匹配一次。\n\n正则表达式还可以指定 `i` 标志，表示忽略大小写，`m` 标志，表示执行多行匹配。\n\n## 正则小结\n\n正则表达式非常强大，要在短短的一节里讲完是不可能的。要讲清楚正则的所有内容，可以写一本厚厚的书了。如果您经常遇到正则表达式的问题，您可能需要一本正则表达式的参考书。\n\n::: tip\n\n有兴趣的同学可以查看[菜鸟教程上关于正则表达式的介绍](https://www.runoob.com/regexp/regexp-tutorial.html)。\n\n:::\n","excerpt":"","title":"","headers":[{"level":2,"title":"正则表达式介绍","slug":"正则表达式介绍","link":"#正则表达式介绍","children":[{"level":3,"title":"数字与字母","slug":"数字与字母","link":"#数字与字母","children":[]},{"level":3,"title":"任意字符","slug":"任意字符","link":"#任意字符","children":[]},{"level":3,"title":"多个字符匹配","slug":"多个字符匹配","link":"#多个字符匹配","children":[]}]},{"level":2,"title":"进阶","slug":"进阶","link":"#进阶","children":[{"level":3,"title":"指定匹配范围","slug":"指定匹配范围","link":"#指定匹配范围","children":[]},{"level":3,"title":"头尾匹配","slug":"头尾匹配","link":"#头尾匹配","children":[]}]},{"level":2,"title":"正则的使用","slug":"正则的使用","link":"#正则的使用","children":[{"level":3,"title":"切分字符串","slug":"切分字符串","link":"#切分字符串","children":[]},{"level":3,"title":"分组","slug":"分组","link":"#分组","children":[]}]},{"level":2,"title":"贪婪匹配","slug":"贪婪匹配","link":"#贪婪匹配","children":[]},{"level":2,"title":"全局搜索","slug":"全局搜索","link":"#全局搜索","children":[]},{"level":2,"title":"正则小结","slug":"正则小结","link":"#正则小结","children":[]}]}}
