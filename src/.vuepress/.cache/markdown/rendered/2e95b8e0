{"content":"<p>脚本(script)就是包含一系列命令的一个文本文件。Shell 读取这个文件，依次执行里面的所有命令，就好像这些命令直接输入到命令行一样。所有能够在命令行完成的任务，都能够用脚本完成。</p>\n<p>脚本的好处是可以重复使用，也可以指定在特定场合自动调用，比如系统启动或关闭时自动执行脚本。</p>\n<!-- more -->\n<h2 id=\"shebang-行\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#shebang-行\"><span>Shebang 行</span></a></h2>\n<p>脚本的第一行通常是指定解释器，即这个脚本必须通过什么解释器执行。这一行以 <code v-pre>#!</code> 字符开头，这个字符称为 Shebang，所以这一行就叫做 Shebang 行。</p>\n<p><code v-pre>#!</code> 后面就是脚本解释器的位置，Bash 脚本的解释器一般是 <code v-pre>/bin/sh</code> 或 <code v-pre>/bin/bash</code>。</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">#!/bin/sh</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"># 或者</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">#!/bin/bash</span></span></code></pre>\n</div><p><code v-pre>#!</code> 与脚本解释器之间有没有空格，都是可以的。</p>\n<p>如果 Bash 解释器不放在目录 <code v-pre>/bin</code>，脚本就无法执行了。为了保险，可以写成下面这样。</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">#!/usr/bin/env bash</span></span></code></pre>\n</div><p>上面命令使用 <code v-pre>env</code> 命令(这个命令总是在 <code v-pre>/usr/bin</code> 目录)，返回 Bash 可执行文件的位置。<code v-pre>env</code> 命令的详细介绍，请看后文。</p>\n<p>Shebang 行不是必需的，但是建议加上这行。如果缺少该行，就需要手动将脚本传给解释器。举例来说，脚本是 <code v-pre>script.sh</code>，有 Shebang 行的时候，可以直接调用执行。</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">./script.sh</span></span></code></pre>\n</div><p>上面例子中，<code v-pre>script.sh</code> 是脚本文件名。脚本通常使用 <code v-pre>.sh</code> 后缀名，不过这不是必需的。</p>\n<p>如果没有 Shebang 行，就只能手动将脚本传给解释器来执行。</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">$</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> /bin/sh</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> ./script.sh</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"># 或者</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">$</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> bash</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> ./script.sh</span></span></code></pre>\n</div><h2 id=\"执行权限和路径\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#执行权限和路径\"><span>执行权限和路径</span></a></h2>\n<p>前面说过，只要指定了 Shebang 行的脚本，可以直接执行。这有一个前提条件，就是脚本需要有执行权限。可以使用下面的命令，赋予脚本执行权限。</p>\n<div class=\"language-bash line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"># 给所有用户执行权限</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">$</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> chmod</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> +x</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> script.sh</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"># 给所有用户读权限和执行权限</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">$</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> chmod</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> +rx</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> script.sh</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"># 或者</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">$</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> chmod</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 755</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> script.sh</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"># 只给脚本拥有者读权限和执行权限</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">$</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> chmod</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> u+rx</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> script.sh</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>脚本的权限通常设为 <code v-pre>755</code> (拥有者有所有权限，其他人有读和执行权限)或者 <code v-pre>700</code>(只有拥有者可以执行)。</p>\n<p>除了执行权限，脚本调用时，一般需要指定脚本的路径(比如 <code v-pre>path/script.sh</code>)。如果将脚本放在环境变量 <code v-pre>$PATH</code> 指定的目录中，就不需要指定路径了。因为 Bash 会自动到这些目录中，寻找是否存在同名的可执行文件。</p>\n<p>建议在主目录新建一个 <code v-pre>~/bin</code> 子目录，专门存放可执行脚本，然后把 <code v-pre>~/bin</code> 加入 <code v-pre>$PATH</code>。</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">export</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> PATH</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">$PATH</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:~/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">bin</span></span></code></pre>\n</div><p>上面命令改变环境变量 <code v-pre>$PATH</code>，将 <code v-pre>~/bin</code> 添加到 <code v-pre>$PATH</code> 的末尾。可以将这一行加到 <code v-pre>~/.bashrc</code> 文件里面，然后重新加载一次 <code v-pre>.bashrc</code>，这个配置就可以生效了。</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">source</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> ~/.bashrc</span></span></code></pre>\n</div><p>以后不管在什么目录，直接输入脚本文件名，脚本就会执行。</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">script.sh</span></span></code></pre>\n</div><p>上面命令没有指定脚本路径，因为 <code v-pre>script.sh</code> 在 <code v-pre>$PATH</code> 指定的目录中。</p>\n<h2 id=\"env-命令\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#env-命令\"><span>env 命令</span></a></h2>\n<p><code v-pre>env</code> 命令总是指向 <code v-pre>/usr/bin/env</code> 文件，或者说，这个二进制文件总是在目录 <code v-pre>/usr/bin</code>。</p>\n<p><code v-pre>#!/usr/bin/env NAME</code> 这个语法的意思是，让 Shell 查找 <code v-pre>$PATH</code> 环境变量里面第一个匹配的 <code v-pre>NAME</code>。如果您不知道某个命令的具体路径，或者希望兼容其他用户的机器，这样的写法就很有用。</p>\n<p><code v-pre>/usr/bin/env bash</code> 的意思就是，返回 <code v-pre>bash</code> 可执行文件的位置，前提是 <code v-pre>bash</code> 的路径是在 <code v-pre>$PATH</code> 里面。其他脚本文件也可以使用这个命令。比如 Node.js 脚本的 Shebang 行，可以写成下面这样。</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">#!/usr/bin/env node</span></span></code></pre>\n</div><p><code v-pre>env</code> 命令的参数如下。</p>\n<ul>\n<li><code v-pre>-i</code>, <code v-pre>--ignore-environment</code>: 不带环境变量启动。</li>\n<li><code v-pre>-u</code>, <code v-pre>--unset=NAME</code>: 从环境变量中删除一个变量。</li>\n<li><code v-pre>--help</code>: 显示帮助。</li>\n<li><code v-pre>--version</code>: 输出版本信息。</li>\n</ul>\n<p>下面是一个例子，新建一个不带任何环境变量的 Shell。</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">env</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> -i</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> /bin/sh</span></span></code></pre>\n</div><h2 id=\"注释\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#注释\"><span>注释</span></a></h2>\n<p>Bash 脚本中，<code v-pre>#</code> 表示注释，可以放在行首，也可以放在行尾。</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"># 本行是注释</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">echo</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 'Hello World!'</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">echo</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 'Hello World!'</span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"> # 井号后面的部分也是注释</span></span></code></pre>\n</div><p>建议在脚本开头，使用注释说明当前脚本的作用，这样有利于日后的维护。</p>\n<h2 id=\"脚本参数\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#脚本参数\"><span>脚本参数</span></a></h2>\n<p>调用脚本的时候，脚本文件名后面可以带有参数。</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">script.sh</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> word1</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> word2</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> word3</span></span></code></pre>\n</div><p>上面例子中，<code v-pre>script.sh</code> 是一个脚本文件，<code v-pre>word1</code>、<code v-pre>word2</code> 和 <code v-pre>word3</code> 是三个参数。</p>\n<p>脚本文件内部，可以使用特殊变量，引用这些参数。</p>\n<ul>\n<li><code v-pre>$0</code>: 脚本文件名，即 <code v-pre>script.sh</code>。</li>\n<li><code v-pre>$1</code>~<code v-pre>$9</code>: 对应脚本的第一个参数到第九个参数。</li>\n<li><code v-pre>$#</code>: 参数的总数。</li>\n<li><code v-pre>$@</code>: 全部的参数，参数之间使用空格分隔。</li>\n<li><code v-pre>$*</code>: 全部的参数，参数之间使用变量 <code v-pre>$IFS</code> 值的第一个字符分隔，默认为空格，但是可以自定义。</li>\n</ul>\n<p>如果脚本的参数多于 9 个，那么第 10 个参数可以用 <code v-pre>${10}</code> 的形式引用，以此类推。</p>\n<p>注意，如果命令是 <code v-pre>command -o foo bar</code>，那么 <code v-pre>-o</code> 是 <code v-pre>$1</code>，<code v-pre>foo</code> 是 <code v-pre>$2</code>，<code v-pre>bar</code> 是 <code v-pre>$3</code>。</p>\n<p>下面是一个脚本内部读取命令行参数的例子。</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">#!/bin/bash</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"># script.sh</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">echo</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"全部参数: \"</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\"> $@</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">echo</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"命令行参数数量: \"</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> $#</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">echo</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> '$0 = '</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\"> $0</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">echo</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> '$1 = '</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\"> $1</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">echo</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> '$2 = '</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\"> $2</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">echo</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> '$3 = '</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\"> $3</span></span></code></pre>\n</div><p>执行结果如下。</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">$</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> ./script.sh</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> a</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> b</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> c</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">全部参数:</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> a</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> b</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> c</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">命令行参数数量:</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 3</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">$0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> =  script.sh</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">$1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> =  a</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">$2</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> =  b</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">$3</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> =  c</span></span></code></pre>\n</div><p>用户可以输入任意数量的参数，利用 <code v-pre>for</code> 循环，可以读取每一个参数。</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">#!/bin/bash</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">for</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> i</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> in</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">$@</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">do</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">  echo</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> $i</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">done</span></span></code></pre>\n</div><p>上面例子中，<code v-pre>$@</code> 返回一个全部参数的列表，然后使用 <code v-pre>for</code> 循环遍历。</p>\n<p>如果多个参数放在双引号里面，视为一个参数。</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">./script.sh</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"a b\"</span></span></code></pre>\n</div><p>上面例子中，Bash 会认为 <code v-pre>&quot;a b&quot;</code> 是一个参数，<code v-pre>$1</code> 会返回 <code v-pre>a b</code>。注意，返回时不包括双引号。</p>\n<h2 id=\"shift-命令\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#shift-命令\"><span>shift 命令</span></a></h2>\n<p><code v-pre>shift</code> 命令可以改变脚本参数，每次执行都会移除脚本当前的第一个参数 (<code v-pre>$1</code>)，使得后面的参数向前一位，即 <code v-pre>$2</code> 变成 <code v-pre>$1</code>、<code v-pre>$3</code> 变成 <code v-pre>$2</code>、<code v-pre>$4</code> 变成 <code v-pre>$3</code>，以此类推。</p>\n<p><code v-pre>while</code> 循环结合 <code v-pre>shift</code> 命令，也可以读取每一个参数。</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">#!/bin/bash</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">echo</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"一共输入了 </span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">$#</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 个参数\"</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">while</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> [ </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">$1</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> !=</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> ]; </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">do</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">  echo</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"剩下 </span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">$#</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 个参数\"</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">  echo</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"参数: </span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">$1</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">  shift</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">done</span></span></code></pre>\n</div><p>上面例子中，<code v-pre>shift</code> 命令每次移除当前第一个参数，从而通过 <code v-pre>while</code> 循环遍历所有参数。</p>\n<p><code v-pre>shift</code> 命令可以接受一个整数作为参数，指定所要移除的参数个数，默认为 <code v-pre>1</code>。</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">shift</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 3</span></span></code></pre>\n</div><p>上面的命令移除前三个参数，原来的 <code v-pre>$4</code> 变成 <code v-pre>$1</code>。</p>\n<h2 id=\"getopts-命令\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#getopts-命令\"><span>getopts 命令</span></a></h2>\n<p><code v-pre>getopts</code> 命令用在脚本内部，可以解析复杂的脚本命令行参数，通常与 <code v-pre>while</code> 循环一起使用，取出脚本所有的带有前置连词线 (<code v-pre>-</code>) 的参数。</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">getopts</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> optstring</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> name</span></span></code></pre>\n</div><p>它带有两个参数。第一个参数 <code v-pre>optstring</code> 是字符串，给出脚本所有的连词线参数。比如，某个脚本可以有三个配置项参数 <code v-pre>-l</code>、<code v-pre>-h</code>、<code v-pre>-a</code>，其中只有 <code v-pre>-a</code> 可以带有参数值，而 <code v-pre>-l</code> 和 <code v-pre>-h</code> 是开关参数，那么 <code v-pre>getopts</code> 的第一个参数写成 <code v-pre>lha:</code>，顺序不重要。注意，<code v-pre>a</code> 后面有一个冒号，表示该参数带有参数值，<code v-pre>getopts</code> 规定带有参数值的配置项参数，后面必须带有一个冒号 (<code v-pre>:</code>)。<code v-pre>getopts</code> 的第二个参数 <code v-pre>name</code> 是一个变量名，用来保存当前取到的配置项参数，即 <code v-pre>l</code>、<code v-pre>h</code> 或 <code v-pre>a</code>。</p>\n<p>下面是一个例子。</p>\n<div class=\"language-bash line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">while</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> getopts</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 'lha:'</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> OPTION</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">do</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  case</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">$OPTION</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> in</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">    l</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">      echo</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"linuxconfig\"</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">      ;;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">    h</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">      echo</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"h stands for h\"</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">      ;;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">    a</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">      avalue</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">$OPTARG</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">      echo</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"The value provided is </span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">$OPTARG</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">      ;;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    ?</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">      echo</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"script usage: $(</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">basename</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\"> $0</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">) [-l] [-h] [-a somevalue]\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> >&#x26;2</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">      exit</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 1</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">      ;;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  esac</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">done</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">shift</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"$((</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">$OPTIND</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> - 1))\"</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>上面例子中，<code v-pre>while</code> 循环不断执行 <code v-pre>getopts 'lha:' OPTION</code> 命令，每次执行就会读取一个连词线参数(以及对应的参数值)，然后进入循环体。变量 <code v-pre>OPTION</code> 保存的是，当前处理的那一个连词线参数(即 <code v-pre>l</code>、<code v-pre>h</code> 或 <code v-pre>a</code>)。如果用户输入了没有指定的参数(比如 <code v-pre>-x</code>)，那么 <code v-pre>OPTION</code> 等于 <code v-pre>?</code>。循环体内使用 <code v-pre>case</code> 判断，处理这四种不同的情况。</p>\n<p>如果某个连词线参数带有参数值，比如 <code v-pre>-a foo</code>，那么处理 <code v-pre>a</code> 参数的时候，环境变量 <code v-pre>$OPTARG</code> 保存的就是参数值。</p>\n<p>注意，只要遇到不带连词线的参数，<code v-pre>getopts</code> 就会执行失败，从而退出 <code v-pre>while</code> 循环。比如，<code v-pre>getopts</code> 可以解析 <code v-pre>command -l foo</code>，但不可以解析 <code v-pre>command foo -l</code>。另外，多个连词线参数写在一起的形式，比如 <code v-pre>command -lh</code>，<code v-pre>getopts</code> 也可以正确处理。</p>\n<p>变量 <code v-pre>$OPTIND</code> 在 <code v-pre>getopts</code> 开始执行前是 <code v-pre>1</code>，然后每次执行就会加 <code v-pre>1</code>。等到退出 <code v-pre>while</code> 循环，就意味着连词线参数全部处理完毕。这时，<code v-pre>$OPTIND - 1</code> 就是已经处理的连词线参数个数，使用 <code v-pre>shift</code> 命令将这些参数移除，保证后面的代码可以用 <code v-pre>$1</code>、<code v-pre>$2</code> 等处理命令的主参数。</p>\n<h2 id=\"配置项参数终止符\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#配置项参数终止符\"><span>配置项参数终止符 <code v-pre>--</code></span></a></h2>\n<p>变量当作命令的参数时，有时希望指定变量只能作为实体参数，不能当作配置项参数，这时可以使用配置项参数终止符 <code v-pre>--</code>。</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">myPath</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"~/docs\"</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">ls</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> --</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> $myPath</span></span></code></pre>\n</div><p>上面例子中，<code v-pre>--</code> 强制变量 <code v-pre>$myPath</code> 只能当作实体参数(即路径名)解释。</p>\n<p>如果变量不是路径名，就会报错。</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">$</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> myPath=\"-l\"</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">$</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> ls</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> --</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> $myPath</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">ls:</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 无法访问'-l':</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 没有那个文件或目录</span></span></code></pre>\n</div><p>上面例子中，变量 <code v-pre>myPath</code> 的值为 <code v-pre>-l</code>，不是路径。但是，<code v-pre>--</code> 强制 <code v-pre>$myPath</code> 只能作为路径解释，导致报错“不存在该路径”。</p>\n<h2 id=\"exit-命令\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#exit-命令\"><span>exit 命令</span></a></h2>\n<p><code v-pre>exit</code> 命令用于终止当前脚本的执行，并向 Shell 返回一个退出值。</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">exit</span></span></code></pre>\n</div><p>上面命令中止当前脚本，将最后一条命令的退出状态，作为整个脚本的退出状态。</p>\n<p><code v-pre>exit</code> 命令后面可以跟参数，该参数就是退出状态。</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"># 退出值为0(成功)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">$</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> exit</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 0</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"># 退出值为1(失败)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">$</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> exit</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 1</span></span></code></pre>\n</div><p>退出时，脚本会返回一个退出值。脚本的退出值，<code v-pre>0</code> 表示正常，<code v-pre>1</code> 表示发生错误，<code v-pre>2</code> 表示用法不对，<code v-pre>126</code> 表示不是可执行脚本，<code v-pre>127</code> 表示命令没有发现。如果脚本被信号 <code v-pre>N</code> 终止，则退出值为 <code v-pre>128 + N</code>。简单来说，只要退出值非 0，就认为执行出错。</p>\n<p>下面是一个例子。</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">if</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> [ $(</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">id</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> -u</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">!=</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"0\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> ]; </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">then</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">  echo</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"根用户才能执行当前脚本\"</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">  exit</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 1</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">fi</span></span></code></pre>\n</div><p>上面的例子中，<code v-pre>id -u</code> 命令返回用户的 ID，一旦用户的 ID 不等于 <code v-pre>0</code>(根用户的 ID)，脚本就会退出，并且退出码为 <code v-pre>1</code>，表示运行失败。</p>\n<p><code v-pre>exit</code> 与 <code v-pre>return</code> 命令的差别是，<code v-pre>return</code> 命令是函数的退出，并返回一个值给调用者，脚本依然执行。<code v-pre>exit</code> 是整个脚本的退出，如果在函数之中调用 <code v-pre>exit</code>，则退出函数，并终止脚本执行。</p>\n<h2 id=\"命令执行结果\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#命令执行结果\"><span>命令执行结果</span></a></h2>\n<p>命令执行结束后，会有一个返回值。<code v-pre>0</code> 表示执行成功，非 <code v-pre>0</code> (通常是 <code v-pre>1</code>)表示执行失败。环境变量 <code v-pre>$?</code> 可以读取前一个命令的返回值。</p>\n<p>利用这一点，可以在脚本中对命令执行结果进行判断。</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">cd</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> $some_directory</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">if</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> [ </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">$?</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"0\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> ]; </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">then</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">  rm</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> *</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">else</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">  echo</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"无法切换目录!\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> 1>&#x26;2</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">  exit</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 1</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">fi</span></span></code></pre>\n</div><p>上面例子中，<code v-pre>cd $some_directory</code> 这个命令如果执行成功(返回值等于 <code v-pre>0</code>)，就删除该目录里面的文件，否则退出脚本，整个脚本的返回值变为 <code v-pre>1</code>，表示执行失败。</p>\n<p>由于 <code v-pre>if</code> 可以直接判断命令的执行结果，执行相应的操作，上面的脚本可以改写成下面的样子。</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">if</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> cd</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> $some_directory</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">then</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">  rm</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> *</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">else</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">  echo</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"Could not change directory! Aborting.\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> 1>&#x26;2</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">  exit</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 1</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">fi</span></span></code></pre>\n</div><p>更简洁的写法是利用两个逻辑运算符 <code v-pre>&amp;&amp;</code>(且)和 <code v-pre>||</code>(或)。</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"># 第一步执行成功，才会执行第二步</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">cd</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> $some_directory</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> &#x26;&#x26; </span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">rm</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> *</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"># 第一步执行失败，才会执行第二步</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">cd</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> $some_directory</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> || </span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">exit</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 1</span></span></code></pre>\n</div><h2 id=\"source-命令\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#source-命令\"><span>source 命令</span></a></h2>\n<p><code v-pre>source</code> 命令用于执行一个脚本，通常用于重新加载一个配置文件。</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">source</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> .bashrc</span></span></code></pre>\n</div><p><code v-pre>source</code> 命令最大的特点是在当前 Shell 执行脚本，不像直接执行脚本时，会新建一个子 Shell。所以，<code v-pre>source</code> 命令执行脚本时，不需要 <code v-pre>export</code> 变量。</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">#!/bin/bash</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"># test.sh</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">echo</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> $foo</span></span></code></pre>\n</div><p>上面脚本输出 <code v-pre>$foo</code> 变量的值。</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"># 当前 Shell 新建一个变量 foo</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">$</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> foo=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">1</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"># 打印输出 1</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">$</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> source</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> test.sh</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">1</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"># 打印输出空字符串</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">$</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> bash</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> test.sh</span></span></code></pre>\n</div><p>上面例子中，当前 Shell 的变量 <code v-pre>foo</code> 并没有 <code v-pre>export</code>，所以直接执行无法读取，但是 <code v-pre>source</code> 执行可以读取。</p>\n<p><code v-pre>source</code> 命令的另一个用途，是在脚本内部加载外部库。</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">#!/bin/bash</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">source</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> ./lib.sh</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">function_from_lib</span></span></code></pre>\n</div><p>上面脚本在内部使用 <code v-pre>source</code> 命令加载了一个外部库，然后就可以在脚本里面，使用这个外部库定义的函数。</p>\n<p><code v-pre>source</code> 有一个简写形式，可以使用一个点 (<code v-pre>.</code>) 来表示。</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">.</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> .bashrc</span></span></code></pre>\n</div><h2 id=\"别名-alias-命令\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#别名-alias-命令\"><span>别名，alias 命令</span></a></h2>\n<p><code v-pre>alias</code> 命令用来为一个命令指定别名，这样更便于记忆。下面是 <code v-pre>alias</code> 的格式。</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">alias</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> NAME</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">DEFINITION</span></span></code></pre>\n</div><p>上面命令中，<code v-pre>NAME</code> 是别名的名称，<code v-pre>DEFINITION</code> 是别名对应的原始命令。注意，等号两侧不能有空格，否则会报错。</p>\n<p>一个常见的例子是为 <code v-pre>grep</code> 命令起一个 <code v-pre>search</code> 的别名。</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">alias</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> search</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">grep</span></span></code></pre>\n</div><p><code v-pre>alias</code> 也可以用来为长命令指定一个更短的别名。下面是通过别名定义一个 <code v-pre>today</code> 的命令。</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">$</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> alias</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> today='date +\"%A, %B %-d, %Y\"'</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">$</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> today</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">星期一,</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 一月</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 6,</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 2020</span></span></code></pre>\n</div><p>有时为了防止误删除文件，可以指定 <code v-pre>rm</code> 命令的别名。</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">alias</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> rm</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'rm -i'</span></span></code></pre>\n</div><p>上面命令指定 <code v-pre>rm</code> 命令是 <code v-pre>rm -i</code>，每次删除文件之前，都会让用户确认。</p>\n<p><code v-pre>alias</code> 定义的别名也可以接受参数，参数会直接传入原始命令。</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">$</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> alias</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> echo='echo It says: '</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">$</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> echo</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> hello</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> world</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">It</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> says:</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> hello</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> world</span></span></code></pre>\n</div><p>上面例子中，别名定义了 <code v-pre>echo</code> 命令的前两个参数，等同于修改了 <code v-pre>echo</code> 命令的默认行为。</p>\n<p>指定别名以后，就可以像使用其他命令一样使用别名。一般来说，都会把常用的别名写在 <code v-pre>~/.bashrc</code> 的末尾。另外，只能为命令定义别名，为其他部分(比如很长的路径)定义别名是无效的。</p>\n<p>直接调用 <code v-pre>alias</code> 命令，可以显示所有别名。</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">alias</span></span></code></pre>\n</div><p><code v-pre>unalias</code> 命令可以解除别名。</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">unalias</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> lt</span></span></code></pre>\n</div><h2 id=\"参考链接\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#参考链接\"><span>参考链接</span></a></h2>\n<ul>\n<li><a href=\"https://linuxconfig.org/how-to-use-getopts-to-parse-a-script-options\" target=\"_blank\" rel=\"noopener noreferrer\">How to use getopts to parse a script options</a>, Egidio Docile</li>\n</ul>\n","env":{"base":"/","filePath":"/Users/carson/Desktop/Mister-Hope.github.io-main/src/linux/bash/script.md","filePathRelative":"linux/bash/script.md","frontmatter":{"date":"2020-05-04T00:00:00.000Z","title":"Bash 脚本入门","icon":"code","author":"阮一峰","category":"Linux","tag":["Bash"],"copyright":"本教程采用<a href=\"https://creativecommons.org/licenses/by-sa/3.0/deed.zh\" rel=\"noopener noreferrer\" target=\"_blank\">知识共享 署名-相同方式共享 3.0协议</a>"},"sfcBlocks":{"template":{"type":"template","content":"<template><p>脚本(script)就是包含一系列命令的一个文本文件。Shell 读取这个文件，依次执行里面的所有命令，就好像这些命令直接输入到命令行一样。所有能够在命令行完成的任务，都能够用脚本完成。</p>\n<p>脚本的好处是可以重复使用，也可以指定在特定场合自动调用，比如系统启动或关闭时自动执行脚本。</p>\n<!-- more -->\n<h2 id=\"shebang-行\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#shebang-行\"><span>Shebang 行</span></a></h2>\n<p>脚本的第一行通常是指定解释器，即这个脚本必须通过什么解释器执行。这一行以 <code v-pre>#!</code> 字符开头，这个字符称为 Shebang，所以这一行就叫做 Shebang 行。</p>\n<p><code v-pre>#!</code> 后面就是脚本解释器的位置，Bash 脚本的解释器一般是 <code v-pre>/bin/sh</code> 或 <code v-pre>/bin/bash</code>。</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">#!/bin/sh</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"># 或者</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">#!/bin/bash</span></span></code></pre>\n</div><p><code v-pre>#!</code> 与脚本解释器之间有没有空格，都是可以的。</p>\n<p>如果 Bash 解释器不放在目录 <code v-pre>/bin</code>，脚本就无法执行了。为了保险，可以写成下面这样。</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">#!/usr/bin/env bash</span></span></code></pre>\n</div><p>上面命令使用 <code v-pre>env</code> 命令(这个命令总是在 <code v-pre>/usr/bin</code> 目录)，返回 Bash 可执行文件的位置。<code v-pre>env</code> 命令的详细介绍，请看后文。</p>\n<p>Shebang 行不是必需的，但是建议加上这行。如果缺少该行，就需要手动将脚本传给解释器。举例来说，脚本是 <code v-pre>script.sh</code>，有 Shebang 行的时候，可以直接调用执行。</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">./script.sh</span></span></code></pre>\n</div><p>上面例子中，<code v-pre>script.sh</code> 是脚本文件名。脚本通常使用 <code v-pre>.sh</code> 后缀名，不过这不是必需的。</p>\n<p>如果没有 Shebang 行，就只能手动将脚本传给解释器来执行。</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">$</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> /bin/sh</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> ./script.sh</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"># 或者</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">$</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> bash</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> ./script.sh</span></span></code></pre>\n</div><h2 id=\"执行权限和路径\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#执行权限和路径\"><span>执行权限和路径</span></a></h2>\n<p>前面说过，只要指定了 Shebang 行的脚本，可以直接执行。这有一个前提条件，就是脚本需要有执行权限。可以使用下面的命令，赋予脚本执行权限。</p>\n<div class=\"language-bash line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"># 给所有用户执行权限</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">$</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> chmod</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> +x</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> script.sh</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"># 给所有用户读权限和执行权限</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">$</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> chmod</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> +rx</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> script.sh</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"># 或者</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">$</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> chmod</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 755</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> script.sh</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"># 只给脚本拥有者读权限和执行权限</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">$</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> chmod</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> u+rx</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> script.sh</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>脚本的权限通常设为 <code v-pre>755</code> (拥有者有所有权限，其他人有读和执行权限)或者 <code v-pre>700</code>(只有拥有者可以执行)。</p>\n<p>除了执行权限，脚本调用时，一般需要指定脚本的路径(比如 <code v-pre>path/script.sh</code>)。如果将脚本放在环境变量 <code v-pre>$PATH</code> 指定的目录中，就不需要指定路径了。因为 Bash 会自动到这些目录中，寻找是否存在同名的可执行文件。</p>\n<p>建议在主目录新建一个 <code v-pre>~/bin</code> 子目录，专门存放可执行脚本，然后把 <code v-pre>~/bin</code> 加入 <code v-pre>$PATH</code>。</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">export</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> PATH</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">$PATH</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:~/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">bin</span></span></code></pre>\n</div><p>上面命令改变环境变量 <code v-pre>$PATH</code>，将 <code v-pre>~/bin</code> 添加到 <code v-pre>$PATH</code> 的末尾。可以将这一行加到 <code v-pre>~/.bashrc</code> 文件里面，然后重新加载一次 <code v-pre>.bashrc</code>，这个配置就可以生效了。</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">source</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> ~/.bashrc</span></span></code></pre>\n</div><p>以后不管在什么目录，直接输入脚本文件名，脚本就会执行。</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">script.sh</span></span></code></pre>\n</div><p>上面命令没有指定脚本路径，因为 <code v-pre>script.sh</code> 在 <code v-pre>$PATH</code> 指定的目录中。</p>\n<h2 id=\"env-命令\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#env-命令\"><span>env 命令</span></a></h2>\n<p><code v-pre>env</code> 命令总是指向 <code v-pre>/usr/bin/env</code> 文件，或者说，这个二进制文件总是在目录 <code v-pre>/usr/bin</code>。</p>\n<p><code v-pre>#!/usr/bin/env NAME</code> 这个语法的意思是，让 Shell 查找 <code v-pre>$PATH</code> 环境变量里面第一个匹配的 <code v-pre>NAME</code>。如果您不知道某个命令的具体路径，或者希望兼容其他用户的机器，这样的写法就很有用。</p>\n<p><code v-pre>/usr/bin/env bash</code> 的意思就是，返回 <code v-pre>bash</code> 可执行文件的位置，前提是 <code v-pre>bash</code> 的路径是在 <code v-pre>$PATH</code> 里面。其他脚本文件也可以使用这个命令。比如 Node.js 脚本的 Shebang 行，可以写成下面这样。</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">#!/usr/bin/env node</span></span></code></pre>\n</div><p><code v-pre>env</code> 命令的参数如下。</p>\n<ul>\n<li><code v-pre>-i</code>, <code v-pre>--ignore-environment</code>: 不带环境变量启动。</li>\n<li><code v-pre>-u</code>, <code v-pre>--unset=NAME</code>: 从环境变量中删除一个变量。</li>\n<li><code v-pre>--help</code>: 显示帮助。</li>\n<li><code v-pre>--version</code>: 输出版本信息。</li>\n</ul>\n<p>下面是一个例子，新建一个不带任何环境变量的 Shell。</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">env</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> -i</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> /bin/sh</span></span></code></pre>\n</div><h2 id=\"注释\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#注释\"><span>注释</span></a></h2>\n<p>Bash 脚本中，<code v-pre>#</code> 表示注释，可以放在行首，也可以放在行尾。</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"># 本行是注释</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">echo</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 'Hello World!'</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">echo</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 'Hello World!'</span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"> # 井号后面的部分也是注释</span></span></code></pre>\n</div><p>建议在脚本开头，使用注释说明当前脚本的作用，这样有利于日后的维护。</p>\n<h2 id=\"脚本参数\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#脚本参数\"><span>脚本参数</span></a></h2>\n<p>调用脚本的时候，脚本文件名后面可以带有参数。</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">script.sh</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> word1</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> word2</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> word3</span></span></code></pre>\n</div><p>上面例子中，<code v-pre>script.sh</code> 是一个脚本文件，<code v-pre>word1</code>、<code v-pre>word2</code> 和 <code v-pre>word3</code> 是三个参数。</p>\n<p>脚本文件内部，可以使用特殊变量，引用这些参数。</p>\n<ul>\n<li><code v-pre>$0</code>: 脚本文件名，即 <code v-pre>script.sh</code>。</li>\n<li><code v-pre>$1</code>~<code v-pre>$9</code>: 对应脚本的第一个参数到第九个参数。</li>\n<li><code v-pre>$#</code>: 参数的总数。</li>\n<li><code v-pre>$@</code>: 全部的参数，参数之间使用空格分隔。</li>\n<li><code v-pre>$*</code>: 全部的参数，参数之间使用变量 <code v-pre>$IFS</code> 值的第一个字符分隔，默认为空格，但是可以自定义。</li>\n</ul>\n<p>如果脚本的参数多于 9 个，那么第 10 个参数可以用 <code v-pre>${10}</code> 的形式引用，以此类推。</p>\n<p>注意，如果命令是 <code v-pre>command -o foo bar</code>，那么 <code v-pre>-o</code> 是 <code v-pre>$1</code>，<code v-pre>foo</code> 是 <code v-pre>$2</code>，<code v-pre>bar</code> 是 <code v-pre>$3</code>。</p>\n<p>下面是一个脚本内部读取命令行参数的例子。</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">#!/bin/bash</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"># script.sh</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">echo</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"全部参数: \"</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\"> $@</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">echo</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"命令行参数数量: \"</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> $#</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">echo</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> '$0 = '</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\"> $0</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">echo</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> '$1 = '</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\"> $1</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">echo</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> '$2 = '</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\"> $2</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">echo</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> '$3 = '</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\"> $3</span></span></code></pre>\n</div><p>执行结果如下。</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">$</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> ./script.sh</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> a</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> b</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> c</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">全部参数:</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> a</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> b</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> c</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">命令行参数数量:</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 3</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">$0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> =  script.sh</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">$1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> =  a</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">$2</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> =  b</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">$3</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> =  c</span></span></code></pre>\n</div><p>用户可以输入任意数量的参数，利用 <code v-pre>for</code> 循环，可以读取每一个参数。</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">#!/bin/bash</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">for</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> i</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> in</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">$@</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">do</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">  echo</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> $i</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">done</span></span></code></pre>\n</div><p>上面例子中，<code v-pre>$@</code> 返回一个全部参数的列表，然后使用 <code v-pre>for</code> 循环遍历。</p>\n<p>如果多个参数放在双引号里面，视为一个参数。</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">./script.sh</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"a b\"</span></span></code></pre>\n</div><p>上面例子中，Bash 会认为 <code v-pre>&quot;a b&quot;</code> 是一个参数，<code v-pre>$1</code> 会返回 <code v-pre>a b</code>。注意，返回时不包括双引号。</p>\n<h2 id=\"shift-命令\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#shift-命令\"><span>shift 命令</span></a></h2>\n<p><code v-pre>shift</code> 命令可以改变脚本参数，每次执行都会移除脚本当前的第一个参数 (<code v-pre>$1</code>)，使得后面的参数向前一位，即 <code v-pre>$2</code> 变成 <code v-pre>$1</code>、<code v-pre>$3</code> 变成 <code v-pre>$2</code>、<code v-pre>$4</code> 变成 <code v-pre>$3</code>，以此类推。</p>\n<p><code v-pre>while</code> 循环结合 <code v-pre>shift</code> 命令，也可以读取每一个参数。</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">#!/bin/bash</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">echo</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"一共输入了 </span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">$#</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 个参数\"</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">while</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> [ </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">$1</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> !=</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> ]; </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">do</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">  echo</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"剩下 </span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">$#</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 个参数\"</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">  echo</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"参数: </span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">$1</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">  shift</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">done</span></span></code></pre>\n</div><p>上面例子中，<code v-pre>shift</code> 命令每次移除当前第一个参数，从而通过 <code v-pre>while</code> 循环遍历所有参数。</p>\n<p><code v-pre>shift</code> 命令可以接受一个整数作为参数，指定所要移除的参数个数，默认为 <code v-pre>1</code>。</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">shift</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 3</span></span></code></pre>\n</div><p>上面的命令移除前三个参数，原来的 <code v-pre>$4</code> 变成 <code v-pre>$1</code>。</p>\n<h2 id=\"getopts-命令\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#getopts-命令\"><span>getopts 命令</span></a></h2>\n<p><code v-pre>getopts</code> 命令用在脚本内部，可以解析复杂的脚本命令行参数，通常与 <code v-pre>while</code> 循环一起使用，取出脚本所有的带有前置连词线 (<code v-pre>-</code>) 的参数。</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">getopts</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> optstring</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> name</span></span></code></pre>\n</div><p>它带有两个参数。第一个参数 <code v-pre>optstring</code> 是字符串，给出脚本所有的连词线参数。比如，某个脚本可以有三个配置项参数 <code v-pre>-l</code>、<code v-pre>-h</code>、<code v-pre>-a</code>，其中只有 <code v-pre>-a</code> 可以带有参数值，而 <code v-pre>-l</code> 和 <code v-pre>-h</code> 是开关参数，那么 <code v-pre>getopts</code> 的第一个参数写成 <code v-pre>lha:</code>，顺序不重要。注意，<code v-pre>a</code> 后面有一个冒号，表示该参数带有参数值，<code v-pre>getopts</code> 规定带有参数值的配置项参数，后面必须带有一个冒号 (<code v-pre>:</code>)。<code v-pre>getopts</code> 的第二个参数 <code v-pre>name</code> 是一个变量名，用来保存当前取到的配置项参数，即 <code v-pre>l</code>、<code v-pre>h</code> 或 <code v-pre>a</code>。</p>\n<p>下面是一个例子。</p>\n<div class=\"language-bash line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">while</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> getopts</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 'lha:'</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> OPTION</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">do</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  case</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">$OPTION</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> in</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">    l</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">      echo</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"linuxconfig\"</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">      ;;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">    h</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">      echo</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"h stands for h\"</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">      ;;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">    a</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">      avalue</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">$OPTARG</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">      echo</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"The value provided is </span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">$OPTARG</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">      ;;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    ?</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">      echo</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"script usage: $(</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">basename</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\"> $0</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">) [-l] [-h] [-a somevalue]\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> >&#x26;2</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">      exit</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 1</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">      ;;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  esac</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">done</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">shift</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"$((</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">$OPTIND</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> - 1))\"</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>上面例子中，<code v-pre>while</code> 循环不断执行 <code v-pre>getopts 'lha:' OPTION</code> 命令，每次执行就会读取一个连词线参数(以及对应的参数值)，然后进入循环体。变量 <code v-pre>OPTION</code> 保存的是，当前处理的那一个连词线参数(即 <code v-pre>l</code>、<code v-pre>h</code> 或 <code v-pre>a</code>)。如果用户输入了没有指定的参数(比如 <code v-pre>-x</code>)，那么 <code v-pre>OPTION</code> 等于 <code v-pre>?</code>。循环体内使用 <code v-pre>case</code> 判断，处理这四种不同的情况。</p>\n<p>如果某个连词线参数带有参数值，比如 <code v-pre>-a foo</code>，那么处理 <code v-pre>a</code> 参数的时候，环境变量 <code v-pre>$OPTARG</code> 保存的就是参数值。</p>\n<p>注意，只要遇到不带连词线的参数，<code v-pre>getopts</code> 就会执行失败，从而退出 <code v-pre>while</code> 循环。比如，<code v-pre>getopts</code> 可以解析 <code v-pre>command -l foo</code>，但不可以解析 <code v-pre>command foo -l</code>。另外，多个连词线参数写在一起的形式，比如 <code v-pre>command -lh</code>，<code v-pre>getopts</code> 也可以正确处理。</p>\n<p>变量 <code v-pre>$OPTIND</code> 在 <code v-pre>getopts</code> 开始执行前是 <code v-pre>1</code>，然后每次执行就会加 <code v-pre>1</code>。等到退出 <code v-pre>while</code> 循环，就意味着连词线参数全部处理完毕。这时，<code v-pre>$OPTIND - 1</code> 就是已经处理的连词线参数个数，使用 <code v-pre>shift</code> 命令将这些参数移除，保证后面的代码可以用 <code v-pre>$1</code>、<code v-pre>$2</code> 等处理命令的主参数。</p>\n<h2 id=\"配置项参数终止符\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#配置项参数终止符\"><span>配置项参数终止符 <code v-pre>--</code></span></a></h2>\n<p>变量当作命令的参数时，有时希望指定变量只能作为实体参数，不能当作配置项参数，这时可以使用配置项参数终止符 <code v-pre>--</code>。</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">myPath</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"~/docs\"</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">ls</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> --</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> $myPath</span></span></code></pre>\n</div><p>上面例子中，<code v-pre>--</code> 强制变量 <code v-pre>$myPath</code> 只能当作实体参数(即路径名)解释。</p>\n<p>如果变量不是路径名，就会报错。</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">$</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> myPath=\"-l\"</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">$</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> ls</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> --</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> $myPath</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">ls:</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 无法访问'-l':</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 没有那个文件或目录</span></span></code></pre>\n</div><p>上面例子中，变量 <code v-pre>myPath</code> 的值为 <code v-pre>-l</code>，不是路径。但是，<code v-pre>--</code> 强制 <code v-pre>$myPath</code> 只能作为路径解释，导致报错“不存在该路径”。</p>\n<h2 id=\"exit-命令\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#exit-命令\"><span>exit 命令</span></a></h2>\n<p><code v-pre>exit</code> 命令用于终止当前脚本的执行，并向 Shell 返回一个退出值。</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">exit</span></span></code></pre>\n</div><p>上面命令中止当前脚本，将最后一条命令的退出状态，作为整个脚本的退出状态。</p>\n<p><code v-pre>exit</code> 命令后面可以跟参数，该参数就是退出状态。</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"># 退出值为0(成功)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">$</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> exit</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 0</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"># 退出值为1(失败)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">$</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> exit</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 1</span></span></code></pre>\n</div><p>退出时，脚本会返回一个退出值。脚本的退出值，<code v-pre>0</code> 表示正常，<code v-pre>1</code> 表示发生错误，<code v-pre>2</code> 表示用法不对，<code v-pre>126</code> 表示不是可执行脚本，<code v-pre>127</code> 表示命令没有发现。如果脚本被信号 <code v-pre>N</code> 终止，则退出值为 <code v-pre>128 + N</code>。简单来说，只要退出值非 0，就认为执行出错。</p>\n<p>下面是一个例子。</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">if</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> [ $(</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">id</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> -u</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">!=</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"0\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> ]; </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">then</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">  echo</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"根用户才能执行当前脚本\"</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">  exit</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 1</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">fi</span></span></code></pre>\n</div><p>上面的例子中，<code v-pre>id -u</code> 命令返回用户的 ID，一旦用户的 ID 不等于 <code v-pre>0</code>(根用户的 ID)，脚本就会退出，并且退出码为 <code v-pre>1</code>，表示运行失败。</p>\n<p><code v-pre>exit</code> 与 <code v-pre>return</code> 命令的差别是，<code v-pre>return</code> 命令是函数的退出，并返回一个值给调用者，脚本依然执行。<code v-pre>exit</code> 是整个脚本的退出，如果在函数之中调用 <code v-pre>exit</code>，则退出函数，并终止脚本执行。</p>\n<h2 id=\"命令执行结果\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#命令执行结果\"><span>命令执行结果</span></a></h2>\n<p>命令执行结束后，会有一个返回值。<code v-pre>0</code> 表示执行成功，非 <code v-pre>0</code> (通常是 <code v-pre>1</code>)表示执行失败。环境变量 <code v-pre>$?</code> 可以读取前一个命令的返回值。</p>\n<p>利用这一点，可以在脚本中对命令执行结果进行判断。</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">cd</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> $some_directory</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">if</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> [ </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">$?</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"0\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> ]; </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">then</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">  rm</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> *</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">else</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">  echo</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"无法切换目录!\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> 1>&#x26;2</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">  exit</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 1</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">fi</span></span></code></pre>\n</div><p>上面例子中，<code v-pre>cd $some_directory</code> 这个命令如果执行成功(返回值等于 <code v-pre>0</code>)，就删除该目录里面的文件，否则退出脚本，整个脚本的返回值变为 <code v-pre>1</code>，表示执行失败。</p>\n<p>由于 <code v-pre>if</code> 可以直接判断命令的执行结果，执行相应的操作，上面的脚本可以改写成下面的样子。</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">if</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> cd</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> $some_directory</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">then</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">  rm</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> *</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">else</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">  echo</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"Could not change directory! Aborting.\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> 1>&#x26;2</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">  exit</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 1</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">fi</span></span></code></pre>\n</div><p>更简洁的写法是利用两个逻辑运算符 <code v-pre>&amp;&amp;</code>(且)和 <code v-pre>||</code>(或)。</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"># 第一步执行成功，才会执行第二步</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">cd</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> $some_directory</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> &#x26;&#x26; </span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">rm</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> *</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"># 第一步执行失败，才会执行第二步</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">cd</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> $some_directory</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> || </span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">exit</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 1</span></span></code></pre>\n</div><h2 id=\"source-命令\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#source-命令\"><span>source 命令</span></a></h2>\n<p><code v-pre>source</code> 命令用于执行一个脚本，通常用于重新加载一个配置文件。</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">source</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> .bashrc</span></span></code></pre>\n</div><p><code v-pre>source</code> 命令最大的特点是在当前 Shell 执行脚本，不像直接执行脚本时，会新建一个子 Shell。所以，<code v-pre>source</code> 命令执行脚本时，不需要 <code v-pre>export</code> 变量。</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">#!/bin/bash</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"># test.sh</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">echo</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> $foo</span></span></code></pre>\n</div><p>上面脚本输出 <code v-pre>$foo</code> 变量的值。</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"># 当前 Shell 新建一个变量 foo</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">$</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> foo=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">1</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"># 打印输出 1</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">$</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> source</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> test.sh</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">1</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"># 打印输出空字符串</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">$</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> bash</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> test.sh</span></span></code></pre>\n</div><p>上面例子中，当前 Shell 的变量 <code v-pre>foo</code> 并没有 <code v-pre>export</code>，所以直接执行无法读取，但是 <code v-pre>source</code> 执行可以读取。</p>\n<p><code v-pre>source</code> 命令的另一个用途，是在脚本内部加载外部库。</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">#!/bin/bash</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">source</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> ./lib.sh</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">function_from_lib</span></span></code></pre>\n</div><p>上面脚本在内部使用 <code v-pre>source</code> 命令加载了一个外部库，然后就可以在脚本里面，使用这个外部库定义的函数。</p>\n<p><code v-pre>source</code> 有一个简写形式，可以使用一个点 (<code v-pre>.</code>) 来表示。</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">.</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> .bashrc</span></span></code></pre>\n</div><h2 id=\"别名-alias-命令\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#别名-alias-命令\"><span>别名，alias 命令</span></a></h2>\n<p><code v-pre>alias</code> 命令用来为一个命令指定别名，这样更便于记忆。下面是 <code v-pre>alias</code> 的格式。</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">alias</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> NAME</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">DEFINITION</span></span></code></pre>\n</div><p>上面命令中，<code v-pre>NAME</code> 是别名的名称，<code v-pre>DEFINITION</code> 是别名对应的原始命令。注意，等号两侧不能有空格，否则会报错。</p>\n<p>一个常见的例子是为 <code v-pre>grep</code> 命令起一个 <code v-pre>search</code> 的别名。</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">alias</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> search</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">grep</span></span></code></pre>\n</div><p><code v-pre>alias</code> 也可以用来为长命令指定一个更短的别名。下面是通过别名定义一个 <code v-pre>today</code> 的命令。</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">$</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> alias</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> today='date +\"%A, %B %-d, %Y\"'</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">$</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> today</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">星期一,</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 一月</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 6,</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 2020</span></span></code></pre>\n</div><p>有时为了防止误删除文件，可以指定 <code v-pre>rm</code> 命令的别名。</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">alias</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> rm</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'rm -i'</span></span></code></pre>\n</div><p>上面命令指定 <code v-pre>rm</code> 命令是 <code v-pre>rm -i</code>，每次删除文件之前，都会让用户确认。</p>\n<p><code v-pre>alias</code> 定义的别名也可以接受参数，参数会直接传入原始命令。</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">$</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> alias</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> echo='echo It says: '</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">$</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> echo</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> hello</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> world</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">It</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> says:</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> hello</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> world</span></span></code></pre>\n</div><p>上面例子中，别名定义了 <code v-pre>echo</code> 命令的前两个参数，等同于修改了 <code v-pre>echo</code> 命令的默认行为。</p>\n<p>指定别名以后，就可以像使用其他命令一样使用别名。一般来说，都会把常用的别名写在 <code v-pre>~/.bashrc</code> 的末尾。另外，只能为命令定义别名，为其他部分(比如很长的路径)定义别名是无效的。</p>\n<p>直接调用 <code v-pre>alias</code> 命令，可以显示所有别名。</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">alias</span></span></code></pre>\n</div><p><code v-pre>unalias</code> 命令可以解除别名。</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">unalias</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> lt</span></span></code></pre>\n</div><h2 id=\"参考链接\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#参考链接\"><span>参考链接</span></a></h2>\n<ul>\n<li><a href=\"https://linuxconfig.org/how-to-use-getopts-to-parse-a-script-options\" target=\"_blank\" rel=\"noopener noreferrer\">How to use getopts to parse a script options</a>, Egidio Docile</li>\n</ul>\n</template>","contentStripped":"<p>脚本(script)就是包含一系列命令的一个文本文件。Shell 读取这个文件，依次执行里面的所有命令，就好像这些命令直接输入到命令行一样。所有能够在命令行完成的任务，都能够用脚本完成。</p>\n<p>脚本的好处是可以重复使用，也可以指定在特定场合自动调用，比如系统启动或关闭时自动执行脚本。</p>\n<!-- more -->\n<h2 id=\"shebang-行\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#shebang-行\"><span>Shebang 行</span></a></h2>\n<p>脚本的第一行通常是指定解释器，即这个脚本必须通过什么解释器执行。这一行以 <code v-pre>#!</code> 字符开头，这个字符称为 Shebang，所以这一行就叫做 Shebang 行。</p>\n<p><code v-pre>#!</code> 后面就是脚本解释器的位置，Bash 脚本的解释器一般是 <code v-pre>/bin/sh</code> 或 <code v-pre>/bin/bash</code>。</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">#!/bin/sh</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"># 或者</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">#!/bin/bash</span></span></code></pre>\n</div><p><code v-pre>#!</code> 与脚本解释器之间有没有空格，都是可以的。</p>\n<p>如果 Bash 解释器不放在目录 <code v-pre>/bin</code>，脚本就无法执行了。为了保险，可以写成下面这样。</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">#!/usr/bin/env bash</span></span></code></pre>\n</div><p>上面命令使用 <code v-pre>env</code> 命令(这个命令总是在 <code v-pre>/usr/bin</code> 目录)，返回 Bash 可执行文件的位置。<code v-pre>env</code> 命令的详细介绍，请看后文。</p>\n<p>Shebang 行不是必需的，但是建议加上这行。如果缺少该行，就需要手动将脚本传给解释器。举例来说，脚本是 <code v-pre>script.sh</code>，有 Shebang 行的时候，可以直接调用执行。</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">./script.sh</span></span></code></pre>\n</div><p>上面例子中，<code v-pre>script.sh</code> 是脚本文件名。脚本通常使用 <code v-pre>.sh</code> 后缀名，不过这不是必需的。</p>\n<p>如果没有 Shebang 行，就只能手动将脚本传给解释器来执行。</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">$</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> /bin/sh</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> ./script.sh</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"># 或者</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">$</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> bash</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> ./script.sh</span></span></code></pre>\n</div><h2 id=\"执行权限和路径\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#执行权限和路径\"><span>执行权限和路径</span></a></h2>\n<p>前面说过，只要指定了 Shebang 行的脚本，可以直接执行。这有一个前提条件，就是脚本需要有执行权限。可以使用下面的命令，赋予脚本执行权限。</p>\n<div class=\"language-bash line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"># 给所有用户执行权限</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">$</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> chmod</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> +x</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> script.sh</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"># 给所有用户读权限和执行权限</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">$</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> chmod</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> +rx</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> script.sh</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"># 或者</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">$</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> chmod</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 755</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> script.sh</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"># 只给脚本拥有者读权限和执行权限</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">$</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> chmod</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> u+rx</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> script.sh</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>脚本的权限通常设为 <code v-pre>755</code> (拥有者有所有权限，其他人有读和执行权限)或者 <code v-pre>700</code>(只有拥有者可以执行)。</p>\n<p>除了执行权限，脚本调用时，一般需要指定脚本的路径(比如 <code v-pre>path/script.sh</code>)。如果将脚本放在环境变量 <code v-pre>$PATH</code> 指定的目录中，就不需要指定路径了。因为 Bash 会自动到这些目录中，寻找是否存在同名的可执行文件。</p>\n<p>建议在主目录新建一个 <code v-pre>~/bin</code> 子目录，专门存放可执行脚本，然后把 <code v-pre>~/bin</code> 加入 <code v-pre>$PATH</code>。</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">export</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> PATH</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">$PATH</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:~/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">bin</span></span></code></pre>\n</div><p>上面命令改变环境变量 <code v-pre>$PATH</code>，将 <code v-pre>~/bin</code> 添加到 <code v-pre>$PATH</code> 的末尾。可以将这一行加到 <code v-pre>~/.bashrc</code> 文件里面，然后重新加载一次 <code v-pre>.bashrc</code>，这个配置就可以生效了。</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">source</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> ~/.bashrc</span></span></code></pre>\n</div><p>以后不管在什么目录，直接输入脚本文件名，脚本就会执行。</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">script.sh</span></span></code></pre>\n</div><p>上面命令没有指定脚本路径，因为 <code v-pre>script.sh</code> 在 <code v-pre>$PATH</code> 指定的目录中。</p>\n<h2 id=\"env-命令\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#env-命令\"><span>env 命令</span></a></h2>\n<p><code v-pre>env</code> 命令总是指向 <code v-pre>/usr/bin/env</code> 文件，或者说，这个二进制文件总是在目录 <code v-pre>/usr/bin</code>。</p>\n<p><code v-pre>#!/usr/bin/env NAME</code> 这个语法的意思是，让 Shell 查找 <code v-pre>$PATH</code> 环境变量里面第一个匹配的 <code v-pre>NAME</code>。如果您不知道某个命令的具体路径，或者希望兼容其他用户的机器，这样的写法就很有用。</p>\n<p><code v-pre>/usr/bin/env bash</code> 的意思就是，返回 <code v-pre>bash</code> 可执行文件的位置，前提是 <code v-pre>bash</code> 的路径是在 <code v-pre>$PATH</code> 里面。其他脚本文件也可以使用这个命令。比如 Node.js 脚本的 Shebang 行，可以写成下面这样。</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">#!/usr/bin/env node</span></span></code></pre>\n</div><p><code v-pre>env</code> 命令的参数如下。</p>\n<ul>\n<li><code v-pre>-i</code>, <code v-pre>--ignore-environment</code>: 不带环境变量启动。</li>\n<li><code v-pre>-u</code>, <code v-pre>--unset=NAME</code>: 从环境变量中删除一个变量。</li>\n<li><code v-pre>--help</code>: 显示帮助。</li>\n<li><code v-pre>--version</code>: 输出版本信息。</li>\n</ul>\n<p>下面是一个例子，新建一个不带任何环境变量的 Shell。</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">env</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> -i</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> /bin/sh</span></span></code></pre>\n</div><h2 id=\"注释\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#注释\"><span>注释</span></a></h2>\n<p>Bash 脚本中，<code v-pre>#</code> 表示注释，可以放在行首，也可以放在行尾。</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"># 本行是注释</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">echo</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 'Hello World!'</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">echo</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 'Hello World!'</span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"> # 井号后面的部分也是注释</span></span></code></pre>\n</div><p>建议在脚本开头，使用注释说明当前脚本的作用，这样有利于日后的维护。</p>\n<h2 id=\"脚本参数\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#脚本参数\"><span>脚本参数</span></a></h2>\n<p>调用脚本的时候，脚本文件名后面可以带有参数。</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">script.sh</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> word1</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> word2</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> word3</span></span></code></pre>\n</div><p>上面例子中，<code v-pre>script.sh</code> 是一个脚本文件，<code v-pre>word1</code>、<code v-pre>word2</code> 和 <code v-pre>word3</code> 是三个参数。</p>\n<p>脚本文件内部，可以使用特殊变量，引用这些参数。</p>\n<ul>\n<li><code v-pre>$0</code>: 脚本文件名，即 <code v-pre>script.sh</code>。</li>\n<li><code v-pre>$1</code>~<code v-pre>$9</code>: 对应脚本的第一个参数到第九个参数。</li>\n<li><code v-pre>$#</code>: 参数的总数。</li>\n<li><code v-pre>$@</code>: 全部的参数，参数之间使用空格分隔。</li>\n<li><code v-pre>$*</code>: 全部的参数，参数之间使用变量 <code v-pre>$IFS</code> 值的第一个字符分隔，默认为空格，但是可以自定义。</li>\n</ul>\n<p>如果脚本的参数多于 9 个，那么第 10 个参数可以用 <code v-pre>${10}</code> 的形式引用，以此类推。</p>\n<p>注意，如果命令是 <code v-pre>command -o foo bar</code>，那么 <code v-pre>-o</code> 是 <code v-pre>$1</code>，<code v-pre>foo</code> 是 <code v-pre>$2</code>，<code v-pre>bar</code> 是 <code v-pre>$3</code>。</p>\n<p>下面是一个脚本内部读取命令行参数的例子。</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">#!/bin/bash</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"># script.sh</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">echo</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"全部参数: \"</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\"> $@</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">echo</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"命令行参数数量: \"</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> $#</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">echo</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> '$0 = '</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\"> $0</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">echo</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> '$1 = '</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\"> $1</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">echo</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> '$2 = '</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\"> $2</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">echo</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> '$3 = '</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\"> $3</span></span></code></pre>\n</div><p>执行结果如下。</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">$</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> ./script.sh</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> a</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> b</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> c</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">全部参数:</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> a</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> b</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> c</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">命令行参数数量:</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 3</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">$0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> =  script.sh</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">$1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> =  a</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">$2</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> =  b</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">$3</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> =  c</span></span></code></pre>\n</div><p>用户可以输入任意数量的参数，利用 <code v-pre>for</code> 循环，可以读取每一个参数。</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">#!/bin/bash</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">for</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> i</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> in</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">$@</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">do</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">  echo</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> $i</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">done</span></span></code></pre>\n</div><p>上面例子中，<code v-pre>$@</code> 返回一个全部参数的列表，然后使用 <code v-pre>for</code> 循环遍历。</p>\n<p>如果多个参数放在双引号里面，视为一个参数。</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">./script.sh</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"a b\"</span></span></code></pre>\n</div><p>上面例子中，Bash 会认为 <code v-pre>&quot;a b&quot;</code> 是一个参数，<code v-pre>$1</code> 会返回 <code v-pre>a b</code>。注意，返回时不包括双引号。</p>\n<h2 id=\"shift-命令\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#shift-命令\"><span>shift 命令</span></a></h2>\n<p><code v-pre>shift</code> 命令可以改变脚本参数，每次执行都会移除脚本当前的第一个参数 (<code v-pre>$1</code>)，使得后面的参数向前一位，即 <code v-pre>$2</code> 变成 <code v-pre>$1</code>、<code v-pre>$3</code> 变成 <code v-pre>$2</code>、<code v-pre>$4</code> 变成 <code v-pre>$3</code>，以此类推。</p>\n<p><code v-pre>while</code> 循环结合 <code v-pre>shift</code> 命令，也可以读取每一个参数。</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">#!/bin/bash</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">echo</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"一共输入了 </span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">$#</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 个参数\"</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">while</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> [ </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">$1</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> !=</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> ]; </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">do</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">  echo</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"剩下 </span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">$#</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 个参数\"</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">  echo</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"参数: </span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">$1</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">  shift</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">done</span></span></code></pre>\n</div><p>上面例子中，<code v-pre>shift</code> 命令每次移除当前第一个参数，从而通过 <code v-pre>while</code> 循环遍历所有参数。</p>\n<p><code v-pre>shift</code> 命令可以接受一个整数作为参数，指定所要移除的参数个数，默认为 <code v-pre>1</code>。</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">shift</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 3</span></span></code></pre>\n</div><p>上面的命令移除前三个参数，原来的 <code v-pre>$4</code> 变成 <code v-pre>$1</code>。</p>\n<h2 id=\"getopts-命令\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#getopts-命令\"><span>getopts 命令</span></a></h2>\n<p><code v-pre>getopts</code> 命令用在脚本内部，可以解析复杂的脚本命令行参数，通常与 <code v-pre>while</code> 循环一起使用，取出脚本所有的带有前置连词线 (<code v-pre>-</code>) 的参数。</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">getopts</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> optstring</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> name</span></span></code></pre>\n</div><p>它带有两个参数。第一个参数 <code v-pre>optstring</code> 是字符串，给出脚本所有的连词线参数。比如，某个脚本可以有三个配置项参数 <code v-pre>-l</code>、<code v-pre>-h</code>、<code v-pre>-a</code>，其中只有 <code v-pre>-a</code> 可以带有参数值，而 <code v-pre>-l</code> 和 <code v-pre>-h</code> 是开关参数，那么 <code v-pre>getopts</code> 的第一个参数写成 <code v-pre>lha:</code>，顺序不重要。注意，<code v-pre>a</code> 后面有一个冒号，表示该参数带有参数值，<code v-pre>getopts</code> 规定带有参数值的配置项参数，后面必须带有一个冒号 (<code v-pre>:</code>)。<code v-pre>getopts</code> 的第二个参数 <code v-pre>name</code> 是一个变量名，用来保存当前取到的配置项参数，即 <code v-pre>l</code>、<code v-pre>h</code> 或 <code v-pre>a</code>。</p>\n<p>下面是一个例子。</p>\n<div class=\"language-bash line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">while</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> getopts</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 'lha:'</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> OPTION</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">do</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  case</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">$OPTION</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> in</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">    l</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">      echo</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"linuxconfig\"</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">      ;;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">    h</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">      echo</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"h stands for h\"</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">      ;;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">    a</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">      avalue</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">$OPTARG</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">      echo</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"The value provided is </span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">$OPTARG</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">      ;;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    ?</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">      echo</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"script usage: $(</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">basename</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\"> $0</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">) [-l] [-h] [-a somevalue]\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> >&#x26;2</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">      exit</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 1</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">      ;;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  esac</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">done</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">shift</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"$((</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">$OPTIND</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> - 1))\"</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>上面例子中，<code v-pre>while</code> 循环不断执行 <code v-pre>getopts 'lha:' OPTION</code> 命令，每次执行就会读取一个连词线参数(以及对应的参数值)，然后进入循环体。变量 <code v-pre>OPTION</code> 保存的是，当前处理的那一个连词线参数(即 <code v-pre>l</code>、<code v-pre>h</code> 或 <code v-pre>a</code>)。如果用户输入了没有指定的参数(比如 <code v-pre>-x</code>)，那么 <code v-pre>OPTION</code> 等于 <code v-pre>?</code>。循环体内使用 <code v-pre>case</code> 判断，处理这四种不同的情况。</p>\n<p>如果某个连词线参数带有参数值，比如 <code v-pre>-a foo</code>，那么处理 <code v-pre>a</code> 参数的时候，环境变量 <code v-pre>$OPTARG</code> 保存的就是参数值。</p>\n<p>注意，只要遇到不带连词线的参数，<code v-pre>getopts</code> 就会执行失败，从而退出 <code v-pre>while</code> 循环。比如，<code v-pre>getopts</code> 可以解析 <code v-pre>command -l foo</code>，但不可以解析 <code v-pre>command foo -l</code>。另外，多个连词线参数写在一起的形式，比如 <code v-pre>command -lh</code>，<code v-pre>getopts</code> 也可以正确处理。</p>\n<p>变量 <code v-pre>$OPTIND</code> 在 <code v-pre>getopts</code> 开始执行前是 <code v-pre>1</code>，然后每次执行就会加 <code v-pre>1</code>。等到退出 <code v-pre>while</code> 循环，就意味着连词线参数全部处理完毕。这时，<code v-pre>$OPTIND - 1</code> 就是已经处理的连词线参数个数，使用 <code v-pre>shift</code> 命令将这些参数移除，保证后面的代码可以用 <code v-pre>$1</code>、<code v-pre>$2</code> 等处理命令的主参数。</p>\n<h2 id=\"配置项参数终止符\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#配置项参数终止符\"><span>配置项参数终止符 <code v-pre>--</code></span></a></h2>\n<p>变量当作命令的参数时，有时希望指定变量只能作为实体参数，不能当作配置项参数，这时可以使用配置项参数终止符 <code v-pre>--</code>。</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">myPath</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"~/docs\"</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">ls</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> --</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> $myPath</span></span></code></pre>\n</div><p>上面例子中，<code v-pre>--</code> 强制变量 <code v-pre>$myPath</code> 只能当作实体参数(即路径名)解释。</p>\n<p>如果变量不是路径名，就会报错。</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">$</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> myPath=\"-l\"</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">$</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> ls</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> --</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> $myPath</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">ls:</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 无法访问'-l':</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 没有那个文件或目录</span></span></code></pre>\n</div><p>上面例子中，变量 <code v-pre>myPath</code> 的值为 <code v-pre>-l</code>，不是路径。但是，<code v-pre>--</code> 强制 <code v-pre>$myPath</code> 只能作为路径解释，导致报错“不存在该路径”。</p>\n<h2 id=\"exit-命令\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#exit-命令\"><span>exit 命令</span></a></h2>\n<p><code v-pre>exit</code> 命令用于终止当前脚本的执行，并向 Shell 返回一个退出值。</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">exit</span></span></code></pre>\n</div><p>上面命令中止当前脚本，将最后一条命令的退出状态，作为整个脚本的退出状态。</p>\n<p><code v-pre>exit</code> 命令后面可以跟参数，该参数就是退出状态。</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"># 退出值为0(成功)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">$</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> exit</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 0</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"># 退出值为1(失败)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">$</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> exit</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 1</span></span></code></pre>\n</div><p>退出时，脚本会返回一个退出值。脚本的退出值，<code v-pre>0</code> 表示正常，<code v-pre>1</code> 表示发生错误，<code v-pre>2</code> 表示用法不对，<code v-pre>126</code> 表示不是可执行脚本，<code v-pre>127</code> 表示命令没有发现。如果脚本被信号 <code v-pre>N</code> 终止，则退出值为 <code v-pre>128 + N</code>。简单来说，只要退出值非 0，就认为执行出错。</p>\n<p>下面是一个例子。</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">if</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> [ $(</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">id</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> -u</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">!=</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"0\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> ]; </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">then</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">  echo</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"根用户才能执行当前脚本\"</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">  exit</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 1</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">fi</span></span></code></pre>\n</div><p>上面的例子中，<code v-pre>id -u</code> 命令返回用户的 ID，一旦用户的 ID 不等于 <code v-pre>0</code>(根用户的 ID)，脚本就会退出，并且退出码为 <code v-pre>1</code>，表示运行失败。</p>\n<p><code v-pre>exit</code> 与 <code v-pre>return</code> 命令的差别是，<code v-pre>return</code> 命令是函数的退出，并返回一个值给调用者，脚本依然执行。<code v-pre>exit</code> 是整个脚本的退出，如果在函数之中调用 <code v-pre>exit</code>，则退出函数，并终止脚本执行。</p>\n<h2 id=\"命令执行结果\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#命令执行结果\"><span>命令执行结果</span></a></h2>\n<p>命令执行结束后，会有一个返回值。<code v-pre>0</code> 表示执行成功，非 <code v-pre>0</code> (通常是 <code v-pre>1</code>)表示执行失败。环境变量 <code v-pre>$?</code> 可以读取前一个命令的返回值。</p>\n<p>利用这一点，可以在脚本中对命令执行结果进行判断。</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">cd</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> $some_directory</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">if</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> [ </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">$?</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"0\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> ]; </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">then</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">  rm</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> *</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">else</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">  echo</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"无法切换目录!\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> 1>&#x26;2</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">  exit</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 1</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">fi</span></span></code></pre>\n</div><p>上面例子中，<code v-pre>cd $some_directory</code> 这个命令如果执行成功(返回值等于 <code v-pre>0</code>)，就删除该目录里面的文件，否则退出脚本，整个脚本的返回值变为 <code v-pre>1</code>，表示执行失败。</p>\n<p>由于 <code v-pre>if</code> 可以直接判断命令的执行结果，执行相应的操作，上面的脚本可以改写成下面的样子。</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">if</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> cd</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> $some_directory</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">then</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">  rm</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> *</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">else</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">  echo</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"Could not change directory! Aborting.\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> 1>&#x26;2</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">  exit</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 1</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">fi</span></span></code></pre>\n</div><p>更简洁的写法是利用两个逻辑运算符 <code v-pre>&amp;&amp;</code>(且)和 <code v-pre>||</code>(或)。</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"># 第一步执行成功，才会执行第二步</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">cd</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> $some_directory</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> &#x26;&#x26; </span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">rm</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> *</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"># 第一步执行失败，才会执行第二步</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">cd</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> $some_directory</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> || </span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">exit</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 1</span></span></code></pre>\n</div><h2 id=\"source-命令\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#source-命令\"><span>source 命令</span></a></h2>\n<p><code v-pre>source</code> 命令用于执行一个脚本，通常用于重新加载一个配置文件。</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">source</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> .bashrc</span></span></code></pre>\n</div><p><code v-pre>source</code> 命令最大的特点是在当前 Shell 执行脚本，不像直接执行脚本时，会新建一个子 Shell。所以，<code v-pre>source</code> 命令执行脚本时，不需要 <code v-pre>export</code> 变量。</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">#!/bin/bash</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"># test.sh</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">echo</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> $foo</span></span></code></pre>\n</div><p>上面脚本输出 <code v-pre>$foo</code> 变量的值。</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"># 当前 Shell 新建一个变量 foo</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">$</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> foo=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">1</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"># 打印输出 1</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">$</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> source</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> test.sh</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">1</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"># 打印输出空字符串</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">$</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> bash</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> test.sh</span></span></code></pre>\n</div><p>上面例子中，当前 Shell 的变量 <code v-pre>foo</code> 并没有 <code v-pre>export</code>，所以直接执行无法读取，但是 <code v-pre>source</code> 执行可以读取。</p>\n<p><code v-pre>source</code> 命令的另一个用途，是在脚本内部加载外部库。</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">#!/bin/bash</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">source</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> ./lib.sh</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">function_from_lib</span></span></code></pre>\n</div><p>上面脚本在内部使用 <code v-pre>source</code> 命令加载了一个外部库，然后就可以在脚本里面，使用这个外部库定义的函数。</p>\n<p><code v-pre>source</code> 有一个简写形式，可以使用一个点 (<code v-pre>.</code>) 来表示。</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">.</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> .bashrc</span></span></code></pre>\n</div><h2 id=\"别名-alias-命令\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#别名-alias-命令\"><span>别名，alias 命令</span></a></h2>\n<p><code v-pre>alias</code> 命令用来为一个命令指定别名，这样更便于记忆。下面是 <code v-pre>alias</code> 的格式。</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">alias</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> NAME</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">DEFINITION</span></span></code></pre>\n</div><p>上面命令中，<code v-pre>NAME</code> 是别名的名称，<code v-pre>DEFINITION</code> 是别名对应的原始命令。注意，等号两侧不能有空格，否则会报错。</p>\n<p>一个常见的例子是为 <code v-pre>grep</code> 命令起一个 <code v-pre>search</code> 的别名。</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">alias</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> search</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">grep</span></span></code></pre>\n</div><p><code v-pre>alias</code> 也可以用来为长命令指定一个更短的别名。下面是通过别名定义一个 <code v-pre>today</code> 的命令。</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">$</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> alias</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> today='date +\"%A, %B %-d, %Y\"'</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">$</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> today</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">星期一,</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 一月</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 6,</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 2020</span></span></code></pre>\n</div><p>有时为了防止误删除文件，可以指定 <code v-pre>rm</code> 命令的别名。</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">alias</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> rm</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'rm -i'</span></span></code></pre>\n</div><p>上面命令指定 <code v-pre>rm</code> 命令是 <code v-pre>rm -i</code>，每次删除文件之前，都会让用户确认。</p>\n<p><code v-pre>alias</code> 定义的别名也可以接受参数，参数会直接传入原始命令。</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">$</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> alias</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> echo='echo It says: '</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">$</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> echo</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> hello</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> world</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">It</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> says:</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> hello</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> world</span></span></code></pre>\n</div><p>上面例子中，别名定义了 <code v-pre>echo</code> 命令的前两个参数，等同于修改了 <code v-pre>echo</code> 命令的默认行为。</p>\n<p>指定别名以后，就可以像使用其他命令一样使用别名。一般来说，都会把常用的别名写在 <code v-pre>~/.bashrc</code> 的末尾。另外，只能为命令定义别名，为其他部分(比如很长的路径)定义别名是无效的。</p>\n<p>直接调用 <code v-pre>alias</code> 命令，可以显示所有别名。</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">alias</span></span></code></pre>\n</div><p><code v-pre>unalias</code> 命令可以解除别名。</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">unalias</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> lt</span></span></code></pre>\n</div><h2 id=\"参考链接\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#参考链接\"><span>参考链接</span></a></h2>\n<ul>\n<li><a href=\"https://linuxconfig.org/how-to-use-getopts-to-parse-a-script-options\" target=\"_blank\" rel=\"noopener noreferrer\">How to use getopts to parse a script options</a>, Egidio Docile</li>\n</ul>\n","tagOpen":"<template>","tagClose":"</template>"},"script":null,"scriptSetup":null,"scripts":[],"styles":[],"customBlocks":[]},"content":"\n脚本(script)就是包含一系列命令的一个文本文件。Shell 读取这个文件，依次执行里面的所有命令，就好像这些命令直接输入到命令行一样。所有能够在命令行完成的任务，都能够用脚本完成。\n\n脚本的好处是可以重复使用，也可以指定在特定场合自动调用，比如系统启动或关闭时自动执行脚本。\n\n<!-- more -->\n\n## Shebang 行\n\n脚本的第一行通常是指定解释器，即这个脚本必须通过什么解释器执行。这一行以 `#!` 字符开头，这个字符称为 Shebang，所以这一行就叫做 Shebang 行。\n\n`#!` 后面就是脚本解释器的位置，Bash 脚本的解释器一般是 `/bin/sh` 或 `/bin/bash`。\n\n```bash\n#!/bin/sh\n# 或者\n#!/bin/bash\n```\n\n`#!` 与脚本解释器之间有没有空格，都是可以的。\n\n如果 Bash 解释器不放在目录 `/bin`，脚本就无法执行了。为了保险，可以写成下面这样。\n\n```bash\n#!/usr/bin/env bash\n```\n\n上面命令使用 `env` 命令(这个命令总是在 `/usr/bin` 目录)，返回 Bash 可执行文件的位置。`env` 命令的详细介绍，请看后文。\n\nShebang 行不是必需的，但是建议加上这行。如果缺少该行，就需要手动将脚本传给解释器。举例来说，脚本是 `script.sh`，有 Shebang 行的时候，可以直接调用执行。\n\n```bash\n./script.sh\n```\n\n上面例子中，`script.sh` 是脚本文件名。脚本通常使用 `.sh` 后缀名，不过这不是必需的。\n\n如果没有 Shebang 行，就只能手动将脚本传给解释器来执行。\n\n```bash\n$ /bin/sh ./script.sh\n# 或者\n$ bash ./script.sh\n```\n\n## 执行权限和路径\n\n前面说过，只要指定了 Shebang 行的脚本，可以直接执行。这有一个前提条件，就是脚本需要有执行权限。可以使用下面的命令，赋予脚本执行权限。\n\n```bash\n# 给所有用户执行权限\n$ chmod +x script.sh\n\n# 给所有用户读权限和执行权限\n$ chmod +rx script.sh\n# 或者\n$ chmod 755 script.sh\n\n# 只给脚本拥有者读权限和执行权限\n$ chmod u+rx script.sh\n```\n\n脚本的权限通常设为 `755` (拥有者有所有权限，其他人有读和执行权限)或者 `700`(只有拥有者可以执行)。\n\n除了执行权限，脚本调用时，一般需要指定脚本的路径(比如 `path/script.sh`)。如果将脚本放在环境变量 `$PATH` 指定的目录中，就不需要指定路径了。因为 Bash 会自动到这些目录中，寻找是否存在同名的可执行文件。\n\n建议在主目录新建一个 `~/bin` 子目录，专门存放可执行脚本，然后把 `~/bin` 加入 `$PATH`。\n\n```bash\nexport PATH=$PATH:~/bin\n```\n\n上面命令改变环境变量 `$PATH`，将 `~/bin` 添加到 `$PATH` 的末尾。可以将这一行加到 `~/.bashrc` 文件里面，然后重新加载一次 `.bashrc`，这个配置就可以生效了。\n\n```bash\nsource ~/.bashrc\n```\n\n以后不管在什么目录，直接输入脚本文件名，脚本就会执行。\n\n```bash\nscript.sh\n```\n\n上面命令没有指定脚本路径，因为 `script.sh` 在 `$PATH` 指定的目录中。\n\n## env 命令\n\n`env` 命令总是指向 `/usr/bin/env` 文件，或者说，这个二进制文件总是在目录 `/usr/bin`。\n\n`#!/usr/bin/env NAME` 这个语法的意思是，让 Shell 查找 `$PATH` 环境变量里面第一个匹配的 `NAME`。如果您不知道某个命令的具体路径，或者希望兼容其他用户的机器，这样的写法就很有用。\n\n`/usr/bin/env bash` 的意思就是，返回 `bash` 可执行文件的位置，前提是 `bash` 的路径是在 `$PATH` 里面。其他脚本文件也可以使用这个命令。比如 Node.js 脚本的 Shebang 行，可以写成下面这样。\n\n```bash\n#!/usr/bin/env node\n```\n\n`env` 命令的参数如下。\n\n- `-i`, `--ignore-environment`: 不带环境变量启动。\n- `-u`, `--unset=NAME`: 从环境变量中删除一个变量。\n- `--help`: 显示帮助。\n- `--version`: 输出版本信息。\n\n下面是一个例子，新建一个不带任何环境变量的 Shell。\n\n```bash\nenv -i /bin/sh\n```\n\n## 注释\n\nBash 脚本中，`#` 表示注释，可以放在行首，也可以放在行尾。\n\n```bash\n# 本行是注释\necho 'Hello World!'\n\necho 'Hello World!' # 井号后面的部分也是注释\n```\n\n建议在脚本开头，使用注释说明当前脚本的作用，这样有利于日后的维护。\n\n## 脚本参数\n\n调用脚本的时候，脚本文件名后面可以带有参数。\n\n```bash\nscript.sh word1 word2 word3\n```\n\n上面例子中，`script.sh` 是一个脚本文件，`word1`、`word2` 和 `word3` 是三个参数。\n\n脚本文件内部，可以使用特殊变量，引用这些参数。\n\n- `$0`: 脚本文件名，即 `script.sh`。\n- `$1`~`$9`: 对应脚本的第一个参数到第九个参数。\n- `$#`: 参数的总数。\n- `$@`: 全部的参数，参数之间使用空格分隔。\n- `$*`: 全部的参数，参数之间使用变量 `$IFS` 值的第一个字符分隔，默认为空格，但是可以自定义。\n\n如果脚本的参数多于 9 个，那么第 10 个参数可以用 `${10}` 的形式引用，以此类推。\n\n注意，如果命令是 `command -o foo bar`，那么 `-o` 是 `$1`，`foo` 是 `$2`，`bar` 是 `$3`。\n\n下面是一个脚本内部读取命令行参数的例子。\n\n```bash\n#!/bin/bash\n# script.sh\n\necho \"全部参数: \" $@\necho \"命令行参数数量: \" $#\necho '$0 = ' $0\necho '$1 = ' $1\necho '$2 = ' $2\necho '$3 = ' $3\n```\n\n执行结果如下。\n\n```bash\n$ ./script.sh a b c\n全部参数: a b c\n命令行参数数量: 3\n$0 =  script.sh\n$1 =  a\n$2 =  b\n$3 =  c\n```\n\n用户可以输入任意数量的参数，利用 `for` 循环，可以读取每一个参数。\n\n```bash\n#!/bin/bash\n\nfor i in \"$@\"; do\n  echo $i\ndone\n```\n\n上面例子中，`$@` 返回一个全部参数的列表，然后使用 `for` 循环遍历。\n\n如果多个参数放在双引号里面，视为一个参数。\n\n```bash\n./script.sh \"a b\"\n```\n\n上面例子中，Bash 会认为 `\"a b\"` 是一个参数，`$1` 会返回 `a b`。注意，返回时不包括双引号。\n\n## shift 命令\n\n`shift` 命令可以改变脚本参数，每次执行都会移除脚本当前的第一个参数 (`$1`)，使得后面的参数向前一位，即 `$2` 变成 `$1`、`$3` 变成 `$2`、`$4` 变成 `$3`，以此类推。\n\n`while` 循环结合 `shift` 命令，也可以读取每一个参数。\n\n```bash\n#!/bin/bash\n\necho \"一共输入了 $# 个参数\"\n\nwhile [ \"$1\" != \"\" ]; do\n  echo \"剩下 $# 个参数\"\n  echo \"参数: $1\"\n  shift\ndone\n```\n\n上面例子中，`shift` 命令每次移除当前第一个参数，从而通过 `while` 循环遍历所有参数。\n\n`shift` 命令可以接受一个整数作为参数，指定所要移除的参数个数，默认为 `1`。\n\n```bash\nshift 3\n```\n\n上面的命令移除前三个参数，原来的 `$4` 变成 `$1`。\n\n## getopts 命令\n\n`getopts` 命令用在脚本内部，可以解析复杂的脚本命令行参数，通常与 `while` 循环一起使用，取出脚本所有的带有前置连词线 (`-`) 的参数。\n\n```bash\ngetopts optstring name\n```\n\n它带有两个参数。第一个参数 `optstring` 是字符串，给出脚本所有的连词线参数。比如，某个脚本可以有三个配置项参数 `-l`、`-h`、`-a`，其中只有 `-a` 可以带有参数值，而 `-l` 和 `-h` 是开关参数，那么 `getopts` 的第一个参数写成 `lha:`，顺序不重要。注意，`a` 后面有一个冒号，表示该参数带有参数值，`getopts` 规定带有参数值的配置项参数，后面必须带有一个冒号 (`:`)。`getopts` 的第二个参数 `name` 是一个变量名，用来保存当前取到的配置项参数，即 `l`、`h` 或 `a`。\n\n下面是一个例子。\n\n```bash\nwhile getopts 'lha:' OPTION; do\n  case \"$OPTION\" in\n    l)\n      echo \"linuxconfig\"\n      ;;\n\n    h)\n      echo \"h stands for h\"\n      ;;\n\n    a)\n      avalue=\"$OPTARG\"\n      echo \"The value provided is $OPTARG\"\n      ;;\n    ?)\n      echo \"script usage: $(basename $0) [-l] [-h] [-a somevalue]\" >&2\n      exit 1\n      ;;\n  esac\ndone\nshift \"$(($OPTIND - 1))\"\n```\n\n上面例子中，`while` 循环不断执行 `getopts 'lha:' OPTION` 命令，每次执行就会读取一个连词线参数(以及对应的参数值)，然后进入循环体。变量 `OPTION` 保存的是，当前处理的那一个连词线参数(即 `l`、`h` 或 `a`)。如果用户输入了没有指定的参数(比如 `-x`)，那么 `OPTION` 等于 `?`。循环体内使用 `case` 判断，处理这四种不同的情况。\n\n如果某个连词线参数带有参数值，比如 `-a foo`，那么处理 `a` 参数的时候，环境变量 `$OPTARG` 保存的就是参数值。\n\n注意，只要遇到不带连词线的参数，`getopts` 就会执行失败，从而退出 `while` 循环。比如，`getopts` 可以解析 `command -l foo`，但不可以解析 `command foo -l`。另外，多个连词线参数写在一起的形式，比如 `command -lh`，`getopts` 也可以正确处理。\n\n变量 `$OPTIND` 在 `getopts` 开始执行前是 `1`，然后每次执行就会加 `1`。等到退出 `while` 循环，就意味着连词线参数全部处理完毕。这时，`$OPTIND - 1` 就是已经处理的连词线参数个数，使用 `shift` 命令将这些参数移除，保证后面的代码可以用 `$1`、`$2` 等处理命令的主参数。\n\n## 配置项参数终止符 `--`\n\n变量当作命令的参数时，有时希望指定变量只能作为实体参数，不能当作配置项参数，这时可以使用配置项参数终止符 `--`。\n\n```bash\nmyPath=\"~/docs\"\nls -- $myPath\n```\n\n上面例子中，`--` 强制变量 `$myPath` 只能当作实体参数(即路径名)解释。\n\n如果变量不是路径名，就会报错。\n\n```bash\n$ myPath=\"-l\"\n$ ls -- $myPath\nls: 无法访问'-l': 没有那个文件或目录\n```\n\n上面例子中，变量 `myPath` 的值为 `-l`，不是路径。但是，`--` 强制 `$myPath` 只能作为路径解释，导致报错“不存在该路径”。\n\n## exit 命令\n\n`exit` 命令用于终止当前脚本的执行，并向 Shell 返回一个退出值。\n\n```bash\nexit\n```\n\n上面命令中止当前脚本，将最后一条命令的退出状态，作为整个脚本的退出状态。\n\n`exit` 命令后面可以跟参数，该参数就是退出状态。\n\n```bash\n# 退出值为0(成功)\n$ exit 0\n\n# 退出值为1(失败)\n$ exit 1\n```\n\n退出时，脚本会返回一个退出值。脚本的退出值，`0` 表示正常，`1` 表示发生错误，`2` 表示用法不对，`126` 表示不是可执行脚本，`127` 表示命令没有发现。如果脚本被信号 `N` 终止，则退出值为 `128 + N`。简单来说，只要退出值非 0，就认为执行出错。\n\n下面是一个例子。\n\n```bash\nif [ $(id -u) != \"0\" ]; then\n  echo \"根用户才能执行当前脚本\"\n  exit 1\nfi\n```\n\n上面的例子中，`id -u` 命令返回用户的 ID，一旦用户的 ID 不等于 `0`(根用户的 ID)，脚本就会退出，并且退出码为 `1`，表示运行失败。\n\n`exit` 与 `return` 命令的差别是，`return` 命令是函数的退出，并返回一个值给调用者，脚本依然执行。`exit` 是整个脚本的退出，如果在函数之中调用 `exit`，则退出函数，并终止脚本执行。\n\n## 命令执行结果\n\n命令执行结束后，会有一个返回值。`0` 表示执行成功，非 `0` (通常是 `1`)表示执行失败。环境变量 `$?` 可以读取前一个命令的返回值。\n\n利用这一点，可以在脚本中对命令执行结果进行判断。\n\n```bash\ncd $some_directory\nif [ \"$?\" = \"0\" ]; then\n  rm *\nelse\n  echo \"无法切换目录!\" 1>&2\n  exit 1\nfi\n```\n\n上面例子中，`cd $some_directory` 这个命令如果执行成功(返回值等于 `0`)，就删除该目录里面的文件，否则退出脚本，整个脚本的返回值变为 `1`，表示执行失败。\n\n由于 `if` 可以直接判断命令的执行结果，执行相应的操作，上面的脚本可以改写成下面的样子。\n\n```bash\nif cd $some_directory; then\n  rm *\nelse\n  echo \"Could not change directory! Aborting.\" 1>&2\n  exit 1\nfi\n```\n\n更简洁的写法是利用两个逻辑运算符 `&&`(且)和 `||`(或)。\n\n```bash\n# 第一步执行成功，才会执行第二步\ncd $some_directory && rm *\n\n# 第一步执行失败，才会执行第二步\ncd $some_directory || exit 1\n```\n\n## source 命令\n\n`source` 命令用于执行一个脚本，通常用于重新加载一个配置文件。\n\n```bash\nsource .bashrc\n```\n\n`source` 命令最大的特点是在当前 Shell 执行脚本，不像直接执行脚本时，会新建一个子 Shell。所以，`source` 命令执行脚本时，不需要 `export` 变量。\n\n```bash\n#!/bin/bash\n# test.sh\necho $foo\n```\n\n上面脚本输出 `$foo` 变量的值。\n\n```bash\n# 当前 Shell 新建一个变量 foo\n$ foo=1\n\n# 打印输出 1\n$ source test.sh\n1\n\n# 打印输出空字符串\n$ bash test.sh\n```\n\n上面例子中，当前 Shell 的变量 `foo` 并没有 `export`，所以直接执行无法读取，但是 `source` 执行可以读取。\n\n`source` 命令的另一个用途，是在脚本内部加载外部库。\n\n```bash\n#!/bin/bash\n\nsource ./lib.sh\n\nfunction_from_lib\n```\n\n上面脚本在内部使用 `source` 命令加载了一个外部库，然后就可以在脚本里面，使用这个外部库定义的函数。\n\n`source` 有一个简写形式，可以使用一个点 (`.`) 来表示。\n\n```bash\n. .bashrc\n```\n\n## 别名，alias 命令\n\n`alias` 命令用来为一个命令指定别名，这样更便于记忆。下面是 `alias` 的格式。\n\n```bash\nalias NAME=DEFINITION\n```\n\n上面命令中，`NAME` 是别名的名称，`DEFINITION` 是别名对应的原始命令。注意，等号两侧不能有空格，否则会报错。\n\n一个常见的例子是为 `grep` 命令起一个 `search` 的别名。\n\n```bash\nalias search=grep\n```\n\n`alias` 也可以用来为长命令指定一个更短的别名。下面是通过别名定义一个 `today` 的命令。\n\n```bash\n$ alias today='date +\"%A, %B %-d, %Y\"'\n$ today\n星期一, 一月 6, 2020\n```\n\n有时为了防止误删除文件，可以指定 `rm` 命令的别名。\n\n```bash\nalias rm='rm -i'\n```\n\n上面命令指定 `rm` 命令是 `rm -i`，每次删除文件之前，都会让用户确认。\n\n`alias` 定义的别名也可以接受参数，参数会直接传入原始命令。\n\n```bash\n$ alias echo='echo It says: '\n$ echo hello world\nIt says: hello world\n```\n\n上面例子中，别名定义了 `echo` 命令的前两个参数，等同于修改了 `echo` 命令的默认行为。\n\n指定别名以后，就可以像使用其他命令一样使用别名。一般来说，都会把常用的别名写在 `~/.bashrc` 的末尾。另外，只能为命令定义别名，为其他部分(比如很长的路径)定义别名是无效的。\n\n直接调用 `alias` 命令，可以显示所有别名。\n\n```bash\nalias\n```\n\n`unalias` 命令可以解除别名。\n\n```bash\nunalias lt\n```\n\n## 参考链接\n\n- [How to use getopts to parse a script options](https://linuxconfig.org/how-to-use-getopts-to-parse-a-script-options), Egidio Docile\n","excerpt":"","title":"","headers":[{"level":2,"title":"Shebang 行","slug":"shebang-行","link":"#shebang-行","children":[]},{"level":2,"title":"执行权限和路径","slug":"执行权限和路径","link":"#执行权限和路径","children":[]},{"level":2,"title":"env 命令","slug":"env-命令","link":"#env-命令","children":[]},{"level":2,"title":"注释","slug":"注释","link":"#注释","children":[]},{"level":2,"title":"脚本参数","slug":"脚本参数","link":"#脚本参数","children":[]},{"level":2,"title":"shift 命令","slug":"shift-命令","link":"#shift-命令","children":[]},{"level":2,"title":"getopts 命令","slug":"getopts-命令","link":"#getopts-命令","children":[]},{"level":2,"title":"配置项参数终止符 --","slug":"配置项参数终止符","link":"#配置项参数终止符","children":[]},{"level":2,"title":"exit 命令","slug":"exit-命令","link":"#exit-命令","children":[]},{"level":2,"title":"命令执行结果","slug":"命令执行结果","link":"#命令执行结果","children":[]},{"level":2,"title":"source 命令","slug":"source-命令","link":"#source-命令","children":[]},{"level":2,"title":"别名，alias 命令","slug":"别名-alias-命令","link":"#别名-alias-命令","children":[]},{"level":2,"title":"参考链接","slug":"参考链接","link":"#参考链接","children":[]}]}}
