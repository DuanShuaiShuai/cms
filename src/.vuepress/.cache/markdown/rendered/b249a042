{"content":"<p>目前体验评分共有 27 条规则，共分为三类: 性能、体验、最佳实践，满足规则要求得分(100 分)，否则不得分(0 分)，最后根据各规则权重和公式计算出总得分。</p>\n<!-- more -->\n<figure><img src=\"https://res.wx.qq.com/wxdoc/dist/assets/img/audits_formula.ba03ca01.png\" alt=\"audits_formula\" tabindex=\"0\" loading=\"lazy\"><figcaption>audits_formula</figcaption></figure>\n<p>权重为 0 的规则，表示该规则不参与评分，仅作为提示项。开发者可在开发者工具中可以点击“忽略”。</p>\n<p>各规则的得分条件也可能会随小程序的版本更新有一定的调整。</p>\n<h2 id=\"权重表\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#权重表\"><span>权重表</span></a></h2>\n<table>\n<thead>\n<tr>\n<th>分类</th>\n<th>规则</th>\n<th>权重</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>性能</td>\n<td>脚本执行时间</td>\n<td>7</td>\n</tr>\n<tr>\n<td></td>\n<td>首屏时间</td>\n<td>6</td>\n</tr>\n<tr>\n<td></td>\n<td>渲染时间</td>\n<td>6</td>\n</tr>\n<tr>\n<td></td>\n<td>setData 调用频率</td>\n<td>6</td>\n</tr>\n<tr>\n<td></td>\n<td>setData 数据大小</td>\n<td>6</td>\n</tr>\n<tr>\n<td></td>\n<td>WXML 节点数</td>\n<td>6</td>\n</tr>\n<tr>\n<td></td>\n<td>请求耗时</td>\n<td>5</td>\n</tr>\n<tr>\n<td></td>\n<td>网络请求数</td>\n<td>5</td>\n</tr>\n<tr>\n<td></td>\n<td>图片请求数</td>\n<td>5</td>\n</tr>\n<tr>\n<td></td>\n<td>图片缓存</td>\n<td>4</td>\n</tr>\n<tr>\n<td></td>\n<td>图片大小</td>\n<td>4</td>\n</tr>\n<tr>\n<td></td>\n<td>避免 setData 数据冗余</td>\n<td>3</td>\n</tr>\n<tr>\n<td></td>\n<td>网络请求缓存</td>\n<td>2</td>\n</tr>\n<tr>\n<td>体验</td>\n<td>开启惯性滚动</td>\n<td>8</td>\n</tr>\n<tr>\n<td></td>\n<td>避免使用:active 伪类来实现点击态</td>\n<td>8</td>\n</tr>\n<tr>\n<td></td>\n<td>保持图片大小比例</td>\n<td>4</td>\n</tr>\n<tr>\n<td></td>\n<td>可点击元素的响应区域</td>\n<td>3</td>\n</tr>\n<tr>\n<td></td>\n<td>iPhone X 兼容</td>\n<td>3</td>\n</tr>\n<tr>\n<td></td>\n<td>合理的颜色搭配</td>\n<td>0</td>\n</tr>\n<tr>\n<td>最佳实践</td>\n<td>避免 JS 异常</td>\n<td>3</td>\n</tr>\n<tr>\n<td></td>\n<td>避免网络请求异常</td>\n<td>3</td>\n</tr>\n<tr>\n<td></td>\n<td>废弃接口</td>\n<td>2</td>\n</tr>\n<tr>\n<td></td>\n<td>使用 HTTPS</td>\n<td>1</td>\n</tr>\n<tr>\n<td></td>\n<td>最低基础库版本</td>\n<td>0</td>\n</tr>\n<tr>\n<td></td>\n<td>移除不可访问到的页面</td>\n<td>0</td>\n</tr>\n<tr>\n<td></td>\n<td>WXSS 使用率</td>\n<td>0</td>\n</tr>\n<tr>\n<td></td>\n<td>及时回收定时器</td>\n<td>0</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"性能\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#性能\"><span>性能</span></a></h2>\n<ol>\n<li>\n<p>首屏时间</p>\n<p>首屏时间是指用户从打开小程序看到第一屏主要内容的时间，首屏时间太长会导致用户长时间看到的都是白屏，影响使用体验。</p>\n<p>优化首屏时间，可以分为以下几种情况:</p>\n<ol>\n<li>首屏渲染的内容较多，需要集合多份数据进行渲染。这种情况需要开发者把内容分优先级，把优先级高的内容做优先展示，缩短白屏时间；</li>\n<li>首屏内容依赖的数据从服务端请求的时间太长。开发者需要从服务端侧具体分析服务端数据返回的时间长的原因；</li>\n<li>一次性渲染数据太大或依赖的计算过于复杂。减少渲染的数据量、优化渲染相关数据的算法可以解决这类问题。</li>\n</ol>\n<p>得分条件: <strong>首屏时间不超过 5 秒</strong></p>\n</li>\n<li>\n<p>渲染时间</p>\n<p>渲染时间指的是首次渲染或因数据变化带来的页面结构变化的渲染花费的时间。</p>\n<p>渲染界面的耗时过长会让用户觉得卡顿，体验较差，出现这一情况时，需要校验下是否同时渲染的区域太大(例如列表过长)，或渲染依赖的计算是否过于复杂。</p>\n<p>得分条件: 渲<strong>染时间不超过 500ms</strong></p>\n</li>\n<li>\n<p>脚本执行时间</p>\n<p>脚本执行时间是指 JS 脚本在一次同步执行中消耗的时间，比如生命周期回调、事件处理函数的同步执行时间。</p>\n<p>执行脚本的耗时过长会让用户觉得卡顿，体验较差，出现这一情况时，需要确认并优化脚本的逻辑</p>\n<p>得分条件: <strong>一个执行周期内脚本运行时间不超过 1 秒</strong></p>\n</li>\n<li>\n<p><code v-pre>setData</code> 调用频率</p>\n<p><code v-pre>setData</code> 接口的调用涉及逻辑层与渲染层间的线程通信，通信过于频繁可能导致处理队列阻塞，界面渲染不及时而导致卡顿，应避免无用的频繁调用。</p>\n<p>得分条件: <strong>每秒调用 setData 的次数不超过 20 次</strong></p>\n</li>\n<li>\n<p><code v-pre>setData</code> 数据大小</p>\n<p>由于小程序运行逻辑线程与渲染线程之上，<code v-pre>setData</code> 的调用会把数据从逻辑层传到渲染层，数据太大会增加通信时间。</p>\n<p>得分条件: <strong><code v-pre>setData</code> 的数据在 JSON.stringify 后不超过 256KB</strong></p>\n</li>\n<li>\n<p>避免 <code v-pre>setData</code> 数据冗余</p>\n<p><code v-pre>setData</code> 操作会引起框架处理一些渲染界面相关的工作，一个未绑定的变量意味着与界面渲染无关，传入 set`Data 会造成不必要的性能消耗。</p>\n<p>得分条件: <strong><code v-pre>setData</code> 传入的所有数据都在模板渲染中有相关依赖</strong></p>\n</li>\n<li>\n<p>WXML 节点数</p>\n<p>建议一个页面使用少于 1000 个 WXML 节点，节点树深度少于 30 层，子节点数不大于 60 个。一个太大的 WXML 节点树会增加内存的使用，样式重排时间也会更长，影响体验。</p>\n<p>得分条件: <strong>页面 WXML 节点少于 1000 个，节点树深度少于 30 层，子节点数不大于 60 个</strong></p>\n</li>\n<li>\n<p>图片缓存</p>\n<p>开启 HTTP 缓存控制后，下一次加载同样的图片，会直接从缓存读取，大大提升加载速度。</p>\n<p>得分条件: <strong>所有图片均开启 HTTP 缓存</strong></p>\n</li>\n<li>\n<p>图片大小</p>\n<p>图片太大会增加下载时间和内存的消耗，应根据显示区域大小合理控制图片大小。</p>\n<p>得分条件: <strong>图片宽高都不超过实际显示宽高的 3 倍</strong></p>\n</li>\n<li>\n<p>请求耗时</p>\n<p>请求的耗时太长会让用户一直等待甚至离开，应当优化好服务器处理时间、减小回包大小，让请求快速响应。</p>\n<p>得分条件: <strong>所有网络请求都在 1 秒内返回结果</strong></p>\n</li>\n<li>\n<p>网络请求数</p>\n<p>短时间内发起太多请求会触发小程序并行请求数量的限制，同时太多请求也可能导致加载慢等问题，应合理控制请求数量，甚至做请求的合并等。</p>\n<p>得分条件: <strong>每秒通过 wx.request 发起的请求数不超过 10 个</strong></p>\n</li>\n<li>\n<p>图片请求数</p>\n<p>短时间内发起太多图片请求会触发浏览器并行加载的限制，可能导致图片加载慢，用户一直处理等待。应该合理控制数量，可考虑使用雪碧图技术或在屏幕外的图片使用懒加载。</p>\n<p>得分条件: <strong>每秒发起的图片请求数不超过 20 个</strong></p>\n</li>\n<li>\n<p>网络请求缓存</p>\n<p>发起网络请求总会让用户等待，可能造成不好的体验，应尽量避免多余的请求，比如对同样的请求进行缓存</p>\n<p>得分条件: <strong>3 分钟以内同一个 URL 请求不出现两次回包大于 128KB 且一模一样的内容</strong></p>\n</li>\n</ol>\n<h2 id=\"体验\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#体验\"><span>体验</span></a></h2>\n<ol>\n<li>\n<p>开启惯性滚动</p>\n<p>惯性滚动会使滚动比较顺畅，在安卓下默认有惯性滚动，而在 iOS 下需要额外设置 <code v-pre>-webkit-overflow-scrolling: touch</code> 的样式；</p>\n<p>得分条件: <strong>wxss 中带有 <code v-pre>overflow: scroll</code> 的元素，在 iOS 下需要设置 <code v-pre>-webkit-overflow-scrolling: touch</code> 样式</strong></p>\n</li>\n<li>\n<p>避免使用 <code v-pre>:active</code> 伪类来实现点击态</p>\n<p>使用 CSS <code v-pre>:active</code> 伪类来实现点击态，很容易触发，并且滚动或滑动时点击态不会消失，体验较差。建议使用小程序内置组件的 <code v-pre>'hover-class'</code> 属性来实现</p>\n<p>得分条件: 不使用 <code v-pre>:active</code> 伪类，并使用 <code v-pre>hover-class</code> 替换 <code v-pre>:active</code></p>\n</li>\n<li>\n<p>保持图片大小比例</p>\n<p>图片若没有按原图宽高比例显示，可能导致图片歪曲，不美观，甚至导致用户识别困难。可根据情况设置 image 组件的 <code v-pre>mode</code> 属性，以保持原图宽高比。</p>\n<p>得分条件: <strong>显示的高/宽与原图的高/宽不超过 15%</strong></p>\n</li>\n<li>\n<p>可点击元素的响应区域</p>\n<p>我们应该合理地设置好可点击元素的响应区域大小，如果过小会导致用户很难点中，体验很差。</p>\n<p>得分条件: <strong>可点击元素的宽高都不小于 20px</strong></p>\n</li>\n<li>\n<p>iPhone X 兼容</p>\n<p>对于 <code v-pre>position: fixed</code> 的可交互组件，如果渲染在 iPhone X 的安全区域外，容易误触 Home Indicator，应当把可交互的部分都渲染到安全区域内。</p>\n<p>建议使用以下 wxss 进行兼容</p>\n<div class=\"language-css\" data-highlighter=\"shiki\" data-ext=\"css\" data-title=\"css\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">padding-bottom</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">: constant(</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">safe-area-inset-bottom</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">padding-bottom</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">: env(</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">safe-area-inset-bottom</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span></code></pre>\n</div><p>得分条件: <code v-pre>position: fixed</code> 的可交互组件渲染在安全区域内</p>\n</li>\n<li>\n<p>合理的颜色搭配</p>\n<p>文字颜色与背景色需要搭配得当，适宜的颜色对比度可以让用户更好地阅读，提升小程序的用户体验。</p>\n<p>由于颜色搭配的计算方法较为复杂，目前算法还在不断优化中。因此该指标仅作为评分的提醒项，不计入总分中。</p>\n<p>判断标准:</p>\n<ol>\n<li>\n<p>对于较大字体(font-size &gt;= 24px，或同时满足 font-size &gt;= 19px 与 font-weight &gt;= 700)，文字颜色和背景颜色的对比度不小于 3</p>\n</li>\n<li>\n<p>其他字体，文字颜色和背景颜色的对比度不小于 4.5</p>\n</li>\n</ol>\n</li>\n</ol>\n","env":{"base":"/","filePath":"/Users/carson/Desktop/Mister-Hope.github.io-main/src/code/mini-app/tools/score.md","filePathRelative":"code/mini-app/tools/score.md","frontmatter":{"date":"2020-10-09T00:00:00.000Z","title":"评分方法","icon":"rank","category":"小程序"},"sfcBlocks":{"template":{"type":"template","content":"<template><p>目前体验评分共有 27 条规则，共分为三类: 性能、体验、最佳实践，满足规则要求得分(100 分)，否则不得分(0 分)，最后根据各规则权重和公式计算出总得分。</p>\n<!-- more -->\n<figure><img src=\"https://res.wx.qq.com/wxdoc/dist/assets/img/audits_formula.ba03ca01.png\" alt=\"audits_formula\" tabindex=\"0\" loading=\"lazy\"><figcaption>audits_formula</figcaption></figure>\n<p>权重为 0 的规则，表示该规则不参与评分，仅作为提示项。开发者可在开发者工具中可以点击“忽略”。</p>\n<p>各规则的得分条件也可能会随小程序的版本更新有一定的调整。</p>\n<h2 id=\"权重表\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#权重表\"><span>权重表</span></a></h2>\n<table>\n<thead>\n<tr>\n<th>分类</th>\n<th>规则</th>\n<th>权重</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>性能</td>\n<td>脚本执行时间</td>\n<td>7</td>\n</tr>\n<tr>\n<td></td>\n<td>首屏时间</td>\n<td>6</td>\n</tr>\n<tr>\n<td></td>\n<td>渲染时间</td>\n<td>6</td>\n</tr>\n<tr>\n<td></td>\n<td>setData 调用频率</td>\n<td>6</td>\n</tr>\n<tr>\n<td></td>\n<td>setData 数据大小</td>\n<td>6</td>\n</tr>\n<tr>\n<td></td>\n<td>WXML 节点数</td>\n<td>6</td>\n</tr>\n<tr>\n<td></td>\n<td>请求耗时</td>\n<td>5</td>\n</tr>\n<tr>\n<td></td>\n<td>网络请求数</td>\n<td>5</td>\n</tr>\n<tr>\n<td></td>\n<td>图片请求数</td>\n<td>5</td>\n</tr>\n<tr>\n<td></td>\n<td>图片缓存</td>\n<td>4</td>\n</tr>\n<tr>\n<td></td>\n<td>图片大小</td>\n<td>4</td>\n</tr>\n<tr>\n<td></td>\n<td>避免 setData 数据冗余</td>\n<td>3</td>\n</tr>\n<tr>\n<td></td>\n<td>网络请求缓存</td>\n<td>2</td>\n</tr>\n<tr>\n<td>体验</td>\n<td>开启惯性滚动</td>\n<td>8</td>\n</tr>\n<tr>\n<td></td>\n<td>避免使用:active 伪类来实现点击态</td>\n<td>8</td>\n</tr>\n<tr>\n<td></td>\n<td>保持图片大小比例</td>\n<td>4</td>\n</tr>\n<tr>\n<td></td>\n<td>可点击元素的响应区域</td>\n<td>3</td>\n</tr>\n<tr>\n<td></td>\n<td>iPhone X 兼容</td>\n<td>3</td>\n</tr>\n<tr>\n<td></td>\n<td>合理的颜色搭配</td>\n<td>0</td>\n</tr>\n<tr>\n<td>最佳实践</td>\n<td>避免 JS 异常</td>\n<td>3</td>\n</tr>\n<tr>\n<td></td>\n<td>避免网络请求异常</td>\n<td>3</td>\n</tr>\n<tr>\n<td></td>\n<td>废弃接口</td>\n<td>2</td>\n</tr>\n<tr>\n<td></td>\n<td>使用 HTTPS</td>\n<td>1</td>\n</tr>\n<tr>\n<td></td>\n<td>最低基础库版本</td>\n<td>0</td>\n</tr>\n<tr>\n<td></td>\n<td>移除不可访问到的页面</td>\n<td>0</td>\n</tr>\n<tr>\n<td></td>\n<td>WXSS 使用率</td>\n<td>0</td>\n</tr>\n<tr>\n<td></td>\n<td>及时回收定时器</td>\n<td>0</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"性能\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#性能\"><span>性能</span></a></h2>\n<ol>\n<li>\n<p>首屏时间</p>\n<p>首屏时间是指用户从打开小程序看到第一屏主要内容的时间，首屏时间太长会导致用户长时间看到的都是白屏，影响使用体验。</p>\n<p>优化首屏时间，可以分为以下几种情况:</p>\n<ol>\n<li>首屏渲染的内容较多，需要集合多份数据进行渲染。这种情况需要开发者把内容分优先级，把优先级高的内容做优先展示，缩短白屏时间；</li>\n<li>首屏内容依赖的数据从服务端请求的时间太长。开发者需要从服务端侧具体分析服务端数据返回的时间长的原因；</li>\n<li>一次性渲染数据太大或依赖的计算过于复杂。减少渲染的数据量、优化渲染相关数据的算法可以解决这类问题。</li>\n</ol>\n<p>得分条件: <strong>首屏时间不超过 5 秒</strong></p>\n</li>\n<li>\n<p>渲染时间</p>\n<p>渲染时间指的是首次渲染或因数据变化带来的页面结构变化的渲染花费的时间。</p>\n<p>渲染界面的耗时过长会让用户觉得卡顿，体验较差，出现这一情况时，需要校验下是否同时渲染的区域太大(例如列表过长)，或渲染依赖的计算是否过于复杂。</p>\n<p>得分条件: 渲<strong>染时间不超过 500ms</strong></p>\n</li>\n<li>\n<p>脚本执行时间</p>\n<p>脚本执行时间是指 JS 脚本在一次同步执行中消耗的时间，比如生命周期回调、事件处理函数的同步执行时间。</p>\n<p>执行脚本的耗时过长会让用户觉得卡顿，体验较差，出现这一情况时，需要确认并优化脚本的逻辑</p>\n<p>得分条件: <strong>一个执行周期内脚本运行时间不超过 1 秒</strong></p>\n</li>\n<li>\n<p><code v-pre>setData</code> 调用频率</p>\n<p><code v-pre>setData</code> 接口的调用涉及逻辑层与渲染层间的线程通信，通信过于频繁可能导致处理队列阻塞，界面渲染不及时而导致卡顿，应避免无用的频繁调用。</p>\n<p>得分条件: <strong>每秒调用 setData 的次数不超过 20 次</strong></p>\n</li>\n<li>\n<p><code v-pre>setData</code> 数据大小</p>\n<p>由于小程序运行逻辑线程与渲染线程之上，<code v-pre>setData</code> 的调用会把数据从逻辑层传到渲染层，数据太大会增加通信时间。</p>\n<p>得分条件: <strong><code v-pre>setData</code> 的数据在 JSON.stringify 后不超过 256KB</strong></p>\n</li>\n<li>\n<p>避免 <code v-pre>setData</code> 数据冗余</p>\n<p><code v-pre>setData</code> 操作会引起框架处理一些渲染界面相关的工作，一个未绑定的变量意味着与界面渲染无关，传入 set`Data 会造成不必要的性能消耗。</p>\n<p>得分条件: <strong><code v-pre>setData</code> 传入的所有数据都在模板渲染中有相关依赖</strong></p>\n</li>\n<li>\n<p>WXML 节点数</p>\n<p>建议一个页面使用少于 1000 个 WXML 节点，节点树深度少于 30 层，子节点数不大于 60 个。一个太大的 WXML 节点树会增加内存的使用，样式重排时间也会更长，影响体验。</p>\n<p>得分条件: <strong>页面 WXML 节点少于 1000 个，节点树深度少于 30 层，子节点数不大于 60 个</strong></p>\n</li>\n<li>\n<p>图片缓存</p>\n<p>开启 HTTP 缓存控制后，下一次加载同样的图片，会直接从缓存读取，大大提升加载速度。</p>\n<p>得分条件: <strong>所有图片均开启 HTTP 缓存</strong></p>\n</li>\n<li>\n<p>图片大小</p>\n<p>图片太大会增加下载时间和内存的消耗，应根据显示区域大小合理控制图片大小。</p>\n<p>得分条件: <strong>图片宽高都不超过实际显示宽高的 3 倍</strong></p>\n</li>\n<li>\n<p>请求耗时</p>\n<p>请求的耗时太长会让用户一直等待甚至离开，应当优化好服务器处理时间、减小回包大小，让请求快速响应。</p>\n<p>得分条件: <strong>所有网络请求都在 1 秒内返回结果</strong></p>\n</li>\n<li>\n<p>网络请求数</p>\n<p>短时间内发起太多请求会触发小程序并行请求数量的限制，同时太多请求也可能导致加载慢等问题，应合理控制请求数量，甚至做请求的合并等。</p>\n<p>得分条件: <strong>每秒通过 wx.request 发起的请求数不超过 10 个</strong></p>\n</li>\n<li>\n<p>图片请求数</p>\n<p>短时间内发起太多图片请求会触发浏览器并行加载的限制，可能导致图片加载慢，用户一直处理等待。应该合理控制数量，可考虑使用雪碧图技术或在屏幕外的图片使用懒加载。</p>\n<p>得分条件: <strong>每秒发起的图片请求数不超过 20 个</strong></p>\n</li>\n<li>\n<p>网络请求缓存</p>\n<p>发起网络请求总会让用户等待，可能造成不好的体验，应尽量避免多余的请求，比如对同样的请求进行缓存</p>\n<p>得分条件: <strong>3 分钟以内同一个 URL 请求不出现两次回包大于 128KB 且一模一样的内容</strong></p>\n</li>\n</ol>\n<h2 id=\"体验\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#体验\"><span>体验</span></a></h2>\n<ol>\n<li>\n<p>开启惯性滚动</p>\n<p>惯性滚动会使滚动比较顺畅，在安卓下默认有惯性滚动，而在 iOS 下需要额外设置 <code v-pre>-webkit-overflow-scrolling: touch</code> 的样式；</p>\n<p>得分条件: <strong>wxss 中带有 <code v-pre>overflow: scroll</code> 的元素，在 iOS 下需要设置 <code v-pre>-webkit-overflow-scrolling: touch</code> 样式</strong></p>\n</li>\n<li>\n<p>避免使用 <code v-pre>:active</code> 伪类来实现点击态</p>\n<p>使用 CSS <code v-pre>:active</code> 伪类来实现点击态，很容易触发，并且滚动或滑动时点击态不会消失，体验较差。建议使用小程序内置组件的 <code v-pre>'hover-class'</code> 属性来实现</p>\n<p>得分条件: 不使用 <code v-pre>:active</code> 伪类，并使用 <code v-pre>hover-class</code> 替换 <code v-pre>:active</code></p>\n</li>\n<li>\n<p>保持图片大小比例</p>\n<p>图片若没有按原图宽高比例显示，可能导致图片歪曲，不美观，甚至导致用户识别困难。可根据情况设置 image 组件的 <code v-pre>mode</code> 属性，以保持原图宽高比。</p>\n<p>得分条件: <strong>显示的高/宽与原图的高/宽不超过 15%</strong></p>\n</li>\n<li>\n<p>可点击元素的响应区域</p>\n<p>我们应该合理地设置好可点击元素的响应区域大小，如果过小会导致用户很难点中，体验很差。</p>\n<p>得分条件: <strong>可点击元素的宽高都不小于 20px</strong></p>\n</li>\n<li>\n<p>iPhone X 兼容</p>\n<p>对于 <code v-pre>position: fixed</code> 的可交互组件，如果渲染在 iPhone X 的安全区域外，容易误触 Home Indicator，应当把可交互的部分都渲染到安全区域内。</p>\n<p>建议使用以下 wxss 进行兼容</p>\n<div class=\"language-css\" data-highlighter=\"shiki\" data-ext=\"css\" data-title=\"css\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">padding-bottom</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">: constant(</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">safe-area-inset-bottom</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">padding-bottom</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">: env(</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">safe-area-inset-bottom</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span></code></pre>\n</div><p>得分条件: <code v-pre>position: fixed</code> 的可交互组件渲染在安全区域内</p>\n</li>\n<li>\n<p>合理的颜色搭配</p>\n<p>文字颜色与背景色需要搭配得当，适宜的颜色对比度可以让用户更好地阅读，提升小程序的用户体验。</p>\n<p>由于颜色搭配的计算方法较为复杂，目前算法还在不断优化中。因此该指标仅作为评分的提醒项，不计入总分中。</p>\n<p>判断标准:</p>\n<ol>\n<li>\n<p>对于较大字体(font-size &gt;= 24px，或同时满足 font-size &gt;= 19px 与 font-weight &gt;= 700)，文字颜色和背景颜色的对比度不小于 3</p>\n</li>\n<li>\n<p>其他字体，文字颜色和背景颜色的对比度不小于 4.5</p>\n</li>\n</ol>\n</li>\n</ol>\n</template>","contentStripped":"<p>目前体验评分共有 27 条规则，共分为三类: 性能、体验、最佳实践，满足规则要求得分(100 分)，否则不得分(0 分)，最后根据各规则权重和公式计算出总得分。</p>\n<!-- more -->\n<figure><img src=\"https://res.wx.qq.com/wxdoc/dist/assets/img/audits_formula.ba03ca01.png\" alt=\"audits_formula\" tabindex=\"0\" loading=\"lazy\"><figcaption>audits_formula</figcaption></figure>\n<p>权重为 0 的规则，表示该规则不参与评分，仅作为提示项。开发者可在开发者工具中可以点击“忽略”。</p>\n<p>各规则的得分条件也可能会随小程序的版本更新有一定的调整。</p>\n<h2 id=\"权重表\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#权重表\"><span>权重表</span></a></h2>\n<table>\n<thead>\n<tr>\n<th>分类</th>\n<th>规则</th>\n<th>权重</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>性能</td>\n<td>脚本执行时间</td>\n<td>7</td>\n</tr>\n<tr>\n<td></td>\n<td>首屏时间</td>\n<td>6</td>\n</tr>\n<tr>\n<td></td>\n<td>渲染时间</td>\n<td>6</td>\n</tr>\n<tr>\n<td></td>\n<td>setData 调用频率</td>\n<td>6</td>\n</tr>\n<tr>\n<td></td>\n<td>setData 数据大小</td>\n<td>6</td>\n</tr>\n<tr>\n<td></td>\n<td>WXML 节点数</td>\n<td>6</td>\n</tr>\n<tr>\n<td></td>\n<td>请求耗时</td>\n<td>5</td>\n</tr>\n<tr>\n<td></td>\n<td>网络请求数</td>\n<td>5</td>\n</tr>\n<tr>\n<td></td>\n<td>图片请求数</td>\n<td>5</td>\n</tr>\n<tr>\n<td></td>\n<td>图片缓存</td>\n<td>4</td>\n</tr>\n<tr>\n<td></td>\n<td>图片大小</td>\n<td>4</td>\n</tr>\n<tr>\n<td></td>\n<td>避免 setData 数据冗余</td>\n<td>3</td>\n</tr>\n<tr>\n<td></td>\n<td>网络请求缓存</td>\n<td>2</td>\n</tr>\n<tr>\n<td>体验</td>\n<td>开启惯性滚动</td>\n<td>8</td>\n</tr>\n<tr>\n<td></td>\n<td>避免使用:active 伪类来实现点击态</td>\n<td>8</td>\n</tr>\n<tr>\n<td></td>\n<td>保持图片大小比例</td>\n<td>4</td>\n</tr>\n<tr>\n<td></td>\n<td>可点击元素的响应区域</td>\n<td>3</td>\n</tr>\n<tr>\n<td></td>\n<td>iPhone X 兼容</td>\n<td>3</td>\n</tr>\n<tr>\n<td></td>\n<td>合理的颜色搭配</td>\n<td>0</td>\n</tr>\n<tr>\n<td>最佳实践</td>\n<td>避免 JS 异常</td>\n<td>3</td>\n</tr>\n<tr>\n<td></td>\n<td>避免网络请求异常</td>\n<td>3</td>\n</tr>\n<tr>\n<td></td>\n<td>废弃接口</td>\n<td>2</td>\n</tr>\n<tr>\n<td></td>\n<td>使用 HTTPS</td>\n<td>1</td>\n</tr>\n<tr>\n<td></td>\n<td>最低基础库版本</td>\n<td>0</td>\n</tr>\n<tr>\n<td></td>\n<td>移除不可访问到的页面</td>\n<td>0</td>\n</tr>\n<tr>\n<td></td>\n<td>WXSS 使用率</td>\n<td>0</td>\n</tr>\n<tr>\n<td></td>\n<td>及时回收定时器</td>\n<td>0</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"性能\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#性能\"><span>性能</span></a></h2>\n<ol>\n<li>\n<p>首屏时间</p>\n<p>首屏时间是指用户从打开小程序看到第一屏主要内容的时间，首屏时间太长会导致用户长时间看到的都是白屏，影响使用体验。</p>\n<p>优化首屏时间，可以分为以下几种情况:</p>\n<ol>\n<li>首屏渲染的内容较多，需要集合多份数据进行渲染。这种情况需要开发者把内容分优先级，把优先级高的内容做优先展示，缩短白屏时间；</li>\n<li>首屏内容依赖的数据从服务端请求的时间太长。开发者需要从服务端侧具体分析服务端数据返回的时间长的原因；</li>\n<li>一次性渲染数据太大或依赖的计算过于复杂。减少渲染的数据量、优化渲染相关数据的算法可以解决这类问题。</li>\n</ol>\n<p>得分条件: <strong>首屏时间不超过 5 秒</strong></p>\n</li>\n<li>\n<p>渲染时间</p>\n<p>渲染时间指的是首次渲染或因数据变化带来的页面结构变化的渲染花费的时间。</p>\n<p>渲染界面的耗时过长会让用户觉得卡顿，体验较差，出现这一情况时，需要校验下是否同时渲染的区域太大(例如列表过长)，或渲染依赖的计算是否过于复杂。</p>\n<p>得分条件: 渲<strong>染时间不超过 500ms</strong></p>\n</li>\n<li>\n<p>脚本执行时间</p>\n<p>脚本执行时间是指 JS 脚本在一次同步执行中消耗的时间，比如生命周期回调、事件处理函数的同步执行时间。</p>\n<p>执行脚本的耗时过长会让用户觉得卡顿，体验较差，出现这一情况时，需要确认并优化脚本的逻辑</p>\n<p>得分条件: <strong>一个执行周期内脚本运行时间不超过 1 秒</strong></p>\n</li>\n<li>\n<p><code v-pre>setData</code> 调用频率</p>\n<p><code v-pre>setData</code> 接口的调用涉及逻辑层与渲染层间的线程通信，通信过于频繁可能导致处理队列阻塞，界面渲染不及时而导致卡顿，应避免无用的频繁调用。</p>\n<p>得分条件: <strong>每秒调用 setData 的次数不超过 20 次</strong></p>\n</li>\n<li>\n<p><code v-pre>setData</code> 数据大小</p>\n<p>由于小程序运行逻辑线程与渲染线程之上，<code v-pre>setData</code> 的调用会把数据从逻辑层传到渲染层，数据太大会增加通信时间。</p>\n<p>得分条件: <strong><code v-pre>setData</code> 的数据在 JSON.stringify 后不超过 256KB</strong></p>\n</li>\n<li>\n<p>避免 <code v-pre>setData</code> 数据冗余</p>\n<p><code v-pre>setData</code> 操作会引起框架处理一些渲染界面相关的工作，一个未绑定的变量意味着与界面渲染无关，传入 set`Data 会造成不必要的性能消耗。</p>\n<p>得分条件: <strong><code v-pre>setData</code> 传入的所有数据都在模板渲染中有相关依赖</strong></p>\n</li>\n<li>\n<p>WXML 节点数</p>\n<p>建议一个页面使用少于 1000 个 WXML 节点，节点树深度少于 30 层，子节点数不大于 60 个。一个太大的 WXML 节点树会增加内存的使用，样式重排时间也会更长，影响体验。</p>\n<p>得分条件: <strong>页面 WXML 节点少于 1000 个，节点树深度少于 30 层，子节点数不大于 60 个</strong></p>\n</li>\n<li>\n<p>图片缓存</p>\n<p>开启 HTTP 缓存控制后，下一次加载同样的图片，会直接从缓存读取，大大提升加载速度。</p>\n<p>得分条件: <strong>所有图片均开启 HTTP 缓存</strong></p>\n</li>\n<li>\n<p>图片大小</p>\n<p>图片太大会增加下载时间和内存的消耗，应根据显示区域大小合理控制图片大小。</p>\n<p>得分条件: <strong>图片宽高都不超过实际显示宽高的 3 倍</strong></p>\n</li>\n<li>\n<p>请求耗时</p>\n<p>请求的耗时太长会让用户一直等待甚至离开，应当优化好服务器处理时间、减小回包大小，让请求快速响应。</p>\n<p>得分条件: <strong>所有网络请求都在 1 秒内返回结果</strong></p>\n</li>\n<li>\n<p>网络请求数</p>\n<p>短时间内发起太多请求会触发小程序并行请求数量的限制，同时太多请求也可能导致加载慢等问题，应合理控制请求数量，甚至做请求的合并等。</p>\n<p>得分条件: <strong>每秒通过 wx.request 发起的请求数不超过 10 个</strong></p>\n</li>\n<li>\n<p>图片请求数</p>\n<p>短时间内发起太多图片请求会触发浏览器并行加载的限制，可能导致图片加载慢，用户一直处理等待。应该合理控制数量，可考虑使用雪碧图技术或在屏幕外的图片使用懒加载。</p>\n<p>得分条件: <strong>每秒发起的图片请求数不超过 20 个</strong></p>\n</li>\n<li>\n<p>网络请求缓存</p>\n<p>发起网络请求总会让用户等待，可能造成不好的体验，应尽量避免多余的请求，比如对同样的请求进行缓存</p>\n<p>得分条件: <strong>3 分钟以内同一个 URL 请求不出现两次回包大于 128KB 且一模一样的内容</strong></p>\n</li>\n</ol>\n<h2 id=\"体验\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#体验\"><span>体验</span></a></h2>\n<ol>\n<li>\n<p>开启惯性滚动</p>\n<p>惯性滚动会使滚动比较顺畅，在安卓下默认有惯性滚动，而在 iOS 下需要额外设置 <code v-pre>-webkit-overflow-scrolling: touch</code> 的样式；</p>\n<p>得分条件: <strong>wxss 中带有 <code v-pre>overflow: scroll</code> 的元素，在 iOS 下需要设置 <code v-pre>-webkit-overflow-scrolling: touch</code> 样式</strong></p>\n</li>\n<li>\n<p>避免使用 <code v-pre>:active</code> 伪类来实现点击态</p>\n<p>使用 CSS <code v-pre>:active</code> 伪类来实现点击态，很容易触发，并且滚动或滑动时点击态不会消失，体验较差。建议使用小程序内置组件的 <code v-pre>'hover-class'</code> 属性来实现</p>\n<p>得分条件: 不使用 <code v-pre>:active</code> 伪类，并使用 <code v-pre>hover-class</code> 替换 <code v-pre>:active</code></p>\n</li>\n<li>\n<p>保持图片大小比例</p>\n<p>图片若没有按原图宽高比例显示，可能导致图片歪曲，不美观，甚至导致用户识别困难。可根据情况设置 image 组件的 <code v-pre>mode</code> 属性，以保持原图宽高比。</p>\n<p>得分条件: <strong>显示的高/宽与原图的高/宽不超过 15%</strong></p>\n</li>\n<li>\n<p>可点击元素的响应区域</p>\n<p>我们应该合理地设置好可点击元素的响应区域大小，如果过小会导致用户很难点中，体验很差。</p>\n<p>得分条件: <strong>可点击元素的宽高都不小于 20px</strong></p>\n</li>\n<li>\n<p>iPhone X 兼容</p>\n<p>对于 <code v-pre>position: fixed</code> 的可交互组件，如果渲染在 iPhone X 的安全区域外，容易误触 Home Indicator，应当把可交互的部分都渲染到安全区域内。</p>\n<p>建议使用以下 wxss 进行兼容</p>\n<div class=\"language-css\" data-highlighter=\"shiki\" data-ext=\"css\" data-title=\"css\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">padding-bottom</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">: constant(</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">safe-area-inset-bottom</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">padding-bottom</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">: env(</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">safe-area-inset-bottom</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span></code></pre>\n</div><p>得分条件: <code v-pre>position: fixed</code> 的可交互组件渲染在安全区域内</p>\n</li>\n<li>\n<p>合理的颜色搭配</p>\n<p>文字颜色与背景色需要搭配得当，适宜的颜色对比度可以让用户更好地阅读，提升小程序的用户体验。</p>\n<p>由于颜色搭配的计算方法较为复杂，目前算法还在不断优化中。因此该指标仅作为评分的提醒项，不计入总分中。</p>\n<p>判断标准:</p>\n<ol>\n<li>\n<p>对于较大字体(font-size &gt;= 24px，或同时满足 font-size &gt;= 19px 与 font-weight &gt;= 700)，文字颜色和背景颜色的对比度不小于 3</p>\n</li>\n<li>\n<p>其他字体，文字颜色和背景颜色的对比度不小于 4.5</p>\n</li>\n</ol>\n</li>\n</ol>\n","tagOpen":"<template>","tagClose":"</template>"},"script":null,"scriptSetup":null,"scripts":[],"styles":[],"customBlocks":[]},"content":"\n目前体验评分共有 27 条规则，共分为三类: 性能、体验、最佳实践，满足规则要求得分(100 分)，否则不得分(0 分)，最后根据各规则权重和公式计算出总得分。\n\n<!-- more -->\n\n![audits_formula](https://res.wx.qq.com/wxdoc/dist/assets/img/audits_formula.ba03ca01.png)\n\n权重为 0 的规则，表示该规则不参与评分，仅作为提示项。开发者可在开发者工具中可以点击“忽略”。\n\n各规则的得分条件也可能会随小程序的版本更新有一定的调整。\n\n## 权重表\n\n| 分类     | 规则                             | 权重 |\n| -------- | -------------------------------- | ---- |\n| 性能     | 脚本执行时间                     | 7    |\n|          | 首屏时间                         | 6    |\n|          | 渲染时间                         | 6    |\n|          | setData 调用频率                 | 6    |\n|          | setData 数据大小                 | 6    |\n|          | WXML 节点数                      | 6    |\n|          | 请求耗时                         | 5    |\n|          | 网络请求数                       | 5    |\n|          | 图片请求数                       | 5    |\n|          | 图片缓存                         | 4    |\n|          | 图片大小                         | 4    |\n|          | 避免 setData 数据冗余            | 3    |\n|          | 网络请求缓存                     | 2    |\n| 体验     | 开启惯性滚动                     | 8    |\n|          | 避免使用:active 伪类来实现点击态 | 8    |\n|          | 保持图片大小比例                 | 4    |\n|          | 可点击元素的响应区域             | 3    |\n|          | iPhone X 兼容                    | 3    |\n|          | 合理的颜色搭配                   | 0    |\n| 最佳实践 | 避免 JS 异常                     | 3    |\n|          | 避免网络请求异常                 | 3    |\n|          | 废弃接口                         | 2    |\n|          | 使用 HTTPS                       | 1    |\n|          | 最低基础库版本                   | 0    |\n|          | 移除不可访问到的页面             | 0    |\n|          | WXSS 使用率                      | 0    |\n|          | 及时回收定时器                   | 0    |\n\n## 性能\n\n1. 首屏时间\n\n   首屏时间是指用户从打开小程序看到第一屏主要内容的时间，首屏时间太长会导致用户长时间看到的都是白屏，影响使用体验。\n\n   优化首屏时间，可以分为以下几种情况:\n\n   1. 首屏渲染的内容较多，需要集合多份数据进行渲染。这种情况需要开发者把内容分优先级，把优先级高的内容做优先展示，缩短白屏时间；\n   1. 首屏内容依赖的数据从服务端请求的时间太长。开发者需要从服务端侧具体分析服务端数据返回的时间长的原因；\n   1. 一次性渲染数据太大或依赖的计算过于复杂。减少渲染的数据量、优化渲染相关数据的算法可以解决这类问题。\n\n   得分条件: **首屏时间不超过 5 秒**\n\n1. 渲染时间\n\n   渲染时间指的是首次渲染或因数据变化带来的页面结构变化的渲染花费的时间。\n\n   渲染界面的耗时过长会让用户觉得卡顿，体验较差，出现这一情况时，需要校验下是否同时渲染的区域太大(例如列表过长)，或渲染依赖的计算是否过于复杂。\n\n   得分条件: 渲**染时间不超过 500ms**\n\n1. 脚本执行时间\n\n   脚本执行时间是指 JS 脚本在一次同步执行中消耗的时间，比如生命周期回调、事件处理函数的同步执行时间。\n\n   执行脚本的耗时过长会让用户觉得卡顿，体验较差，出现这一情况时，需要确认并优化脚本的逻辑\n\n   得分条件: **一个执行周期内脚本运行时间不超过 1 秒**\n\n1. `setData` 调用频率\n\n   `setData` 接口的调用涉及逻辑层与渲染层间的线程通信，通信过于频繁可能导致处理队列阻塞，界面渲染不及时而导致卡顿，应避免无用的频繁调用。\n\n   得分条件: **每秒调用 setData 的次数不超过 20 次**\n\n1. `setData` 数据大小\n\n   由于小程序运行逻辑线程与渲染线程之上，`setData` 的调用会把数据从逻辑层传到渲染层，数据太大会增加通信时间。\n\n   得分条件: **`setData` 的数据在 JSON.stringify 后不超过 256KB**\n\n1. 避免 `setData` 数据冗余\n\n   `setData` 操作会引起框架处理一些渲染界面相关的工作，一个未绑定的变量意味着与界面渲染无关，传入 set`Data 会造成不必要的性能消耗。\n\n   得分条件: **`setData` 传入的所有数据都在模板渲染中有相关依赖**\n\n1. WXML 节点数\n\n   建议一个页面使用少于 1000 个 WXML 节点，节点树深度少于 30 层，子节点数不大于 60 个。一个太大的 WXML 节点树会增加内存的使用，样式重排时间也会更长，影响体验。\n\n   得分条件: **页面 WXML 节点少于 1000 个，节点树深度少于 30 层，子节点数不大于 60 个**\n\n1. 图片缓存\n\n   开启 HTTP 缓存控制后，下一次加载同样的图片，会直接从缓存读取，大大提升加载速度。\n\n   得分条件: **所有图片均开启 HTTP 缓存**\n\n1. 图片大小\n\n   图片太大会增加下载时间和内存的消耗，应根据显示区域大小合理控制图片大小。\n\n   得分条件: **图片宽高都不超过实际显示宽高的 3 倍**\n\n1. 请求耗时\n\n   请求的耗时太长会让用户一直等待甚至离开，应当优化好服务器处理时间、减小回包大小，让请求快速响应。\n\n   得分条件: **所有网络请求都在 1 秒内返回结果**\n\n1. 网络请求数\n\n   短时间内发起太多请求会触发小程序并行请求数量的限制，同时太多请求也可能导致加载慢等问题，应合理控制请求数量，甚至做请求的合并等。\n\n   得分条件: **每秒通过 wx.request 发起的请求数不超过 10 个**\n\n1. 图片请求数\n\n   短时间内发起太多图片请求会触发浏览器并行加载的限制，可能导致图片加载慢，用户一直处理等待。应该合理控制数量，可考虑使用雪碧图技术或在屏幕外的图片使用懒加载。\n\n   得分条件: **每秒发起的图片请求数不超过 20 个**\n\n1. 网络请求缓存\n\n   发起网络请求总会让用户等待，可能造成不好的体验，应尽量避免多余的请求，比如对同样的请求进行缓存\n\n   得分条件: **3 分钟以内同一个 URL 请求不出现两次回包大于 128KB 且一模一样的内容**\n\n## 体验\n\n1. 开启惯性滚动\n\n   惯性滚动会使滚动比较顺畅，在安卓下默认有惯性滚动，而在 iOS 下需要额外设置 `-webkit-overflow-scrolling: touch` 的样式；\n\n   得分条件: **wxss 中带有 `overflow: scroll` 的元素，在 iOS 下需要设置 `-webkit-overflow-scrolling: touch` 样式**\n\n1. 避免使用 `:active` 伪类来实现点击态\n\n   使用 CSS `:active` 伪类来实现点击态，很容易触发，并且滚动或滑动时点击态不会消失，体验较差。建议使用小程序内置组件的 `'hover-class'` 属性来实现\n\n   得分条件: 不使用 `:active` 伪类，并使用 `hover-class` 替换 `:active`\n\n1. 保持图片大小比例\n\n   图片若没有按原图宽高比例显示，可能导致图片歪曲，不美观，甚至导致用户识别困难。可根据情况设置 image 组件的 `mode` 属性，以保持原图宽高比。\n\n   得分条件: **显示的高/宽与原图的高/宽不超过 15%**\n\n1. 可点击元素的响应区域\n\n   我们应该合理地设置好可点击元素的响应区域大小，如果过小会导致用户很难点中，体验很差。\n\n   得分条件: **可点击元素的宽高都不小于 20px**\n\n1. iPhone X 兼容\n\n   对于 `position: fixed` 的可交互组件，如果渲染在 iPhone X 的安全区域外，容易误触 Home Indicator，应当把可交互的部分都渲染到安全区域内。\n\n   建议使用以下 wxss 进行兼容\n\n   ```css\n   padding-bottom: constant(safe-area-inset-bottom);\n   padding-bottom: env(safe-area-inset-bottom);\n   ```\n\n   得分条件: `position: fixed` 的可交互组件渲染在安全区域内\n\n1. 合理的颜色搭配\n\n   文字颜色与背景色需要搭配得当，适宜的颜色对比度可以让用户更好地阅读，提升小程序的用户体验。\n\n   由于颜色搭配的计算方法较为复杂，目前算法还在不断优化中。因此该指标仅作为评分的提醒项，不计入总分中。\n\n   判断标准:\n\n   1. 对于较大字体(font-size >= 24px，或同时满足 font-size >= 19px 与 font-weight >= 700)，文字颜色和背景颜色的对比度不小于 3\n\n   1. 其他字体，文字颜色和背景颜色的对比度不小于 4.5\n","excerpt":"","title":"","headers":[{"level":2,"title":"权重表","slug":"权重表","link":"#权重表","children":[]},{"level":2,"title":"性能","slug":"性能","link":"#性能","children":[]},{"level":2,"title":"体验","slug":"体验","link":"#体验","children":[]}]}}
