{"content":"<p>此处记录了<a href=\"http://www.typescriptlang.org/docs/handbook/basic-types.html\" target=\"_blank\" rel=\"noopener noreferrer\">官方手册</a>(<a href=\"https://zhongsp.gitbooks.io/typescript-handbook/content/\" target=\"_blank\" rel=\"noopener noreferrer\">中文版</a>)中包含，但是本书未涉及的概念。</p>\n<!-- more -->\n<p>我认为它们是一些不重要或者不属于 TypeScript 的概念，所以这里只给出一个简单的释义，详细内容可以点击链接深入理解。</p>\n<ul>\n<li><a href=\"http://www.typescriptlang.org/docs/handbook/basic-types.html#never\" target=\"_blank\" rel=\"noopener noreferrer\">Never</a>(<a href=\"https://zhongsp.gitbooks.io/typescript-handbook/content/doc/handbook/Basic%20Types.html#never\" target=\"_blank\" rel=\"noopener noreferrer\">中文版</a>): 永远不存在值的类型，一般用于错误处理函数</li>\n<li><a href=\"http://www.typescriptlang.org/docs/handbook/variable-declarations.html\" target=\"_blank\" rel=\"noopener noreferrer\">Variable Declarations</a>(<a href=\"https://zhongsp.gitbooks.io/typescript-handbook/content/doc/handbook/Variable%20Declarations.html\" target=\"_blank\" rel=\"noopener noreferrer\">中文版</a>): 使用 <code v-pre>let</code> 和 <code v-pre>const</code> 替代 <code v-pre>var</code>，这是 <a href=\"http://es6.ruanyifeng.com/#docs/let\" target=\"_blank\" rel=\"noopener noreferrer\">ES6 的知识</a></li>\n<li><a href=\"https://zhongsp.gitbooks.io/typescript-handbook/content/doc/handbook/Functions.html#this\" target=\"_blank\" rel=\"noopener noreferrer\"><code v-pre>this</code></a>: 箭头函数的运用，这是 <a href=\"http://es6.ruanyifeng.com/#docs/function\" target=\"_blank\" rel=\"noopener noreferrer\">ES6 的知识</a></li>\n<li><a href=\"http://www.typescriptlang.org/docs/handbook/generics.html#using-class-types-in-generics\" target=\"_blank\" rel=\"noopener noreferrer\">Using Class Types in Generics</a>(<a href=\"https://zhongsp.gitbooks.io/typescript-handbook/content/doc/handbook/Generics.html#%E5%9C%A8%E6%B3%9B%E5%9E%8B%E9%87%8C%E4%BD%BF%E7%94%A8%E7%B1%BB%E7%B1%BB%E5%9E%8B\" target=\"_blank\" rel=\"noopener noreferrer\">中文版</a>): 创建工厂函数时，需要引用构造函数的类类型</li>\n<li><a href=\"http://www.typescriptlang.org/docs/handbook/type-inference.html#best-common-type\" target=\"_blank\" rel=\"noopener noreferrer\">Best common type</a>(<a href=\"https://zhongsp.gitbooks.io/typescript-handbook/content/doc/handbook/Type%20Inference.html#%E6%9C%80%E4%BD%B3%E9%80%9A%E7%94%A8%E7%B1%BB%E5%9E%8B\" target=\"_blank\" rel=\"noopener noreferrer\">中文版</a>): 数组的类型推论</li>\n<li><a href=\"http://www.typescriptlang.org/docs/handbook/type-inference.html#contextual-type\" target=\"_blank\" rel=\"noopener noreferrer\">Contextual Type</a>(<a href=\"https://zhongsp.gitbooks.io/typescript-handbook/content/doc/handbook/Type%20Inference.html#%E4%B8%8A%E4%B8%8B%E6%96%87%E7%B1%BB%E5%9E%8B\" target=\"_blank\" rel=\"noopener noreferrer\">中文版</a>): 函数输入的类型推论</li>\n<li><a href=\"http://www.typescriptlang.org/docs/handbook/type-compatibility.html\" target=\"_blank\" rel=\"noopener noreferrer\">Type Compatibility</a>(<a href=\"https://zhongsp.gitbooks.io/typescript-handbook/content/doc/handbook/Type%20Compatibility.html\" target=\"_blank\" rel=\"noopener noreferrer\">中文版</a>): 允许不严格符合类型，只需要在一定规则下兼容即可</li>\n<li><a href=\"http://www.typescriptlang.org/docs/handbook/advanced-types.html#intersection-types\" target=\"_blank\" rel=\"noopener noreferrer\">Advanced Types</a>(<a href=\"https://zhongsp.gitbooks.io/typescript-handbook/content/doc/handbook/Advanced%20Types.html#%E4%BA%A4%E5%8F%89%E7%B1%BB%E5%9E%8B(intersection-types)\" target=\"_blank\" rel=\"noopener noreferrer\">中文版</a>): 使用 <code v-pre>&amp;</code> 将多种类型的共有部分叠加成一种类型</li>\n<li><a href=\"http://www.typescriptlang.org/docs/handbook/advanced-types.html#type-guards-and-differentiating-types\" target=\"_blank\" rel=\"noopener noreferrer\">Type Guards and Differentiating Types</a>(<a href=\"https://zhongsp.gitbooks.io/typescript-handbook/content/doc/handbook/Advanced%20Types.html#%E7%B1%BB%E5%9E%8B%E4%BF%9D%E6%8A%A4%E4%B8%8E%E5%8C%BA%E5%88%86%E7%B1%BB%E5%9E%8B(type-guards-and-differentiating-types)\" target=\"_blank\" rel=\"noopener noreferrer\">中文版</a>): 联合类型在一些情况下被识别为特定的类型</li>\n<li><a href=\"http://www.typescriptlang.org/docs/handbook/advanced-types.html#discriminated-unions\" target=\"_blank\" rel=\"noopener noreferrer\">Discriminated Unions</a>(<a href=\"https://zhongsp.gitbooks.io/typescript-handbook/content/doc/handbook/Advanced%20Types.html#%E5%8F%AF%E8%BE%A8%E8%AF%86%E8%81%94%E5%90%88(discriminated-unions)\" target=\"_blank\" rel=\"noopener noreferrer\">中文版</a>): 使用 <code v-pre>|</code> 联合多个接口的时候，通过一个共有的属性形成可辨识联合</li>\n<li><a href=\"http://www.typescriptlang.org/docs/handbook/advanced-types.html#polymorphic-this-types\" target=\"_blank\" rel=\"noopener noreferrer\">Polymorphic <code v-pre>this</code> types</a>(<a href=\"https://zhongsp.gitbooks.io/typescript-handbook/content/doc/handbook/Advanced%20Types.html#%E5%A4%9A%E6%80%81%E7%9A%84this%E7%B1%BB%E5%9E%8B\" target=\"_blank\" rel=\"noopener noreferrer\">中文版</a>): 父类的某个方法返回 <code v-pre>this</code>，当子类继承父类后，子类的实例调用此方法，返回的 <code v-pre>this</code> 能够被 TypeScript 正确的识别为子类的实例。</li>\n<li><a href=\"http://www.typescriptlang.org/docs/handbook/symbols.html\" target=\"_blank\" rel=\"noopener noreferrer\">Symbols</a>(<a href=\"https://zhongsp.gitbooks.io/typescript-handbook/content/doc/handbook/Symbols.html\" target=\"_blank\" rel=\"noopener noreferrer\">中文版</a>): 新原生类型，这是 <a href=\"http://es6.ruanyifeng.com/#docs/symbol\" target=\"_blank\" rel=\"noopener noreferrer\">ES6 的知识</a></li>\n<li><a href=\"http://www.typescriptlang.org/docs/handbook/iterators-and-generators.html\" target=\"_blank\" rel=\"noopener noreferrer\">Iterators and Generators</a>(<a href=\"https://zhongsp.gitbooks.io/typescript-handbook/content/doc/handbook/Iterators%20and%20Generators.html\" target=\"_blank\" rel=\"noopener noreferrer\">中文版</a>): 迭代器，这是 <a href=\"http://es6.ruanyifeng.com/#docs/iterator\" target=\"_blank\" rel=\"noopener noreferrer\">ES6 的知识</a></li>\n<li><a href=\"http://www.typescriptlang.org/docs/handbook/namespaces.html\" target=\"_blank\" rel=\"noopener noreferrer\">Namespaces</a>(<a href=\"https://zhongsp.gitbooks.io/typescript-handbook/content/doc/handbook/Namespaces.html\" target=\"_blank\" rel=\"noopener noreferrer\">中文版</a>): 避免全局污染，现在已被 <a href=\"http://es6.ruanyifeng.com/#docs/module\" target=\"_blank\" rel=\"noopener noreferrer\">ES6 Module</a> 替代</li>\n<li><a href=\"http://www.typescriptlang.org/docs/handbook/decorators.html\" target=\"_blank\" rel=\"noopener noreferrer\">Decorators</a>(<a href=\"https://zhongsp.gitbooks.io/typescript-handbook/content/doc/handbook/Decorators.html\" target=\"_blank\" rel=\"noopener noreferrer\">中文版</a>): 修饰器，这是 <a href=\"http://es6.ruanyifeng.com/#docs/decorator\" target=\"_blank\" rel=\"noopener noreferrer\">ES2016 的一个提案</a></li>\n<li><a href=\"http://www.typescriptlang.org/docs/handbook/mixins.html\" target=\"_blank\" rel=\"noopener noreferrer\">Mixins</a>(<a href=\"https://zhongsp.gitbooks.io/typescript-handbook/content/doc/handbook/Mixins.html\" target=\"_blank\" rel=\"noopener noreferrer\">中文版</a>): 一种编程模式，与 TypeScript 没有直接关系，可以参考 <a href=\"http://es6.ruanyifeng.com/#docs/class#Mixin%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%AE%9E%E7%8E%B0\" target=\"_blank\" rel=\"noopener noreferrer\">ES6 中 Mixin 模式的实现</a></li>\n</ul>\n","env":{"base":"/","filePath":"/Users/carson/Desktop/work/cms/src/code/language/typescript/advanced/further-reading.md","filePathRelative":"code/language/typescript/advanced/further-reading.md","frontmatter":{"date":"2020-05-04T00:00:00.000Z","title":"扩展阅读","icon":"quote","category":"TypeScript"},"sfcBlocks":{"template":{"type":"template","content":"<template><p>此处记录了<a href=\"http://www.typescriptlang.org/docs/handbook/basic-types.html\" target=\"_blank\" rel=\"noopener noreferrer\">官方手册</a>(<a href=\"https://zhongsp.gitbooks.io/typescript-handbook/content/\" target=\"_blank\" rel=\"noopener noreferrer\">中文版</a>)中包含，但是本书未涉及的概念。</p>\n<!-- more -->\n<p>我认为它们是一些不重要或者不属于 TypeScript 的概念，所以这里只给出一个简单的释义，详细内容可以点击链接深入理解。</p>\n<ul>\n<li><a href=\"http://www.typescriptlang.org/docs/handbook/basic-types.html#never\" target=\"_blank\" rel=\"noopener noreferrer\">Never</a>(<a href=\"https://zhongsp.gitbooks.io/typescript-handbook/content/doc/handbook/Basic%20Types.html#never\" target=\"_blank\" rel=\"noopener noreferrer\">中文版</a>): 永远不存在值的类型，一般用于错误处理函数</li>\n<li><a href=\"http://www.typescriptlang.org/docs/handbook/variable-declarations.html\" target=\"_blank\" rel=\"noopener noreferrer\">Variable Declarations</a>(<a href=\"https://zhongsp.gitbooks.io/typescript-handbook/content/doc/handbook/Variable%20Declarations.html\" target=\"_blank\" rel=\"noopener noreferrer\">中文版</a>): 使用 <code v-pre>let</code> 和 <code v-pre>const</code> 替代 <code v-pre>var</code>，这是 <a href=\"http://es6.ruanyifeng.com/#docs/let\" target=\"_blank\" rel=\"noopener noreferrer\">ES6 的知识</a></li>\n<li><a href=\"https://zhongsp.gitbooks.io/typescript-handbook/content/doc/handbook/Functions.html#this\" target=\"_blank\" rel=\"noopener noreferrer\"><code v-pre>this</code></a>: 箭头函数的运用，这是 <a href=\"http://es6.ruanyifeng.com/#docs/function\" target=\"_blank\" rel=\"noopener noreferrer\">ES6 的知识</a></li>\n<li><a href=\"http://www.typescriptlang.org/docs/handbook/generics.html#using-class-types-in-generics\" target=\"_blank\" rel=\"noopener noreferrer\">Using Class Types in Generics</a>(<a href=\"https://zhongsp.gitbooks.io/typescript-handbook/content/doc/handbook/Generics.html#%E5%9C%A8%E6%B3%9B%E5%9E%8B%E9%87%8C%E4%BD%BF%E7%94%A8%E7%B1%BB%E7%B1%BB%E5%9E%8B\" target=\"_blank\" rel=\"noopener noreferrer\">中文版</a>): 创建工厂函数时，需要引用构造函数的类类型</li>\n<li><a href=\"http://www.typescriptlang.org/docs/handbook/type-inference.html#best-common-type\" target=\"_blank\" rel=\"noopener noreferrer\">Best common type</a>(<a href=\"https://zhongsp.gitbooks.io/typescript-handbook/content/doc/handbook/Type%20Inference.html#%E6%9C%80%E4%BD%B3%E9%80%9A%E7%94%A8%E7%B1%BB%E5%9E%8B\" target=\"_blank\" rel=\"noopener noreferrer\">中文版</a>): 数组的类型推论</li>\n<li><a href=\"http://www.typescriptlang.org/docs/handbook/type-inference.html#contextual-type\" target=\"_blank\" rel=\"noopener noreferrer\">Contextual Type</a>(<a href=\"https://zhongsp.gitbooks.io/typescript-handbook/content/doc/handbook/Type%20Inference.html#%E4%B8%8A%E4%B8%8B%E6%96%87%E7%B1%BB%E5%9E%8B\" target=\"_blank\" rel=\"noopener noreferrer\">中文版</a>): 函数输入的类型推论</li>\n<li><a href=\"http://www.typescriptlang.org/docs/handbook/type-compatibility.html\" target=\"_blank\" rel=\"noopener noreferrer\">Type Compatibility</a>(<a href=\"https://zhongsp.gitbooks.io/typescript-handbook/content/doc/handbook/Type%20Compatibility.html\" target=\"_blank\" rel=\"noopener noreferrer\">中文版</a>): 允许不严格符合类型，只需要在一定规则下兼容即可</li>\n<li><a href=\"http://www.typescriptlang.org/docs/handbook/advanced-types.html#intersection-types\" target=\"_blank\" rel=\"noopener noreferrer\">Advanced Types</a>(<a href=\"https://zhongsp.gitbooks.io/typescript-handbook/content/doc/handbook/Advanced%20Types.html#%E4%BA%A4%E5%8F%89%E7%B1%BB%E5%9E%8B(intersection-types)\" target=\"_blank\" rel=\"noopener noreferrer\">中文版</a>): 使用 <code v-pre>&amp;</code> 将多种类型的共有部分叠加成一种类型</li>\n<li><a href=\"http://www.typescriptlang.org/docs/handbook/advanced-types.html#type-guards-and-differentiating-types\" target=\"_blank\" rel=\"noopener noreferrer\">Type Guards and Differentiating Types</a>(<a href=\"https://zhongsp.gitbooks.io/typescript-handbook/content/doc/handbook/Advanced%20Types.html#%E7%B1%BB%E5%9E%8B%E4%BF%9D%E6%8A%A4%E4%B8%8E%E5%8C%BA%E5%88%86%E7%B1%BB%E5%9E%8B(type-guards-and-differentiating-types)\" target=\"_blank\" rel=\"noopener noreferrer\">中文版</a>): 联合类型在一些情况下被识别为特定的类型</li>\n<li><a href=\"http://www.typescriptlang.org/docs/handbook/advanced-types.html#discriminated-unions\" target=\"_blank\" rel=\"noopener noreferrer\">Discriminated Unions</a>(<a href=\"https://zhongsp.gitbooks.io/typescript-handbook/content/doc/handbook/Advanced%20Types.html#%E5%8F%AF%E8%BE%A8%E8%AF%86%E8%81%94%E5%90%88(discriminated-unions)\" target=\"_blank\" rel=\"noopener noreferrer\">中文版</a>): 使用 <code v-pre>|</code> 联合多个接口的时候，通过一个共有的属性形成可辨识联合</li>\n<li><a href=\"http://www.typescriptlang.org/docs/handbook/advanced-types.html#polymorphic-this-types\" target=\"_blank\" rel=\"noopener noreferrer\">Polymorphic <code v-pre>this</code> types</a>(<a href=\"https://zhongsp.gitbooks.io/typescript-handbook/content/doc/handbook/Advanced%20Types.html#%E5%A4%9A%E6%80%81%E7%9A%84this%E7%B1%BB%E5%9E%8B\" target=\"_blank\" rel=\"noopener noreferrer\">中文版</a>): 父类的某个方法返回 <code v-pre>this</code>，当子类继承父类后，子类的实例调用此方法，返回的 <code v-pre>this</code> 能够被 TypeScript 正确的识别为子类的实例。</li>\n<li><a href=\"http://www.typescriptlang.org/docs/handbook/symbols.html\" target=\"_blank\" rel=\"noopener noreferrer\">Symbols</a>(<a href=\"https://zhongsp.gitbooks.io/typescript-handbook/content/doc/handbook/Symbols.html\" target=\"_blank\" rel=\"noopener noreferrer\">中文版</a>): 新原生类型，这是 <a href=\"http://es6.ruanyifeng.com/#docs/symbol\" target=\"_blank\" rel=\"noopener noreferrer\">ES6 的知识</a></li>\n<li><a href=\"http://www.typescriptlang.org/docs/handbook/iterators-and-generators.html\" target=\"_blank\" rel=\"noopener noreferrer\">Iterators and Generators</a>(<a href=\"https://zhongsp.gitbooks.io/typescript-handbook/content/doc/handbook/Iterators%20and%20Generators.html\" target=\"_blank\" rel=\"noopener noreferrer\">中文版</a>): 迭代器，这是 <a href=\"http://es6.ruanyifeng.com/#docs/iterator\" target=\"_blank\" rel=\"noopener noreferrer\">ES6 的知识</a></li>\n<li><a href=\"http://www.typescriptlang.org/docs/handbook/namespaces.html\" target=\"_blank\" rel=\"noopener noreferrer\">Namespaces</a>(<a href=\"https://zhongsp.gitbooks.io/typescript-handbook/content/doc/handbook/Namespaces.html\" target=\"_blank\" rel=\"noopener noreferrer\">中文版</a>): 避免全局污染，现在已被 <a href=\"http://es6.ruanyifeng.com/#docs/module\" target=\"_blank\" rel=\"noopener noreferrer\">ES6 Module</a> 替代</li>\n<li><a href=\"http://www.typescriptlang.org/docs/handbook/decorators.html\" target=\"_blank\" rel=\"noopener noreferrer\">Decorators</a>(<a href=\"https://zhongsp.gitbooks.io/typescript-handbook/content/doc/handbook/Decorators.html\" target=\"_blank\" rel=\"noopener noreferrer\">中文版</a>): 修饰器，这是 <a href=\"http://es6.ruanyifeng.com/#docs/decorator\" target=\"_blank\" rel=\"noopener noreferrer\">ES2016 的一个提案</a></li>\n<li><a href=\"http://www.typescriptlang.org/docs/handbook/mixins.html\" target=\"_blank\" rel=\"noopener noreferrer\">Mixins</a>(<a href=\"https://zhongsp.gitbooks.io/typescript-handbook/content/doc/handbook/Mixins.html\" target=\"_blank\" rel=\"noopener noreferrer\">中文版</a>): 一种编程模式，与 TypeScript 没有直接关系，可以参考 <a href=\"http://es6.ruanyifeng.com/#docs/class#Mixin%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%AE%9E%E7%8E%B0\" target=\"_blank\" rel=\"noopener noreferrer\">ES6 中 Mixin 模式的实现</a></li>\n</ul>\n</template>","contentStripped":"<p>此处记录了<a href=\"http://www.typescriptlang.org/docs/handbook/basic-types.html\" target=\"_blank\" rel=\"noopener noreferrer\">官方手册</a>(<a href=\"https://zhongsp.gitbooks.io/typescript-handbook/content/\" target=\"_blank\" rel=\"noopener noreferrer\">中文版</a>)中包含，但是本书未涉及的概念。</p>\n<!-- more -->\n<p>我认为它们是一些不重要或者不属于 TypeScript 的概念，所以这里只给出一个简单的释义，详细内容可以点击链接深入理解。</p>\n<ul>\n<li><a href=\"http://www.typescriptlang.org/docs/handbook/basic-types.html#never\" target=\"_blank\" rel=\"noopener noreferrer\">Never</a>(<a href=\"https://zhongsp.gitbooks.io/typescript-handbook/content/doc/handbook/Basic%20Types.html#never\" target=\"_blank\" rel=\"noopener noreferrer\">中文版</a>): 永远不存在值的类型，一般用于错误处理函数</li>\n<li><a href=\"http://www.typescriptlang.org/docs/handbook/variable-declarations.html\" target=\"_blank\" rel=\"noopener noreferrer\">Variable Declarations</a>(<a href=\"https://zhongsp.gitbooks.io/typescript-handbook/content/doc/handbook/Variable%20Declarations.html\" target=\"_blank\" rel=\"noopener noreferrer\">中文版</a>): 使用 <code v-pre>let</code> 和 <code v-pre>const</code> 替代 <code v-pre>var</code>，这是 <a href=\"http://es6.ruanyifeng.com/#docs/let\" target=\"_blank\" rel=\"noopener noreferrer\">ES6 的知识</a></li>\n<li><a href=\"https://zhongsp.gitbooks.io/typescript-handbook/content/doc/handbook/Functions.html#this\" target=\"_blank\" rel=\"noopener noreferrer\"><code v-pre>this</code></a>: 箭头函数的运用，这是 <a href=\"http://es6.ruanyifeng.com/#docs/function\" target=\"_blank\" rel=\"noopener noreferrer\">ES6 的知识</a></li>\n<li><a href=\"http://www.typescriptlang.org/docs/handbook/generics.html#using-class-types-in-generics\" target=\"_blank\" rel=\"noopener noreferrer\">Using Class Types in Generics</a>(<a href=\"https://zhongsp.gitbooks.io/typescript-handbook/content/doc/handbook/Generics.html#%E5%9C%A8%E6%B3%9B%E5%9E%8B%E9%87%8C%E4%BD%BF%E7%94%A8%E7%B1%BB%E7%B1%BB%E5%9E%8B\" target=\"_blank\" rel=\"noopener noreferrer\">中文版</a>): 创建工厂函数时，需要引用构造函数的类类型</li>\n<li><a href=\"http://www.typescriptlang.org/docs/handbook/type-inference.html#best-common-type\" target=\"_blank\" rel=\"noopener noreferrer\">Best common type</a>(<a href=\"https://zhongsp.gitbooks.io/typescript-handbook/content/doc/handbook/Type%20Inference.html#%E6%9C%80%E4%BD%B3%E9%80%9A%E7%94%A8%E7%B1%BB%E5%9E%8B\" target=\"_blank\" rel=\"noopener noreferrer\">中文版</a>): 数组的类型推论</li>\n<li><a href=\"http://www.typescriptlang.org/docs/handbook/type-inference.html#contextual-type\" target=\"_blank\" rel=\"noopener noreferrer\">Contextual Type</a>(<a href=\"https://zhongsp.gitbooks.io/typescript-handbook/content/doc/handbook/Type%20Inference.html#%E4%B8%8A%E4%B8%8B%E6%96%87%E7%B1%BB%E5%9E%8B\" target=\"_blank\" rel=\"noopener noreferrer\">中文版</a>): 函数输入的类型推论</li>\n<li><a href=\"http://www.typescriptlang.org/docs/handbook/type-compatibility.html\" target=\"_blank\" rel=\"noopener noreferrer\">Type Compatibility</a>(<a href=\"https://zhongsp.gitbooks.io/typescript-handbook/content/doc/handbook/Type%20Compatibility.html\" target=\"_blank\" rel=\"noopener noreferrer\">中文版</a>): 允许不严格符合类型，只需要在一定规则下兼容即可</li>\n<li><a href=\"http://www.typescriptlang.org/docs/handbook/advanced-types.html#intersection-types\" target=\"_blank\" rel=\"noopener noreferrer\">Advanced Types</a>(<a href=\"https://zhongsp.gitbooks.io/typescript-handbook/content/doc/handbook/Advanced%20Types.html#%E4%BA%A4%E5%8F%89%E7%B1%BB%E5%9E%8B(intersection-types)\" target=\"_blank\" rel=\"noopener noreferrer\">中文版</a>): 使用 <code v-pre>&amp;</code> 将多种类型的共有部分叠加成一种类型</li>\n<li><a href=\"http://www.typescriptlang.org/docs/handbook/advanced-types.html#type-guards-and-differentiating-types\" target=\"_blank\" rel=\"noopener noreferrer\">Type Guards and Differentiating Types</a>(<a href=\"https://zhongsp.gitbooks.io/typescript-handbook/content/doc/handbook/Advanced%20Types.html#%E7%B1%BB%E5%9E%8B%E4%BF%9D%E6%8A%A4%E4%B8%8E%E5%8C%BA%E5%88%86%E7%B1%BB%E5%9E%8B(type-guards-and-differentiating-types)\" target=\"_blank\" rel=\"noopener noreferrer\">中文版</a>): 联合类型在一些情况下被识别为特定的类型</li>\n<li><a href=\"http://www.typescriptlang.org/docs/handbook/advanced-types.html#discriminated-unions\" target=\"_blank\" rel=\"noopener noreferrer\">Discriminated Unions</a>(<a href=\"https://zhongsp.gitbooks.io/typescript-handbook/content/doc/handbook/Advanced%20Types.html#%E5%8F%AF%E8%BE%A8%E8%AF%86%E8%81%94%E5%90%88(discriminated-unions)\" target=\"_blank\" rel=\"noopener noreferrer\">中文版</a>): 使用 <code v-pre>|</code> 联合多个接口的时候，通过一个共有的属性形成可辨识联合</li>\n<li><a href=\"http://www.typescriptlang.org/docs/handbook/advanced-types.html#polymorphic-this-types\" target=\"_blank\" rel=\"noopener noreferrer\">Polymorphic <code v-pre>this</code> types</a>(<a href=\"https://zhongsp.gitbooks.io/typescript-handbook/content/doc/handbook/Advanced%20Types.html#%E5%A4%9A%E6%80%81%E7%9A%84this%E7%B1%BB%E5%9E%8B\" target=\"_blank\" rel=\"noopener noreferrer\">中文版</a>): 父类的某个方法返回 <code v-pre>this</code>，当子类继承父类后，子类的实例调用此方法，返回的 <code v-pre>this</code> 能够被 TypeScript 正确的识别为子类的实例。</li>\n<li><a href=\"http://www.typescriptlang.org/docs/handbook/symbols.html\" target=\"_blank\" rel=\"noopener noreferrer\">Symbols</a>(<a href=\"https://zhongsp.gitbooks.io/typescript-handbook/content/doc/handbook/Symbols.html\" target=\"_blank\" rel=\"noopener noreferrer\">中文版</a>): 新原生类型，这是 <a href=\"http://es6.ruanyifeng.com/#docs/symbol\" target=\"_blank\" rel=\"noopener noreferrer\">ES6 的知识</a></li>\n<li><a href=\"http://www.typescriptlang.org/docs/handbook/iterators-and-generators.html\" target=\"_blank\" rel=\"noopener noreferrer\">Iterators and Generators</a>(<a href=\"https://zhongsp.gitbooks.io/typescript-handbook/content/doc/handbook/Iterators%20and%20Generators.html\" target=\"_blank\" rel=\"noopener noreferrer\">中文版</a>): 迭代器，这是 <a href=\"http://es6.ruanyifeng.com/#docs/iterator\" target=\"_blank\" rel=\"noopener noreferrer\">ES6 的知识</a></li>\n<li><a href=\"http://www.typescriptlang.org/docs/handbook/namespaces.html\" target=\"_blank\" rel=\"noopener noreferrer\">Namespaces</a>(<a href=\"https://zhongsp.gitbooks.io/typescript-handbook/content/doc/handbook/Namespaces.html\" target=\"_blank\" rel=\"noopener noreferrer\">中文版</a>): 避免全局污染，现在已被 <a href=\"http://es6.ruanyifeng.com/#docs/module\" target=\"_blank\" rel=\"noopener noreferrer\">ES6 Module</a> 替代</li>\n<li><a href=\"http://www.typescriptlang.org/docs/handbook/decorators.html\" target=\"_blank\" rel=\"noopener noreferrer\">Decorators</a>(<a href=\"https://zhongsp.gitbooks.io/typescript-handbook/content/doc/handbook/Decorators.html\" target=\"_blank\" rel=\"noopener noreferrer\">中文版</a>): 修饰器，这是 <a href=\"http://es6.ruanyifeng.com/#docs/decorator\" target=\"_blank\" rel=\"noopener noreferrer\">ES2016 的一个提案</a></li>\n<li><a href=\"http://www.typescriptlang.org/docs/handbook/mixins.html\" target=\"_blank\" rel=\"noopener noreferrer\">Mixins</a>(<a href=\"https://zhongsp.gitbooks.io/typescript-handbook/content/doc/handbook/Mixins.html\" target=\"_blank\" rel=\"noopener noreferrer\">中文版</a>): 一种编程模式，与 TypeScript 没有直接关系，可以参考 <a href=\"http://es6.ruanyifeng.com/#docs/class#Mixin%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%AE%9E%E7%8E%B0\" target=\"_blank\" rel=\"noopener noreferrer\">ES6 中 Mixin 模式的实现</a></li>\n</ul>\n","tagOpen":"<template>","tagClose":"</template>"},"script":null,"scriptSetup":null,"scripts":[],"styles":[],"customBlocks":[]},"content":"\n此处记录了[官方手册](http://www.typescriptlang.org/docs/handbook/basic-types.html)([中文版](https://zhongsp.gitbooks.io/typescript-handbook/content/))中包含，但是本书未涉及的概念。\n\n<!-- more -->\n\n我认为它们是一些不重要或者不属于 TypeScript 的概念，所以这里只给出一个简单的释义，详细内容可以点击链接深入理解。\n\n- [Never](http://www.typescriptlang.org/docs/handbook/basic-types.html#never)([中文版](https://zhongsp.gitbooks.io/typescript-handbook/content/doc/handbook/Basic%20Types.html#never)): 永远不存在值的类型，一般用于错误处理函数\n- [Variable Declarations](http://www.typescriptlang.org/docs/handbook/variable-declarations.html)([中文版](https://zhongsp.gitbooks.io/typescript-handbook/content/doc/handbook/Variable%20Declarations.html)): 使用 `let` 和 `const` 替代 `var`，这是 [ES6 的知识](http://es6.ruanyifeng.com/#docs/let)\n- [`this`](https://zhongsp.gitbooks.io/typescript-handbook/content/doc/handbook/Functions.html#this): 箭头函数的运用，这是 [ES6 的知识](http://es6.ruanyifeng.com/#docs/function)\n- [Using Class Types in Generics](http://www.typescriptlang.org/docs/handbook/generics.html#using-class-types-in-generics)([中文版](https://zhongsp.gitbooks.io/typescript-handbook/content/doc/handbook/Generics.html#在泛型里使用类类型)): 创建工厂函数时，需要引用构造函数的类类型\n- [Best common type](http://www.typescriptlang.org/docs/handbook/type-inference.html#best-common-type)([中文版](https://zhongsp.gitbooks.io/typescript-handbook/content/doc/handbook/Type%20Inference.html#最佳通用类型)): 数组的类型推论\n- [Contextual Type](http://www.typescriptlang.org/docs/handbook/type-inference.html#contextual-type)([中文版](https://zhongsp.gitbooks.io/typescript-handbook/content/doc/handbook/Type%20Inference.html#上下文类型)): 函数输入的类型推论\n- [Type Compatibility](http://www.typescriptlang.org/docs/handbook/type-compatibility.html)([中文版](https://zhongsp.gitbooks.io/typescript-handbook/content/doc/handbook/Type%20Compatibility.html)): 允许不严格符合类型，只需要在一定规则下兼容即可\n- [Advanced Types](http://www.typescriptlang.org/docs/handbook/advanced-types.html#intersection-types)([中文版](<https://zhongsp.gitbooks.io/typescript-handbook/content/doc/handbook/Advanced%20Types.html#交叉类型(intersection-types)>)): 使用 `&` 将多种类型的共有部分叠加成一种类型\n- [Type Guards and Differentiating Types](http://www.typescriptlang.org/docs/handbook/advanced-types.html#type-guards-and-differentiating-types)([中文版](<https://zhongsp.gitbooks.io/typescript-handbook/content/doc/handbook/Advanced%20Types.html#类型保护与区分类型(type-guards-and-differentiating-types)>)): 联合类型在一些情况下被识别为特定的类型\n- [Discriminated Unions](http://www.typescriptlang.org/docs/handbook/advanced-types.html#discriminated-unions)([中文版](<https://zhongsp.gitbooks.io/typescript-handbook/content/doc/handbook/Advanced%20Types.html#可辨识联合(discriminated-unions)>)): 使用 `|` 联合多个接口的时候，通过一个共有的属性形成可辨识联合\n- [Polymorphic `this` types](http://www.typescriptlang.org/docs/handbook/advanced-types.html#polymorphic-this-types)([中文版](https://zhongsp.gitbooks.io/typescript-handbook/content/doc/handbook/Advanced%20Types.html#多态的this类型)): 父类的某个方法返回 `this`，当子类继承父类后，子类的实例调用此方法，返回的 `this` 能够被 TypeScript 正确的识别为子类的实例。\n- [Symbols](http://www.typescriptlang.org/docs/handbook/symbols.html)([中文版](https://zhongsp.gitbooks.io/typescript-handbook/content/doc/handbook/Symbols.html)): 新原生类型，这是 [ES6 的知识](http://es6.ruanyifeng.com/#docs/symbol)\n- [Iterators and Generators](http://www.typescriptlang.org/docs/handbook/iterators-and-generators.html)([中文版](https://zhongsp.gitbooks.io/typescript-handbook/content/doc/handbook/Iterators%20and%20Generators.html)): 迭代器，这是 [ES6 的知识](http://es6.ruanyifeng.com/#docs/iterator)\n- [Namespaces](http://www.typescriptlang.org/docs/handbook/namespaces.html)([中文版](https://zhongsp.gitbooks.io/typescript-handbook/content/doc/handbook/Namespaces.html)): 避免全局污染，现在已被 [ES6 Module](http://es6.ruanyifeng.com/#docs/module) 替代\n- [Decorators](http://www.typescriptlang.org/docs/handbook/decorators.html)([中文版](https://zhongsp.gitbooks.io/typescript-handbook/content/doc/handbook/Decorators.html)): 修饰器，这是 [ES2016 的一个提案](http://es6.ruanyifeng.com/#docs/decorator)\n- [Mixins](http://www.typescriptlang.org/docs/handbook/mixins.html)([中文版](https://zhongsp.gitbooks.io/typescript-handbook/content/doc/handbook/Mixins.html)): 一种编程模式，与 TypeScript 没有直接关系，可以参考 [ES6 中 Mixin 模式的实现](http://es6.ruanyifeng.com/#docs/class#Mixin模式的实现)\n","excerpt":"","title":"","headers":[]}}
