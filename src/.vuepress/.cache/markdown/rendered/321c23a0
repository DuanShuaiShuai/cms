{"content":"<p>Vue 使用一种基于 HTML 的模板语法，使我们能够声明式地将其组件实例的数据绑定到呈现的 DOM 上。所有的 Vue 模板都是语法层面合法的 HTML，可以被符合规范的浏览器和 HTML 解析器解析。</p>\n<p>在底层机制中，Vue 会将模板编译成高度优化的 JavaScript 代码。结合响应式系统，当应用状态变更时，Vue 能够智能地推导出需要重新渲染的组件的最少数量，并应用最少的 DOM 操作。</p>\n<p>如果你对虚拟 DOM 的概念比较熟悉，并且偏好直接使用 JavaScript，你也可以结合可选的 JSX 支持直接手写渲染函数而不采用模板。但请注意，这将不会享受到和模板同等级别的编译时优化。</p>\n<h2 id=\"文本插值\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#文本插值\"><span>文本插值</span></a></h2>\n<p>最基本的数据绑定形式是文本插值，它使用的是“Mustache”语法 (即双大括号)：</p>\n<div class=\"language-vue\" data-highlighter=\"shiki\" data-ext=\"vue\" data-title=\"vue\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&#x3C;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">span</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">>Message: {{ msg }}&#x3C;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">span</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">></span></span></code></pre>\n</div><p>双大括号标签会被替换为相应组件实例中 <code v-pre>msg</code> 属性的值。同时每次 <code v-pre>msg</code> 属性更改时它也会同步更新。</p>\n<h2 id=\"原始-html\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#原始-html\"><span>原始 HTML</span></a></h2>\n<p>双大括号会将数据解释为纯文本，而不是 HTML。若想插入 HTML，你需要使用 <code v-pre>v-html</code> 指令：</p>\n<div class=\"language-vue\" data-highlighter=\"shiki\" data-ext=\"vue\" data-title=\"vue\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&#x3C;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">p</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">>Using text interpolation: {{ rawHtml }}&#x3C;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">p</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">></span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&#x3C;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">p</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">>Using v-html directive: &#x3C;span v-html=\"rawHtml\">&#x3C;/span>&#x3C;/p></span></span></code></pre>\n</div><p>Using text interpolation: {{ rawHtml }}</p>\n<p>Using v-html directive: <span v-html=\"rawHtml\"></span></p>\n<p>这里我们遇到了一个新的概念。这里看到的 <code v-pre>v-html</code> attribute 被称为一个指令。指令由 <code v-pre>v-</code> 作为前缀，表明它们是一些由 Vue 提供的特殊 attribute，你可能已经猜到了，它们将为渲染的 DOM 应用特殊的响应式行为。这里我们做的事情简单来说就是：在当前组件实例上，将此元素的 innerHTML 与 <code v-pre>rawHtml</code> 属性保持同步。</p>\n<p><code v-pre>span</code> 的内容将会被替换为 <code v-pre>rawHtml</code> 属性的值，插值为纯 HTML——数据绑定将会被忽略。</p>\n<div class=\"hint-container note\">\n<p class=\"hint-container-title\">注</p>\n<p>你不能使用 <code v-pre>v-html</code> 来拼接组合模板，因为 Vue 不是一个基于字符串的模板引擎。在使用 Vue 时，应当使用组件作为 UI 重用和组合的基本单元。</p>\n</div>\n<div class=\"hint-container warning\">\n<p class=\"hint-container-title\">安全警告</p>\n<p>在网站上动态渲染任意 HTML 是非常危险的，因为这非常容易造成 XSS 漏洞。请仅在内容安全可信时再使用 <code v-pre>v-html</code>，并且永远不要使用用户提供的 HTML 内容。</p>\n</div>\n<h2 id=\"attribute-绑定\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#attribute-绑定\"><span>Attribute 绑定</span></a></h2>\n<p>双大括号不能在 HTML attributes 中使用。想要响应式地绑定一个 attribute，应该使用 <code v-pre>v-bind</code> 指令：</p>\n<div class=\"language-vue\" data-highlighter=\"shiki\" data-ext=\"vue\" data-title=\"vue\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&#x3C;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">div</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> v-bind</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">id</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">dynamicId</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">>&#x3C;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">div</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">></span></span></code></pre>\n</div><p><code v-pre>v-bind</code> 指令指示 Vue 将元素的 <code v-pre>id</code> attribute 与组件的 <code v-pre>dynamicId</code> 属性保持一致。如果绑定的值是 <code v-pre>null</code> 或者 <code v-pre>undefined</code>，那么该 attribute 将会从渲染的元素上移除。</p>\n<h3 id=\"简写\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#简写\"><span>简写</span></a></h3>\n<p>因为 <code v-pre>v-bind</code> 非常常用，我们提供了特定的简写语法：</p>\n<div class=\"language-vue\" data-highlighter=\"shiki\" data-ext=\"vue\" data-title=\"vue\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&#x3C;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">div</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> :</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">id</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">dynamicId</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">>&#x3C;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">div</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">></span></span></code></pre>\n</div><p>开头为 <code v-pre>:</code> 的 attribute 可能和一般的 HTML attribute 看起来不太一样，但它的确是合法的 attribute 名称字符，并且所有支持 Vue 的浏览器都能正确解析它。此外，他们不会出现在最终渲染的 DOM 中。简写语法是可选的，但相信在你了解了它更多的用处后，你应该会更喜欢它。</p>\n<p>接下来的指引中，我们都将在示例中使用简写语法，因为这是在实际开发中更常见的用法。</p>\n<h3 id=\"布尔型-attribute\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#布尔型-attribute\"><span>布尔型 Attribute</span></a></h3>\n<p>布尔型 attribute 依据 true / false 值来决定 attribute 是否应该存在于该元素上。disabled 就是最常见的例子之一。</p>\n<p><code v-pre>v-bind</code> 在这种场景下的行为略有不同：</p>\n<div class=\"language-vue\" data-highlighter=\"shiki\" data-ext=\"vue\" data-title=\"vue\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&#x3C;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">button</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> :</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">disabled</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">isButtonDisabled</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">>Button&#x3C;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">button</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">></span></span></code></pre>\n</div><p>当 <code v-pre>isButtonDisabled</code> 为真值或一个空字符串 (即 <code v-pre>&lt;button disabled=&quot;&quot;&gt;</code>) 时，元素会包含这个 <code v-pre>disabled</code> attribute。而当其为其他假值时 attribute 将被忽略。</p>\n<h3 id=\"动态绑定多个值\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#动态绑定多个值\"><span>动态绑定多个值</span></a></h3>\n<p>如果你有像这样的一个包含多个 attribute 的 JavaScript 对象：</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> objectOfAttrs</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  id</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"container\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  class</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"wrapper\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">};</span></span></code></pre>\n</div><p>通过不带参数的 <code v-pre>v-bind</code>，你可以将它们绑定到单个元素上：</p>\n<div class=\"language-vue\" data-highlighter=\"shiki\" data-ext=\"vue\" data-title=\"vue\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&#x3C;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">div</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> v-bind</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">objectOfAttrs</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">>&#x3C;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">div</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">></span></span></code></pre>\n</div><h2 id=\"使用-javascript-表达式\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#使用-javascript-表达式\"><span>使用 JavaScript 表达式</span></a></h2>\n<p>至此，我们仅在模板中绑定了一些简单的属性名。但是 Vue 实际上在所有的数据绑定中都支持完整的 JavaScript 表达式：</p>\n<div class=\"language-vue\" data-highlighter=\"shiki\" data-ext=\"vue\" data-title=\"vue\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">{{ number + 1 }}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">{{ ok ? \"YES\" : \"NO\" }}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">{{ message.split(\"\").reverse().join(\"\") }}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&#x3C;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">div</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> :</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">id</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">\"</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">`list-</span><span style=\"--shiki-light:#CA1243;--shiki-dark:#C678DD\">${</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">id</span><span style=\"--shiki-light:#CA1243;--shiki-dark:#C678DD\">}</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">`</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">>&#x3C;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">div</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">></span></span></code></pre>\n</div><p>这些表达式都会被作为 JavaScript ，以当前组件实例为作用域解析执行。</p>\n<p>在 Vue 模板内，JavaScript 表达式可以被使用在如下场景上：</p>\n<ul>\n<li>在文本插值中 (双大括号)</li>\n<li>在任何 Vue 指令 (以 v- 开头的特殊 attribute) attribute 的值中</li>\n</ul>\n<h3 id=\"仅支持表达式\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#仅支持表达式\"><span>仅支持表达式</span></a></h3>\n<p>每个绑定仅支持单一表达式，也就是一段能够被求值的 JavaScript 代码。一个简单的判断方法是是否可以合法地写在 return 后面。</p>\n<p>因此，下面的例子都是无效的：</p>\n<div class=\"language-vue\" data-highlighter=\"shiki\" data-ext=\"vue\" data-title=\"vue\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">&#x3C;!-- 这是一个语句，而非表达式 --></span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">{{ var a = 1 }}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">&#x3C;!-- 条件控制也不支持，请使用三元表达式 --></span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">{{ if (ok) { return message } }}</span></span></code></pre>\n</div><h3 id=\"调用函数\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#调用函数\"><span>调用函数</span></a></h3>\n<p>可以在绑定的表达式中使用一个组件暴露的方法：</p>\n<div class=\"language-vue\" data-highlighter=\"shiki\" data-ext=\"vue\" data-title=\"vue\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&#x3C;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">span</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> :</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">title</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">\"</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">toTitleDate</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">date</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">></span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">{{ formatDate(date) }}</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&#x3C;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">span</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">></span></span></code></pre>\n</div><div class=\"hint-container tip\">\n<p class=\"hint-container-title\">提示</p>\n<p>绑定在表达式中的方法在组件每次更新时都会被重新调用，因此不应该产生任何副作用，比如改变数据或触发异步操作。</p>\n</div>\n<h3 id=\"受限的全局访问\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#受限的全局访问\"><span>受限的全局访问</span></a></h3>\n<p>模板中的表达式将被沙盒化，仅能够访问到有限的全局对象列表。该列表中会暴露常用的内置全局对象，比如 <code v-pre>Math</code> 和 <code v-pre>Date</code>。</p>\n<p>没有显式包含在列表中的全局对象将不能在模板内表达式中访问，例如用户附加在 window 上的属性。然而，你也可以自行在 <code v-pre>app.config.globalProperties</code> 上显式地添加它们，供所有的 Vue 表达式使用。</p>\n<h2 id=\"指令-directives\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#指令-directives\"><span>指令 Directives</span></a></h2>\n<p>指令是带有 <code v-pre>v-</code> 前缀的特殊 attribute。Vue 提供了许多内置指令，包括上面我们所介绍的 <code v-pre>v-bind</code> 和 <code v-pre>v-html</code>。</p>\n<p>指令 attribute 的期望值为一个 JavaScript 表达式 (除了少数几个例外，即之后要讨论到的 <code v-pre>v-for</code>、<code v-pre>v-on</code> 和 <code v-pre>v-slot</code>)。一个指令的任务是在其表达式的值变化时响应式地更新 DOM。以 <code v-pre>v-if</code> 为例：</p>\n<div class=\"language-vue\" data-highlighter=\"shiki\" data-ext=\"vue\" data-title=\"vue\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&#x3C;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">p</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> v-if</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">seen</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">>Now you see me&#x3C;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">p</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">></span></span></code></pre>\n</div><p>这里，v-if 指令会基于表达式 seen 的值的真假来移除/插入该 <code v-pre>&lt;p&gt;</code> 元素。</p>\n<h3 id=\"参数-arguments\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#参数-arguments\"><span>参数 Arguments</span></a></h3>\n<p>某些指令会需要一个“参数”，在指令名后通过一个冒号隔开做标识。例如用 <code v-pre>v-bind</code> 指令来响应式地更新一个 HTML attribute：</p>\n<div class=\"language-vue\" data-highlighter=\"shiki\" data-ext=\"vue\" data-title=\"vue\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&#x3C;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">a</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> v-bind</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">href</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">url</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">> ... &#x3C;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">a</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">></span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">&#x3C;!-- 简写 --></span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&#x3C;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">a</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> :</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">href</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">url</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">> ... &#x3C;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">a</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">></span></span></code></pre>\n</div><p>这里 href 就是一个参数，它告诉 <code v-pre>v-bind</code> 指令将表达式 url 的值绑定到元素的 <code v-pre>href</code> attribute 上。在简写中，参数前的一切 (例如 <code v-pre>v-bind:</code>) 都会被缩略为一个 <code v-pre>:</code> 字符。</p>\n<p>另一个例子是 <code v-pre>v-on</code> 指令，它将监听 DOM 事件：</p>\n<div class=\"language-vue\" data-highlighter=\"shiki\" data-ext=\"vue\" data-title=\"vue\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&#x3C;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">a</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> v-on</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">click</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">doSomething</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">> ... &#x3C;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">a</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">></span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">&#x3C;!-- 简写 --></span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&#x3C;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">a</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> @</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">click</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">doSomething</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">> ... &#x3C;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">a</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">></span></span></code></pre>\n</div><p>这里的参数是要监听的事件名称：<code v-pre>click</code>。<code v-pre>v-on</code> 有一个相应的缩写，即 <code v-pre>@</code> 字符。</p>\n<h3 id=\"动态参数\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#动态参数\"><span>动态参数</span></a></h3>\n<p>同样在指令参数上也可以使用一个 JavaScript 表达式，需要包含在一对方括号内：</p>\n<div class=\"language-vue\" data-highlighter=\"shiki\" data-ext=\"vue\" data-title=\"vue\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">&#x3C;!--</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">注意，参数表达式有一些约束，</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">参见下面“动态参数值的限制”与“动态参数语法的限制”章节的解释</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">--></span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&#x3C;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">a</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> v-bind</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:[</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">attributeName</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">]=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">url</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">> ... &#x3C;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">a</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">></span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">&#x3C;!-- 简写 --></span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&#x3C;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">a</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> :[</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">attributeName</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">]=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">url</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">> ... &#x3C;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">a</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">></span></span></code></pre>\n</div><p>这里的 <code v-pre>attributeName</code> 会作为一个 JavaScript 表达式被动态执行，计算得到的值会被用作最终的参数。举例来说，如果你的组件实例有一个数据属性 <code v-pre>attributeName</code>，其值为 <code v-pre>&quot;href&quot;</code>，那么这个绑定就等价于 <code v-pre>v-bind:href</code>。</p>\n<p>相似地，你还可以将一个函数绑定到动态的事件名称上：</p>\n<div class=\"language-vue\" data-highlighter=\"shiki\" data-ext=\"vue\" data-title=\"vue\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&#x3C;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">a</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> v-on</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:[</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">eventName</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">]=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">doSomething</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">> ... &#x3C;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">a</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">></span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">&#x3C;!-- 简写 --></span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&#x3C;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">a</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> @[</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">eventName</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">]=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">doSomething</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">>&#x3C;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">a</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">></span></span></code></pre>\n</div><p>在此示例中，当 <code v-pre>eventName</code> 的值是 <code v-pre>&quot;focus&quot;</code> 时，<code v-pre>v-on:[eventName]</code> 就等价于 <code v-pre>v-on:focus</code>。</p>\n<h3 id=\"动态参数值的限制\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#动态参数值的限制\"><span>动态参数值的限制</span></a></h3>\n<p>动态参数中表达式的值应当是一个字符串，或者是 null。特殊值 null 意为显式移除该绑定。其他非字符串的值会触发警告。</p>\n<h3 id=\"动态参数语法的限制\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#动态参数语法的限制\"><span>动态参数语法的限制</span></a></h3>\n<p>动态参数表达式因为某些字符的缘故有一些语法限制，比如空格和引号，在 HTML attribute 名称中都是不合法的。例如下面的示例：</p>\n<div class=\"language-vue\" data-highlighter=\"shiki\" data-ext=\"vue\" data-title=\"vue\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">&#x3C;!-- 这会触发一个编译器警告 --></span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&#x3C;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">a</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> :[</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'foo'</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> +</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> bar</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">]=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">value</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">> ... &#x3C;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">a</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">></span></span></code></pre>\n</div><p>如果你需要传入一个复杂的动态参数，我们推荐使用计算属性替换复杂的表达式，也是 Vue 最基础的概念之一。</p>\n<p>当使用 DOM 内嵌模板 (直接写在 HTML 文件里的模板) 时，我们需要避免在名称中使用大写字母，因为浏览器会强制将其转换为小写：</p>\n<div class=\"language-vue\" data-highlighter=\"shiki\" data-ext=\"vue\" data-title=\"vue\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&#x3C;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">a</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> :[</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">someAttr</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">]=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">value</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">> ... &#x3C;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">a</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">></span></span></code></pre>\n</div><p>上面的例子将会在 DOM 内嵌模板中被转换为 <code v-pre>:[someattr]</code>。如果你的组件拥有 “someAttr” 属性而非 “someattr”，这段代码将不会工作。单文件组件内的模板不受此限制。</p>\n<h3 id=\"修饰符-modifiers\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#修饰符-modifiers\"><span>修饰符 Modifiers</span></a></h3>\n<p>修饰符是以点开头的特殊后缀，表明指令需要以一些特殊的方式被绑定。例如 <code v-pre>.prevent</code> 修饰符会告知 <code v-pre>v-on</code> 指令对触发的事件调用 <code v-pre>event.preventDefault()</code>：</p>\n<div class=\"language-vue\" data-highlighter=\"shiki\" data-ext=\"vue\" data-title=\"vue\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&#x3C;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">form</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> @</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">submit</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">prevent</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">onSubmit</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">>...&#x3C;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">form</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">></span></span></code></pre>\n</div>","env":{"base":"/","filePath":"/Users/carson/Desktop/Mister-Hope.github.io-main/src/code/vue/core/template.md","filePathRelative":"code/vue/core/template.md","frontmatter":{"date":"2023-02-26T00:00:00.000Z","title":"模板语法","icon":"object","order":4},"sfcBlocks":{"template":{"type":"template","content":"<template><p>Vue 使用一种基于 HTML 的模板语法，使我们能够声明式地将其组件实例的数据绑定到呈现的 DOM 上。所有的 Vue 模板都是语法层面合法的 HTML，可以被符合规范的浏览器和 HTML 解析器解析。</p>\n<p>在底层机制中，Vue 会将模板编译成高度优化的 JavaScript 代码。结合响应式系统，当应用状态变更时，Vue 能够智能地推导出需要重新渲染的组件的最少数量，并应用最少的 DOM 操作。</p>\n<p>如果你对虚拟 DOM 的概念比较熟悉，并且偏好直接使用 JavaScript，你也可以结合可选的 JSX 支持直接手写渲染函数而不采用模板。但请注意，这将不会享受到和模板同等级别的编译时优化。</p>\n<h2 id=\"文本插值\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#文本插值\"><span>文本插值</span></a></h2>\n<p>最基本的数据绑定形式是文本插值，它使用的是“Mustache”语法 (即双大括号)：</p>\n<div class=\"language-vue\" data-highlighter=\"shiki\" data-ext=\"vue\" data-title=\"vue\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&#x3C;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">span</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">>Message: {{ msg }}&#x3C;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">span</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">></span></span></code></pre>\n</div><p>双大括号标签会被替换为相应组件实例中 <code v-pre>msg</code> 属性的值。同时每次 <code v-pre>msg</code> 属性更改时它也会同步更新。</p>\n<h2 id=\"原始-html\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#原始-html\"><span>原始 HTML</span></a></h2>\n<p>双大括号会将数据解释为纯文本，而不是 HTML。若想插入 HTML，你需要使用 <code v-pre>v-html</code> 指令：</p>\n<div class=\"language-vue\" data-highlighter=\"shiki\" data-ext=\"vue\" data-title=\"vue\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&#x3C;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">p</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">>Using text interpolation: {{ rawHtml }}&#x3C;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">p</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">></span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&#x3C;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">p</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">>Using v-html directive: &#x3C;span v-html=\"rawHtml\">&#x3C;/span>&#x3C;/p></span></span></code></pre>\n</div><p>Using text interpolation: {{ rawHtml }}</p>\n<p>Using v-html directive: <span v-html=\"rawHtml\"></span></p>\n<p>这里我们遇到了一个新的概念。这里看到的 <code v-pre>v-html</code> attribute 被称为一个指令。指令由 <code v-pre>v-</code> 作为前缀，表明它们是一些由 Vue 提供的特殊 attribute，你可能已经猜到了，它们将为渲染的 DOM 应用特殊的响应式行为。这里我们做的事情简单来说就是：在当前组件实例上，将此元素的 innerHTML 与 <code v-pre>rawHtml</code> 属性保持同步。</p>\n<p><code v-pre>span</code> 的内容将会被替换为 <code v-pre>rawHtml</code> 属性的值，插值为纯 HTML——数据绑定将会被忽略。</p>\n<div class=\"hint-container note\">\n<p class=\"hint-container-title\">注</p>\n<p>你不能使用 <code v-pre>v-html</code> 来拼接组合模板，因为 Vue 不是一个基于字符串的模板引擎。在使用 Vue 时，应当使用组件作为 UI 重用和组合的基本单元。</p>\n</div>\n<div class=\"hint-container warning\">\n<p class=\"hint-container-title\">安全警告</p>\n<p>在网站上动态渲染任意 HTML 是非常危险的，因为这非常容易造成 XSS 漏洞。请仅在内容安全可信时再使用 <code v-pre>v-html</code>，并且永远不要使用用户提供的 HTML 内容。</p>\n</div>\n<h2 id=\"attribute-绑定\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#attribute-绑定\"><span>Attribute 绑定</span></a></h2>\n<p>双大括号不能在 HTML attributes 中使用。想要响应式地绑定一个 attribute，应该使用 <code v-pre>v-bind</code> 指令：</p>\n<div class=\"language-vue\" data-highlighter=\"shiki\" data-ext=\"vue\" data-title=\"vue\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&#x3C;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">div</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> v-bind</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">id</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">dynamicId</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">>&#x3C;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">div</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">></span></span></code></pre>\n</div><p><code v-pre>v-bind</code> 指令指示 Vue 将元素的 <code v-pre>id</code> attribute 与组件的 <code v-pre>dynamicId</code> 属性保持一致。如果绑定的值是 <code v-pre>null</code> 或者 <code v-pre>undefined</code>，那么该 attribute 将会从渲染的元素上移除。</p>\n<h3 id=\"简写\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#简写\"><span>简写</span></a></h3>\n<p>因为 <code v-pre>v-bind</code> 非常常用，我们提供了特定的简写语法：</p>\n<div class=\"language-vue\" data-highlighter=\"shiki\" data-ext=\"vue\" data-title=\"vue\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&#x3C;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">div</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> :</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">id</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">dynamicId</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">>&#x3C;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">div</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">></span></span></code></pre>\n</div><p>开头为 <code v-pre>:</code> 的 attribute 可能和一般的 HTML attribute 看起来不太一样，但它的确是合法的 attribute 名称字符，并且所有支持 Vue 的浏览器都能正确解析它。此外，他们不会出现在最终渲染的 DOM 中。简写语法是可选的，但相信在你了解了它更多的用处后，你应该会更喜欢它。</p>\n<p>接下来的指引中，我们都将在示例中使用简写语法，因为这是在实际开发中更常见的用法。</p>\n<h3 id=\"布尔型-attribute\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#布尔型-attribute\"><span>布尔型 Attribute</span></a></h3>\n<p>布尔型 attribute 依据 true / false 值来决定 attribute 是否应该存在于该元素上。disabled 就是最常见的例子之一。</p>\n<p><code v-pre>v-bind</code> 在这种场景下的行为略有不同：</p>\n<div class=\"language-vue\" data-highlighter=\"shiki\" data-ext=\"vue\" data-title=\"vue\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&#x3C;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">button</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> :</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">disabled</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">isButtonDisabled</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">>Button&#x3C;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">button</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">></span></span></code></pre>\n</div><p>当 <code v-pre>isButtonDisabled</code> 为真值或一个空字符串 (即 <code v-pre>&lt;button disabled=&quot;&quot;&gt;</code>) 时，元素会包含这个 <code v-pre>disabled</code> attribute。而当其为其他假值时 attribute 将被忽略。</p>\n<h3 id=\"动态绑定多个值\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#动态绑定多个值\"><span>动态绑定多个值</span></a></h3>\n<p>如果你有像这样的一个包含多个 attribute 的 JavaScript 对象：</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> objectOfAttrs</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  id</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"container\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  class</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"wrapper\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">};</span></span></code></pre>\n</div><p>通过不带参数的 <code v-pre>v-bind</code>，你可以将它们绑定到单个元素上：</p>\n<div class=\"language-vue\" data-highlighter=\"shiki\" data-ext=\"vue\" data-title=\"vue\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&#x3C;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">div</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> v-bind</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">objectOfAttrs</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">>&#x3C;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">div</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">></span></span></code></pre>\n</div><h2 id=\"使用-javascript-表达式\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#使用-javascript-表达式\"><span>使用 JavaScript 表达式</span></a></h2>\n<p>至此，我们仅在模板中绑定了一些简单的属性名。但是 Vue 实际上在所有的数据绑定中都支持完整的 JavaScript 表达式：</p>\n<div class=\"language-vue\" data-highlighter=\"shiki\" data-ext=\"vue\" data-title=\"vue\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">{{ number + 1 }}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">{{ ok ? \"YES\" : \"NO\" }}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">{{ message.split(\"\").reverse().join(\"\") }}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&#x3C;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">div</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> :</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">id</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">\"</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">`list-</span><span style=\"--shiki-light:#CA1243;--shiki-dark:#C678DD\">${</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">id</span><span style=\"--shiki-light:#CA1243;--shiki-dark:#C678DD\">}</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">`</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">>&#x3C;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">div</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">></span></span></code></pre>\n</div><p>这些表达式都会被作为 JavaScript ，以当前组件实例为作用域解析执行。</p>\n<p>在 Vue 模板内，JavaScript 表达式可以被使用在如下场景上：</p>\n<ul>\n<li>在文本插值中 (双大括号)</li>\n<li>在任何 Vue 指令 (以 v- 开头的特殊 attribute) attribute 的值中</li>\n</ul>\n<h3 id=\"仅支持表达式\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#仅支持表达式\"><span>仅支持表达式</span></a></h3>\n<p>每个绑定仅支持单一表达式，也就是一段能够被求值的 JavaScript 代码。一个简单的判断方法是是否可以合法地写在 return 后面。</p>\n<p>因此，下面的例子都是无效的：</p>\n<div class=\"language-vue\" data-highlighter=\"shiki\" data-ext=\"vue\" data-title=\"vue\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">&#x3C;!-- 这是一个语句，而非表达式 --></span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">{{ var a = 1 }}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">&#x3C;!-- 条件控制也不支持，请使用三元表达式 --></span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">{{ if (ok) { return message } }}</span></span></code></pre>\n</div><h3 id=\"调用函数\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#调用函数\"><span>调用函数</span></a></h3>\n<p>可以在绑定的表达式中使用一个组件暴露的方法：</p>\n<div class=\"language-vue\" data-highlighter=\"shiki\" data-ext=\"vue\" data-title=\"vue\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&#x3C;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">span</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> :</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">title</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">\"</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">toTitleDate</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">date</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">></span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">{{ formatDate(date) }}</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&#x3C;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">span</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">></span></span></code></pre>\n</div><div class=\"hint-container tip\">\n<p class=\"hint-container-title\">提示</p>\n<p>绑定在表达式中的方法在组件每次更新时都会被重新调用，因此不应该产生任何副作用，比如改变数据或触发异步操作。</p>\n</div>\n<h3 id=\"受限的全局访问\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#受限的全局访问\"><span>受限的全局访问</span></a></h3>\n<p>模板中的表达式将被沙盒化，仅能够访问到有限的全局对象列表。该列表中会暴露常用的内置全局对象，比如 <code v-pre>Math</code> 和 <code v-pre>Date</code>。</p>\n<p>没有显式包含在列表中的全局对象将不能在模板内表达式中访问，例如用户附加在 window 上的属性。然而，你也可以自行在 <code v-pre>app.config.globalProperties</code> 上显式地添加它们，供所有的 Vue 表达式使用。</p>\n<h2 id=\"指令-directives\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#指令-directives\"><span>指令 Directives</span></a></h2>\n<p>指令是带有 <code v-pre>v-</code> 前缀的特殊 attribute。Vue 提供了许多内置指令，包括上面我们所介绍的 <code v-pre>v-bind</code> 和 <code v-pre>v-html</code>。</p>\n<p>指令 attribute 的期望值为一个 JavaScript 表达式 (除了少数几个例外，即之后要讨论到的 <code v-pre>v-for</code>、<code v-pre>v-on</code> 和 <code v-pre>v-slot</code>)。一个指令的任务是在其表达式的值变化时响应式地更新 DOM。以 <code v-pre>v-if</code> 为例：</p>\n<div class=\"language-vue\" data-highlighter=\"shiki\" data-ext=\"vue\" data-title=\"vue\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&#x3C;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">p</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> v-if</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">seen</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">>Now you see me&#x3C;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">p</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">></span></span></code></pre>\n</div><p>这里，v-if 指令会基于表达式 seen 的值的真假来移除/插入该 <code v-pre>&lt;p&gt;</code> 元素。</p>\n<h3 id=\"参数-arguments\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#参数-arguments\"><span>参数 Arguments</span></a></h3>\n<p>某些指令会需要一个“参数”，在指令名后通过一个冒号隔开做标识。例如用 <code v-pre>v-bind</code> 指令来响应式地更新一个 HTML attribute：</p>\n<div class=\"language-vue\" data-highlighter=\"shiki\" data-ext=\"vue\" data-title=\"vue\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&#x3C;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">a</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> v-bind</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">href</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">url</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">> ... &#x3C;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">a</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">></span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">&#x3C;!-- 简写 --></span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&#x3C;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">a</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> :</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">href</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">url</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">> ... &#x3C;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">a</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">></span></span></code></pre>\n</div><p>这里 href 就是一个参数，它告诉 <code v-pre>v-bind</code> 指令将表达式 url 的值绑定到元素的 <code v-pre>href</code> attribute 上。在简写中，参数前的一切 (例如 <code v-pre>v-bind:</code>) 都会被缩略为一个 <code v-pre>:</code> 字符。</p>\n<p>另一个例子是 <code v-pre>v-on</code> 指令，它将监听 DOM 事件：</p>\n<div class=\"language-vue\" data-highlighter=\"shiki\" data-ext=\"vue\" data-title=\"vue\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&#x3C;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">a</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> v-on</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">click</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">doSomething</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">> ... &#x3C;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">a</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">></span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">&#x3C;!-- 简写 --></span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&#x3C;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">a</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> @</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">click</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">doSomething</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">> ... &#x3C;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">a</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">></span></span></code></pre>\n</div><p>这里的参数是要监听的事件名称：<code v-pre>click</code>。<code v-pre>v-on</code> 有一个相应的缩写，即 <code v-pre>@</code> 字符。</p>\n<h3 id=\"动态参数\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#动态参数\"><span>动态参数</span></a></h3>\n<p>同样在指令参数上也可以使用一个 JavaScript 表达式，需要包含在一对方括号内：</p>\n<div class=\"language-vue\" data-highlighter=\"shiki\" data-ext=\"vue\" data-title=\"vue\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">&#x3C;!--</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">注意，参数表达式有一些约束，</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">参见下面“动态参数值的限制”与“动态参数语法的限制”章节的解释</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">--></span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&#x3C;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">a</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> v-bind</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:[</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">attributeName</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">]=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">url</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">> ... &#x3C;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">a</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">></span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">&#x3C;!-- 简写 --></span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&#x3C;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">a</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> :[</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">attributeName</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">]=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">url</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">> ... &#x3C;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">a</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">></span></span></code></pre>\n</div><p>这里的 <code v-pre>attributeName</code> 会作为一个 JavaScript 表达式被动态执行，计算得到的值会被用作最终的参数。举例来说，如果你的组件实例有一个数据属性 <code v-pre>attributeName</code>，其值为 <code v-pre>&quot;href&quot;</code>，那么这个绑定就等价于 <code v-pre>v-bind:href</code>。</p>\n<p>相似地，你还可以将一个函数绑定到动态的事件名称上：</p>\n<div class=\"language-vue\" data-highlighter=\"shiki\" data-ext=\"vue\" data-title=\"vue\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&#x3C;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">a</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> v-on</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:[</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">eventName</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">]=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">doSomething</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">> ... &#x3C;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">a</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">></span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">&#x3C;!-- 简写 --></span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&#x3C;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">a</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> @[</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">eventName</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">]=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">doSomething</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">>&#x3C;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">a</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">></span></span></code></pre>\n</div><p>在此示例中，当 <code v-pre>eventName</code> 的值是 <code v-pre>&quot;focus&quot;</code> 时，<code v-pre>v-on:[eventName]</code> 就等价于 <code v-pre>v-on:focus</code>。</p>\n<h3 id=\"动态参数值的限制\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#动态参数值的限制\"><span>动态参数值的限制</span></a></h3>\n<p>动态参数中表达式的值应当是一个字符串，或者是 null。特殊值 null 意为显式移除该绑定。其他非字符串的值会触发警告。</p>\n<h3 id=\"动态参数语法的限制\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#动态参数语法的限制\"><span>动态参数语法的限制</span></a></h3>\n<p>动态参数表达式因为某些字符的缘故有一些语法限制，比如空格和引号，在 HTML attribute 名称中都是不合法的。例如下面的示例：</p>\n<div class=\"language-vue\" data-highlighter=\"shiki\" data-ext=\"vue\" data-title=\"vue\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">&#x3C;!-- 这会触发一个编译器警告 --></span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&#x3C;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">a</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> :[</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'foo'</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> +</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> bar</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">]=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">value</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">> ... &#x3C;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">a</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">></span></span></code></pre>\n</div><p>如果你需要传入一个复杂的动态参数，我们推荐使用计算属性替换复杂的表达式，也是 Vue 最基础的概念之一。</p>\n<p>当使用 DOM 内嵌模板 (直接写在 HTML 文件里的模板) 时，我们需要避免在名称中使用大写字母，因为浏览器会强制将其转换为小写：</p>\n<div class=\"language-vue\" data-highlighter=\"shiki\" data-ext=\"vue\" data-title=\"vue\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&#x3C;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">a</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> :[</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">someAttr</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">]=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">value</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">> ... &#x3C;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">a</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">></span></span></code></pre>\n</div><p>上面的例子将会在 DOM 内嵌模板中被转换为 <code v-pre>:[someattr]</code>。如果你的组件拥有 “someAttr” 属性而非 “someattr”，这段代码将不会工作。单文件组件内的模板不受此限制。</p>\n<h3 id=\"修饰符-modifiers\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#修饰符-modifiers\"><span>修饰符 Modifiers</span></a></h3>\n<p>修饰符是以点开头的特殊后缀，表明指令需要以一些特殊的方式被绑定。例如 <code v-pre>.prevent</code> 修饰符会告知 <code v-pre>v-on</code> 指令对触发的事件调用 <code v-pre>event.preventDefault()</code>：</p>\n<div class=\"language-vue\" data-highlighter=\"shiki\" data-ext=\"vue\" data-title=\"vue\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&#x3C;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">form</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> @</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">submit</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">prevent</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">onSubmit</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">>...&#x3C;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">form</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">></span></span></code></pre>\n</div></template>","contentStripped":"<p>Vue 使用一种基于 HTML 的模板语法，使我们能够声明式地将其组件实例的数据绑定到呈现的 DOM 上。所有的 Vue 模板都是语法层面合法的 HTML，可以被符合规范的浏览器和 HTML 解析器解析。</p>\n<p>在底层机制中，Vue 会将模板编译成高度优化的 JavaScript 代码。结合响应式系统，当应用状态变更时，Vue 能够智能地推导出需要重新渲染的组件的最少数量，并应用最少的 DOM 操作。</p>\n<p>如果你对虚拟 DOM 的概念比较熟悉，并且偏好直接使用 JavaScript，你也可以结合可选的 JSX 支持直接手写渲染函数而不采用模板。但请注意，这将不会享受到和模板同等级别的编译时优化。</p>\n<h2 id=\"文本插值\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#文本插值\"><span>文本插值</span></a></h2>\n<p>最基本的数据绑定形式是文本插值，它使用的是“Mustache”语法 (即双大括号)：</p>\n<div class=\"language-vue\" data-highlighter=\"shiki\" data-ext=\"vue\" data-title=\"vue\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&#x3C;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">span</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">>Message: {{ msg }}&#x3C;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">span</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">></span></span></code></pre>\n</div><p>双大括号标签会被替换为相应组件实例中 <code v-pre>msg</code> 属性的值。同时每次 <code v-pre>msg</code> 属性更改时它也会同步更新。</p>\n<h2 id=\"原始-html\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#原始-html\"><span>原始 HTML</span></a></h2>\n<p>双大括号会将数据解释为纯文本，而不是 HTML。若想插入 HTML，你需要使用 <code v-pre>v-html</code> 指令：</p>\n<div class=\"language-vue\" data-highlighter=\"shiki\" data-ext=\"vue\" data-title=\"vue\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&#x3C;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">p</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">>Using text interpolation: {{ rawHtml }}&#x3C;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">p</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">></span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&#x3C;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">p</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">>Using v-html directive: &#x3C;span v-html=\"rawHtml\">&#x3C;/span>&#x3C;/p></span></span></code></pre>\n</div><p>Using text interpolation: {{ rawHtml }}</p>\n<p>Using v-html directive: <span v-html=\"rawHtml\"></span></p>\n<p>这里我们遇到了一个新的概念。这里看到的 <code v-pre>v-html</code> attribute 被称为一个指令。指令由 <code v-pre>v-</code> 作为前缀，表明它们是一些由 Vue 提供的特殊 attribute，你可能已经猜到了，它们将为渲染的 DOM 应用特殊的响应式行为。这里我们做的事情简单来说就是：在当前组件实例上，将此元素的 innerHTML 与 <code v-pre>rawHtml</code> 属性保持同步。</p>\n<p><code v-pre>span</code> 的内容将会被替换为 <code v-pre>rawHtml</code> 属性的值，插值为纯 HTML——数据绑定将会被忽略。</p>\n<div class=\"hint-container note\">\n<p class=\"hint-container-title\">注</p>\n<p>你不能使用 <code v-pre>v-html</code> 来拼接组合模板，因为 Vue 不是一个基于字符串的模板引擎。在使用 Vue 时，应当使用组件作为 UI 重用和组合的基本单元。</p>\n</div>\n<div class=\"hint-container warning\">\n<p class=\"hint-container-title\">安全警告</p>\n<p>在网站上动态渲染任意 HTML 是非常危险的，因为这非常容易造成 XSS 漏洞。请仅在内容安全可信时再使用 <code v-pre>v-html</code>，并且永远不要使用用户提供的 HTML 内容。</p>\n</div>\n<h2 id=\"attribute-绑定\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#attribute-绑定\"><span>Attribute 绑定</span></a></h2>\n<p>双大括号不能在 HTML attributes 中使用。想要响应式地绑定一个 attribute，应该使用 <code v-pre>v-bind</code> 指令：</p>\n<div class=\"language-vue\" data-highlighter=\"shiki\" data-ext=\"vue\" data-title=\"vue\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&#x3C;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">div</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> v-bind</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">id</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">dynamicId</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">>&#x3C;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">div</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">></span></span></code></pre>\n</div><p><code v-pre>v-bind</code> 指令指示 Vue 将元素的 <code v-pre>id</code> attribute 与组件的 <code v-pre>dynamicId</code> 属性保持一致。如果绑定的值是 <code v-pre>null</code> 或者 <code v-pre>undefined</code>，那么该 attribute 将会从渲染的元素上移除。</p>\n<h3 id=\"简写\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#简写\"><span>简写</span></a></h3>\n<p>因为 <code v-pre>v-bind</code> 非常常用，我们提供了特定的简写语法：</p>\n<div class=\"language-vue\" data-highlighter=\"shiki\" data-ext=\"vue\" data-title=\"vue\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&#x3C;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">div</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> :</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">id</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">dynamicId</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">>&#x3C;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">div</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">></span></span></code></pre>\n</div><p>开头为 <code v-pre>:</code> 的 attribute 可能和一般的 HTML attribute 看起来不太一样，但它的确是合法的 attribute 名称字符，并且所有支持 Vue 的浏览器都能正确解析它。此外，他们不会出现在最终渲染的 DOM 中。简写语法是可选的，但相信在你了解了它更多的用处后，你应该会更喜欢它。</p>\n<p>接下来的指引中，我们都将在示例中使用简写语法，因为这是在实际开发中更常见的用法。</p>\n<h3 id=\"布尔型-attribute\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#布尔型-attribute\"><span>布尔型 Attribute</span></a></h3>\n<p>布尔型 attribute 依据 true / false 值来决定 attribute 是否应该存在于该元素上。disabled 就是最常见的例子之一。</p>\n<p><code v-pre>v-bind</code> 在这种场景下的行为略有不同：</p>\n<div class=\"language-vue\" data-highlighter=\"shiki\" data-ext=\"vue\" data-title=\"vue\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&#x3C;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">button</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> :</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">disabled</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">isButtonDisabled</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">>Button&#x3C;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">button</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">></span></span></code></pre>\n</div><p>当 <code v-pre>isButtonDisabled</code> 为真值或一个空字符串 (即 <code v-pre>&lt;button disabled=&quot;&quot;&gt;</code>) 时，元素会包含这个 <code v-pre>disabled</code> attribute。而当其为其他假值时 attribute 将被忽略。</p>\n<h3 id=\"动态绑定多个值\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#动态绑定多个值\"><span>动态绑定多个值</span></a></h3>\n<p>如果你有像这样的一个包含多个 attribute 的 JavaScript 对象：</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> objectOfAttrs</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  id</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"container\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  class</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"wrapper\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">};</span></span></code></pre>\n</div><p>通过不带参数的 <code v-pre>v-bind</code>，你可以将它们绑定到单个元素上：</p>\n<div class=\"language-vue\" data-highlighter=\"shiki\" data-ext=\"vue\" data-title=\"vue\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&#x3C;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">div</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> v-bind</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">objectOfAttrs</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">>&#x3C;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">div</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">></span></span></code></pre>\n</div><h2 id=\"使用-javascript-表达式\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#使用-javascript-表达式\"><span>使用 JavaScript 表达式</span></a></h2>\n<p>至此，我们仅在模板中绑定了一些简单的属性名。但是 Vue 实际上在所有的数据绑定中都支持完整的 JavaScript 表达式：</p>\n<div class=\"language-vue\" data-highlighter=\"shiki\" data-ext=\"vue\" data-title=\"vue\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">{{ number + 1 }}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">{{ ok ? \"YES\" : \"NO\" }}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">{{ message.split(\"\").reverse().join(\"\") }}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&#x3C;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">div</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> :</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">id</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">\"</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">`list-</span><span style=\"--shiki-light:#CA1243;--shiki-dark:#C678DD\">${</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">id</span><span style=\"--shiki-light:#CA1243;--shiki-dark:#C678DD\">}</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">`</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">>&#x3C;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">div</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">></span></span></code></pre>\n</div><p>这些表达式都会被作为 JavaScript ，以当前组件实例为作用域解析执行。</p>\n<p>在 Vue 模板内，JavaScript 表达式可以被使用在如下场景上：</p>\n<ul>\n<li>在文本插值中 (双大括号)</li>\n<li>在任何 Vue 指令 (以 v- 开头的特殊 attribute) attribute 的值中</li>\n</ul>\n<h3 id=\"仅支持表达式\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#仅支持表达式\"><span>仅支持表达式</span></a></h3>\n<p>每个绑定仅支持单一表达式，也就是一段能够被求值的 JavaScript 代码。一个简单的判断方法是是否可以合法地写在 return 后面。</p>\n<p>因此，下面的例子都是无效的：</p>\n<div class=\"language-vue\" data-highlighter=\"shiki\" data-ext=\"vue\" data-title=\"vue\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">&#x3C;!-- 这是一个语句，而非表达式 --></span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">{{ var a = 1 }}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">&#x3C;!-- 条件控制也不支持，请使用三元表达式 --></span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">{{ if (ok) { return message } }}</span></span></code></pre>\n</div><h3 id=\"调用函数\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#调用函数\"><span>调用函数</span></a></h3>\n<p>可以在绑定的表达式中使用一个组件暴露的方法：</p>\n<div class=\"language-vue\" data-highlighter=\"shiki\" data-ext=\"vue\" data-title=\"vue\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&#x3C;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">span</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> :</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">title</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">\"</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">toTitleDate</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">date</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">></span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">{{ formatDate(date) }}</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&#x3C;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">span</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">></span></span></code></pre>\n</div><div class=\"hint-container tip\">\n<p class=\"hint-container-title\">提示</p>\n<p>绑定在表达式中的方法在组件每次更新时都会被重新调用，因此不应该产生任何副作用，比如改变数据或触发异步操作。</p>\n</div>\n<h3 id=\"受限的全局访问\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#受限的全局访问\"><span>受限的全局访问</span></a></h3>\n<p>模板中的表达式将被沙盒化，仅能够访问到有限的全局对象列表。该列表中会暴露常用的内置全局对象，比如 <code v-pre>Math</code> 和 <code v-pre>Date</code>。</p>\n<p>没有显式包含在列表中的全局对象将不能在模板内表达式中访问，例如用户附加在 window 上的属性。然而，你也可以自行在 <code v-pre>app.config.globalProperties</code> 上显式地添加它们，供所有的 Vue 表达式使用。</p>\n<h2 id=\"指令-directives\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#指令-directives\"><span>指令 Directives</span></a></h2>\n<p>指令是带有 <code v-pre>v-</code> 前缀的特殊 attribute。Vue 提供了许多内置指令，包括上面我们所介绍的 <code v-pre>v-bind</code> 和 <code v-pre>v-html</code>。</p>\n<p>指令 attribute 的期望值为一个 JavaScript 表达式 (除了少数几个例外，即之后要讨论到的 <code v-pre>v-for</code>、<code v-pre>v-on</code> 和 <code v-pre>v-slot</code>)。一个指令的任务是在其表达式的值变化时响应式地更新 DOM。以 <code v-pre>v-if</code> 为例：</p>\n<div class=\"language-vue\" data-highlighter=\"shiki\" data-ext=\"vue\" data-title=\"vue\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&#x3C;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">p</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> v-if</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">seen</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">>Now you see me&#x3C;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">p</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">></span></span></code></pre>\n</div><p>这里，v-if 指令会基于表达式 seen 的值的真假来移除/插入该 <code v-pre>&lt;p&gt;</code> 元素。</p>\n<h3 id=\"参数-arguments\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#参数-arguments\"><span>参数 Arguments</span></a></h3>\n<p>某些指令会需要一个“参数”，在指令名后通过一个冒号隔开做标识。例如用 <code v-pre>v-bind</code> 指令来响应式地更新一个 HTML attribute：</p>\n<div class=\"language-vue\" data-highlighter=\"shiki\" data-ext=\"vue\" data-title=\"vue\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&#x3C;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">a</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> v-bind</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">href</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">url</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">> ... &#x3C;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">a</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">></span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">&#x3C;!-- 简写 --></span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&#x3C;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">a</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> :</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">href</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">url</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">> ... &#x3C;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">a</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">></span></span></code></pre>\n</div><p>这里 href 就是一个参数，它告诉 <code v-pre>v-bind</code> 指令将表达式 url 的值绑定到元素的 <code v-pre>href</code> attribute 上。在简写中，参数前的一切 (例如 <code v-pre>v-bind:</code>) 都会被缩略为一个 <code v-pre>:</code> 字符。</p>\n<p>另一个例子是 <code v-pre>v-on</code> 指令，它将监听 DOM 事件：</p>\n<div class=\"language-vue\" data-highlighter=\"shiki\" data-ext=\"vue\" data-title=\"vue\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&#x3C;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">a</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> v-on</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">click</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">doSomething</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">> ... &#x3C;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">a</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">></span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">&#x3C;!-- 简写 --></span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&#x3C;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">a</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> @</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">click</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">doSomething</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">> ... &#x3C;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">a</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">></span></span></code></pre>\n</div><p>这里的参数是要监听的事件名称：<code v-pre>click</code>。<code v-pre>v-on</code> 有一个相应的缩写，即 <code v-pre>@</code> 字符。</p>\n<h3 id=\"动态参数\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#动态参数\"><span>动态参数</span></a></h3>\n<p>同样在指令参数上也可以使用一个 JavaScript 表达式，需要包含在一对方括号内：</p>\n<div class=\"language-vue\" data-highlighter=\"shiki\" data-ext=\"vue\" data-title=\"vue\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">&#x3C;!--</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">注意，参数表达式有一些约束，</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">参见下面“动态参数值的限制”与“动态参数语法的限制”章节的解释</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">--></span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&#x3C;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">a</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> v-bind</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:[</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">attributeName</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">]=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">url</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">> ... &#x3C;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">a</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">></span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">&#x3C;!-- 简写 --></span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&#x3C;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">a</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> :[</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">attributeName</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">]=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">url</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">> ... &#x3C;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">a</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">></span></span></code></pre>\n</div><p>这里的 <code v-pre>attributeName</code> 会作为一个 JavaScript 表达式被动态执行，计算得到的值会被用作最终的参数。举例来说，如果你的组件实例有一个数据属性 <code v-pre>attributeName</code>，其值为 <code v-pre>&quot;href&quot;</code>，那么这个绑定就等价于 <code v-pre>v-bind:href</code>。</p>\n<p>相似地，你还可以将一个函数绑定到动态的事件名称上：</p>\n<div class=\"language-vue\" data-highlighter=\"shiki\" data-ext=\"vue\" data-title=\"vue\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&#x3C;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">a</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> v-on</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:[</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">eventName</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">]=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">doSomething</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">> ... &#x3C;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">a</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">></span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">&#x3C;!-- 简写 --></span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&#x3C;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">a</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> @[</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">eventName</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">]=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">doSomething</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">>&#x3C;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">a</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">></span></span></code></pre>\n</div><p>在此示例中，当 <code v-pre>eventName</code> 的值是 <code v-pre>&quot;focus&quot;</code> 时，<code v-pre>v-on:[eventName]</code> 就等价于 <code v-pre>v-on:focus</code>。</p>\n<h3 id=\"动态参数值的限制\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#动态参数值的限制\"><span>动态参数值的限制</span></a></h3>\n<p>动态参数中表达式的值应当是一个字符串，或者是 null。特殊值 null 意为显式移除该绑定。其他非字符串的值会触发警告。</p>\n<h3 id=\"动态参数语法的限制\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#动态参数语法的限制\"><span>动态参数语法的限制</span></a></h3>\n<p>动态参数表达式因为某些字符的缘故有一些语法限制，比如空格和引号，在 HTML attribute 名称中都是不合法的。例如下面的示例：</p>\n<div class=\"language-vue\" data-highlighter=\"shiki\" data-ext=\"vue\" data-title=\"vue\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">&#x3C;!-- 这会触发一个编译器警告 --></span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&#x3C;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">a</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> :[</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'foo'</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> +</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> bar</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">]=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">value</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">> ... &#x3C;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">a</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">></span></span></code></pre>\n</div><p>如果你需要传入一个复杂的动态参数，我们推荐使用计算属性替换复杂的表达式，也是 Vue 最基础的概念之一。</p>\n<p>当使用 DOM 内嵌模板 (直接写在 HTML 文件里的模板) 时，我们需要避免在名称中使用大写字母，因为浏览器会强制将其转换为小写：</p>\n<div class=\"language-vue\" data-highlighter=\"shiki\" data-ext=\"vue\" data-title=\"vue\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&#x3C;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">a</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> :[</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">someAttr</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">]=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">value</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">> ... &#x3C;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">a</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">></span></span></code></pre>\n</div><p>上面的例子将会在 DOM 内嵌模板中被转换为 <code v-pre>:[someattr]</code>。如果你的组件拥有 “someAttr” 属性而非 “someattr”，这段代码将不会工作。单文件组件内的模板不受此限制。</p>\n<h3 id=\"修饰符-modifiers\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#修饰符-modifiers\"><span>修饰符 Modifiers</span></a></h3>\n<p>修饰符是以点开头的特殊后缀，表明指令需要以一些特殊的方式被绑定。例如 <code v-pre>.prevent</code> 修饰符会告知 <code v-pre>v-on</code> 指令对触发的事件调用 <code v-pre>event.preventDefault()</code>：</p>\n<div class=\"language-vue\" data-highlighter=\"shiki\" data-ext=\"vue\" data-title=\"vue\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&#x3C;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">form</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> @</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">submit</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">prevent</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">onSubmit</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">>...&#x3C;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">form</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">></span></span></code></pre>\n</div>","tagOpen":"<template>","tagClose":"</template>"},"script":null,"scriptSetup":{"content":"<script setup lang=\"ts\">\nconst rawHtml= '<span style=\"color: red\">This should be red.</span>';\n</script>","tagOpen":"<script setup lang=\"ts\">","type":"script","contentStripped":"\nconst rawHtml= '<span style=\"color: red\">This should be red.</span>';\n","tagClose":"</script>"},"scripts":[{"content":"<script setup lang=\"ts\">\nconst rawHtml= '<span style=\"color: red\">This should be red.</span>';\n</script>","tagOpen":"<script setup lang=\"ts\">","type":"script","contentStripped":"\nconst rawHtml= '<span style=\"color: red\">This should be red.</span>';\n","tagClose":"</script>"}],"styles":[],"customBlocks":[]},"content":"\nVue 使用一种基于 HTML 的模板语法，使我们能够声明式地将其组件实例的数据绑定到呈现的 DOM 上。所有的 Vue 模板都是语法层面合法的 HTML，可以被符合规范的浏览器和 HTML 解析器解析。\n\n在底层机制中，Vue 会将模板编译成高度优化的 JavaScript 代码。结合响应式系统，当应用状态变更时，Vue 能够智能地推导出需要重新渲染的组件的最少数量，并应用最少的 DOM 操作。\n\n如果你对虚拟 DOM 的概念比较熟悉，并且偏好直接使用 JavaScript，你也可以结合可选的 JSX 支持直接手写渲染函数而不采用模板。但请注意，这将不会享受到和模板同等级别的编译时优化。\n\n## 文本插值\n\n最基本的数据绑定形式是文本插值，它使用的是“Mustache”语法 (即双大括号)：\n\n```vue\n<span>Message: {{ msg }}</span>\n```\n\n双大括号标签会被替换为相应组件实例中 `msg` 属性的值。同时每次 `msg` 属性更改时它也会同步更新。\n\n## 原始 HTML\n\n双大括号会将数据解释为纯文本，而不是 HTML。若想插入 HTML，你需要使用 `v-html` 指令：\n\n```vue\n<p>Using text interpolation: {{ rawHtml }}</p>\n<p>Using v-html directive: <span v-html=\"rawHtml\"></span></p>\n```\n\nUsing text interpolation: {{ rawHtml }}\n\nUsing v-html directive: <span v-html=\"rawHtml\"></span>\n\n这里我们遇到了一个新的概念。这里看到的 `v-html` attribute 被称为一个指令。指令由 `v-` 作为前缀，表明它们是一些由 Vue 提供的特殊 attribute，你可能已经猜到了，它们将为渲染的 DOM 应用特殊的响应式行为。这里我们做的事情简单来说就是：在当前组件实例上，将此元素的 innerHTML 与 `rawHtml` 属性保持同步。\n\n`span` 的内容将会被替换为 `rawHtml` 属性的值，插值为纯 HTML——数据绑定将会被忽略。\n\n::: note\n\n你不能使用 `v-html` 来拼接组合模板，因为 Vue 不是一个基于字符串的模板引擎。在使用 Vue 时，应当使用组件作为 UI 重用和组合的基本单元。\n\n:::\n\n::: warning 安全警告\n\n在网站上动态渲染任意 HTML 是非常危险的，因为这非常容易造成 XSS 漏洞。请仅在内容安全可信时再使用 `v-html`，并且永远不要使用用户提供的 HTML 内容。\n\n:::\n\n## Attribute 绑定\n\n双大括号不能在 HTML attributes 中使用。想要响应式地绑定一个 attribute，应该使用 `v-bind` 指令：\n\n```vue\n<div v-bind:id=\"dynamicId\"></div>\n```\n\n`v-bind` 指令指示 Vue 将元素的 `id` attribute 与组件的 `dynamicId` 属性保持一致。如果绑定的值是 `null` 或者 `undefined`，那么该 attribute 将会从渲染的元素上移除。\n\n### 简写\n\n因为 `v-bind` 非常常用，我们提供了特定的简写语法：\n\n```vue\n<div :id=\"dynamicId\"></div>\n```\n\n开头为 `:` 的 attribute 可能和一般的 HTML attribute 看起来不太一样，但它的确是合法的 attribute 名称字符，并且所有支持 Vue 的浏览器都能正确解析它。此外，他们不会出现在最终渲染的 DOM 中。简写语法是可选的，但相信在你了解了它更多的用处后，你应该会更喜欢它。\n\n接下来的指引中，我们都将在示例中使用简写语法，因为这是在实际开发中更常见的用法。\n\n### 布尔型 Attribute\n\n布尔型 attribute 依据 true / false 值来决定 attribute 是否应该存在于该元素上。disabled 就是最常见的例子之一。\n\n`v-bind` 在这种场景下的行为略有不同：\n\n```vue\n<button :disabled=\"isButtonDisabled\">Button</button>\n```\n\n当 `isButtonDisabled` 为真值或一个空字符串 (即 `<button disabled=\"\">`) 时，元素会包含这个 `disabled` attribute。而当其为其他假值时 attribute 将被忽略。\n\n### 动态绑定多个值\n\n如果你有像这样的一个包含多个 attribute 的 JavaScript 对象：\n\n```js\nconst objectOfAttrs = {\n  id: \"container\",\n  class: \"wrapper\",\n};\n```\n\n通过不带参数的 `v-bind`，你可以将它们绑定到单个元素上：\n\n```vue\n<div v-bind=\"objectOfAttrs\"></div>\n```\n\n## 使用 JavaScript 表达式\n\n至此，我们仅在模板中绑定了一些简单的属性名。但是 Vue 实际上在所有的数据绑定中都支持完整的 JavaScript 表达式：\n\n```vue\n{{ number + 1 }}\n\n{{ ok ? \"YES\" : \"NO\" }}\n\n{{ message.split(\"\").reverse().join(\"\") }}\n\n<div :id=\"`list-${id}`\"></div>\n```\n\n这些表达式都会被作为 JavaScript ，以当前组件实例为作用域解析执行。\n\n在 Vue 模板内，JavaScript 表达式可以被使用在如下场景上：\n\n- 在文本插值中 (双大括号)\n- 在任何 Vue 指令 (以 v- 开头的特殊 attribute) attribute 的值中\n\n### 仅支持表达式\n\n每个绑定仅支持单一表达式，也就是一段能够被求值的 JavaScript 代码。一个简单的判断方法是是否可以合法地写在 return 后面。\n\n因此，下面的例子都是无效的：\n\n```vue\n<!-- 这是一个语句，而非表达式 -->\n{{ var a = 1 }}\n\n<!-- 条件控制也不支持，请使用三元表达式 -->\n{{ if (ok) { return message } }}\n```\n\n### 调用函数\n\n可以在绑定的表达式中使用一个组件暴露的方法：\n\n```vue\n<span :title=\"toTitleDate(date)\">\n{{ formatDate(date) }}\n</span>\n```\n\n::: tip\n\n绑定在表达式中的方法在组件每次更新时都会被重新调用，因此不应该产生任何副作用，比如改变数据或触发异步操作。\n\n:::\n\n### 受限的全局访问\n\n模板中的表达式将被沙盒化，仅能够访问到有限的全局对象列表。该列表中会暴露常用的内置全局对象，比如 `Math` 和 `Date`。\n\n没有显式包含在列表中的全局对象将不能在模板内表达式中访问，例如用户附加在 window 上的属性。然而，你也可以自行在 `app.config.globalProperties` 上显式地添加它们，供所有的 Vue 表达式使用。\n\n## 指令 Directives\n\n指令是带有 `v-` 前缀的特殊 attribute。Vue 提供了许多内置指令，包括上面我们所介绍的 `v-bind` 和 `v-html`。\n\n指令 attribute 的期望值为一个 JavaScript 表达式 (除了少数几个例外，即之后要讨论到的 `v-for`、`v-on` 和 `v-slot`)。一个指令的任务是在其表达式的值变化时响应式地更新 DOM。以 `v-if` 为例：\n\n```vue\n<p v-if=\"seen\">Now you see me</p>\n```\n\n这里，v-if 指令会基于表达式 seen 的值的真假来移除/插入该 `<p>` 元素。\n\n### 参数 Arguments\n\n某些指令会需要一个“参数”，在指令名后通过一个冒号隔开做标识。例如用 `v-bind` 指令来响应式地更新一个 HTML attribute：\n\n```vue\n<a v-bind:href=\"url\"> ... </a>\n\n<!-- 简写 -->\n\n<a :href=\"url\"> ... </a>\n```\n\n这里 href 就是一个参数，它告诉 `v-bind` 指令将表达式 url 的值绑定到元素的 `href` attribute 上。在简写中，参数前的一切 (例如 `v-bind:`) 都会被缩略为一个 `:` 字符。\n\n另一个例子是 `v-on` 指令，它将监听 DOM 事件：\n\n```vue\n<a v-on:click=\"doSomething\"> ... </a>\n\n<!-- 简写 -->\n<a @click=\"doSomething\"> ... </a>\n```\n\n这里的参数是要监听的事件名称：`click`。`v-on` 有一个相应的缩写，即 `@` 字符。\n\n### 动态参数\n\n同样在指令参数上也可以使用一个 JavaScript 表达式，需要包含在一对方括号内：\n\n```vue\n<!--\n注意，参数表达式有一些约束，\n参见下面“动态参数值的限制”与“动态参数语法的限制”章节的解释\n-->\n<a v-bind:[attributeName]=\"url\"> ... </a>\n\n<!-- 简写 -->\n<a :[attributeName]=\"url\"> ... </a>\n```\n\n这里的 `attributeName` 会作为一个 JavaScript 表达式被动态执行，计算得到的值会被用作最终的参数。举例来说，如果你的组件实例有一个数据属性 `attributeName`，其值为 `\"href\"`，那么这个绑定就等价于 `v-bind:href`。\n\n相似地，你还可以将一个函数绑定到动态的事件名称上：\n\n```vue\n<a v-on:[eventName]=\"doSomething\"> ... </a>\n\n<!-- 简写 -->\n<a @[eventName]=\"doSomething\"></a>\n```\n\n在此示例中，当 `eventName` 的值是 `\"focus\"` 时，`v-on:[eventName]` 就等价于 `v-on:focus`。\n\n### 动态参数值的限制\n\n动态参数中表达式的值应当是一个字符串，或者是 null。特殊值 null 意为显式移除该绑定。其他非字符串的值会触发警告。\n\n### 动态参数语法的限制\n\n动态参数表达式因为某些字符的缘故有一些语法限制，比如空格和引号，在 HTML attribute 名称中都是不合法的。例如下面的示例：\n\n```vue\n<!-- 这会触发一个编译器警告 -->\n<a :['foo' + bar]=\"value\"> ... </a>\n```\n\n如果你需要传入一个复杂的动态参数，我们推荐使用计算属性替换复杂的表达式，也是 Vue 最基础的概念之一。\n\n当使用 DOM 内嵌模板 (直接写在 HTML 文件里的模板) 时，我们需要避免在名称中使用大写字母，因为浏览器会强制将其转换为小写：\n\n```vue\n<a :[someAttr]=\"value\"> ... </a>\n```\n\n上面的例子将会在 DOM 内嵌模板中被转换为 `:[someattr]`。如果你的组件拥有 “someAttr” 属性而非 “someattr”，这段代码将不会工作。单文件组件内的模板不受此限制。\n\n### 修饰符 Modifiers\n\n修饰符是以点开头的特殊后缀，表明指令需要以一些特殊的方式被绑定。例如 `.prevent` 修饰符会告知 `v-on` 指令对触发的事件调用 `event.preventDefault()`：\n\n```vue\n<form @submit.prevent=\"onSubmit\">...</form>\n```\n\n<script setup lang=\"ts\">\nconst rawHtml= '<span style=\"color: red\">This should be red.</span>';\n</script>\n","excerpt":"","title":"","headers":[{"level":2,"title":"文本插值","slug":"文本插值","link":"#文本插值","children":[]},{"level":2,"title":"原始 HTML","slug":"原始-html","link":"#原始-html","children":[]},{"level":2,"title":"Attribute 绑定","slug":"attribute-绑定","link":"#attribute-绑定","children":[{"level":3,"title":"简写","slug":"简写","link":"#简写","children":[]},{"level":3,"title":"布尔型 Attribute","slug":"布尔型-attribute","link":"#布尔型-attribute","children":[]},{"level":3,"title":"动态绑定多个值","slug":"动态绑定多个值","link":"#动态绑定多个值","children":[]}]},{"level":2,"title":"使用 JavaScript 表达式","slug":"使用-javascript-表达式","link":"#使用-javascript-表达式","children":[{"level":3,"title":"仅支持表达式","slug":"仅支持表达式","link":"#仅支持表达式","children":[]},{"level":3,"title":"调用函数","slug":"调用函数","link":"#调用函数","children":[]},{"level":3,"title":"受限的全局访问","slug":"受限的全局访问","link":"#受限的全局访问","children":[]}]},{"level":2,"title":"指令 Directives","slug":"指令-directives","link":"#指令-directives","children":[{"level":3,"title":"参数 Arguments","slug":"参数-arguments","link":"#参数-arguments","children":[]},{"level":3,"title":"动态参数","slug":"动态参数","link":"#动态参数","children":[]},{"level":3,"title":"动态参数值的限制","slug":"动态参数值的限制","link":"#动态参数值的限制","children":[]},{"level":3,"title":"动态参数语法的限制","slug":"动态参数语法的限制","link":"#动态参数语法的限制","children":[]},{"level":3,"title":"修饰符 Modifiers","slug":"修饰符-modifiers","link":"#修饰符-modifiers","children":[]}]}]}}
