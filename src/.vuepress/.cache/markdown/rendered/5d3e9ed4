{"content":"<p>在计算机程序的开发过程中，随着程序代码越写越多，在一个文件里代码就会越来越长，越来越不容易维护。为了编写可维护的代码，我们把很多函数分组，分别放到不同的文件里，这样，每个文件包含的代码就相对较少，很多编程语言都采用这种组织代码的方式。在 Python 中，一个 <code v-pre>.py</code> 文件就称之为一个模块 (Module) 。</p>\n<!-- more -->\n<h2 id=\"优点\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#优点\"><span>优点</span></a></h2>\n<ol>\n<li>\n<p>使用模块大大提高了代码的可维护性。当一个模块编写完毕，就可以被其他地方引用。我们在编写程序的时候，也经常引用其他模块，包括 Python 内置的模块和来自第三方的模块。</p>\n</li>\n<li>\n<p>使用模块可以避免函数名和变量名冲突。相同名字的函数和变量完全可以分别存在不同的模块中，因此，我们自己在编写模块时，不必考虑名字会与其他模块冲突。但是也要注意，尽量不要与内置函数名字冲突。</p>\n</li>\n</ol>\n<div class=\"hint-container info\">\n<p class=\"hint-container-title\">相关信息</p>\n<p><a href=\"http://docs.python.org/3/library/functions.html\" target=\"_blank\" rel=\"noopener noreferrer\">Python 的所有内置函数</a></p>\n</div>\n<h2 id=\"包\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#包\"><span>包</span></a></h2>\n<p>为了避免模块名冲突，Python 引入了按目录来组织模块的方法，称为包 (Package) 。</p>\n<p>举个例子，一个 <code v-pre>abc.py</code> 的文件就是一个名字叫 abc 的模块，一个 <code v-pre>xyz.py</code> 的文件就是一个名字叫 xyz 的模块。</p>\n<p>现在，假设我们的 abc 和 xyz 这两个模块名字与其他模块冲突了，于是我们可以通过包来组织模块，避免冲突。方法是选择一个顶层包名，比如 hopestudio，按照如下目录存放:</p>\n<div class=\"language-\" data-highlighter=\"shiki\" data-ext=\"\" data-title=\"\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span>hopestudio</span></span>\n<span class=\"line\"><span>├─ __init__.py</span></span>\n<span class=\"line\"><span>├─ abc.py</span></span>\n<span class=\"line\"><span>└─ xyz.py</span></span></code></pre>\n</div><p>引入了包以后，只要顶层的包名不与别人冲突，那所有模块都不会与别人冲突。现在，<code v-pre>abc.py</code> 模块的名字就变成了 <code v-pre>hopestudio.abc</code>，类似的，<code v-pre>xyz.py</code> 的模块名变成了 <code v-pre>hopestudio.xyz</code>。</p>\n<p>请注意，每一个包目录下面都会有一个 <code v-pre>__init__.py</code> 的文件，这个文件是必须存在的，否则，Python 就把这个目录当成普通目录，而不是一个包。<code v-pre>__init__.py</code>可以是空文件，也可以有 Python 代码，因为 <code v-pre>__init__.py</code> 本身就是一个模块，而它的模块名就是 hopestudio。</p>\n<p>类似的，可以有多级目录，组成多级层次的包结构。比如如下的目录结构:</p>\n<div class=\"language-\" data-highlighter=\"shiki\" data-ext=\"\" data-title=\"\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span>hopestudio</span></span>\n<span class=\"line\"><span> ├─ web</span></span>\n<span class=\"line\"><span> │  ├─ __init__.py</span></span>\n<span class=\"line\"><span> │  ├─ utils.py</span></span>\n<span class=\"line\"><span> │  └─ www.py</span></span>\n<span class=\"line\"><span> ├─ __init__.py</span></span>\n<span class=\"line\"><span> ├─ abc.py</span></span>\n<span class=\"line\"><span> └─ utils.py</span></span></code></pre>\n</div><p>文件 <code v-pre>www.py</code> 的模块名就是 <code v-pre>hopestudio.web.www</code>，两个文件 <code v-pre>utils.py</code> 的模块名分别是 <code v-pre>hopestudio.utils</code> 和 <code v-pre>hopestudio.web.utils</code>。</p>\n<div class=\"hint-container warning\">\n<p class=\"hint-container-title\">注意</p>\n<p>自己创建模块时要注意命名，不能和 Python 自带的模块名称冲突。例如，系统自带了 sys 模块，自己的模块就不可命名为 <code v-pre>sys.py</code>，否则将无法导入系统自带的 sys 模块。</p>\n</div>\n<h2 id=\"总结\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#总结\"><span>总结</span></a></h2>\n<ul>\n<li>\n<p>模块是一组 Python 代码的集合，可以使用其他模块，也可以被其他模块使用。</p>\n</li>\n<li>\n<p>创建自己的模块时，要注意:</p>\n<ol>\n<li>模块名要遵循 Python 变量命名规范，不要使用中文、特殊字符；</li>\n<li>模块名不要和系统模块名冲突，最好先查看系统是否已存在该模块，检查方法是在 Python 交互环境执行 <code v-pre>import abc</code>，若成功则说明系统存在此模块。</li>\n</ol>\n</li>\n</ul>\n","env":{"base":"/","filePath":"/Users/carson/Desktop/Mister-Hope.github.io-main/src/code/language/python/module/intro.md","filePathRelative":"code/language/python/module/intro.md","frontmatter":{"title":"模块","icon":"info","author":"廖雪峰","date":"2021-03-27T00:00:00.000Z","category":"Python"},"sfcBlocks":{"template":{"type":"template","content":"<template><p>在计算机程序的开发过程中，随着程序代码越写越多，在一个文件里代码就会越来越长，越来越不容易维护。为了编写可维护的代码，我们把很多函数分组，分别放到不同的文件里，这样，每个文件包含的代码就相对较少，很多编程语言都采用这种组织代码的方式。在 Python 中，一个 <code v-pre>.py</code> 文件就称之为一个模块 (Module) 。</p>\n<!-- more -->\n<h2 id=\"优点\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#优点\"><span>优点</span></a></h2>\n<ol>\n<li>\n<p>使用模块大大提高了代码的可维护性。当一个模块编写完毕，就可以被其他地方引用。我们在编写程序的时候，也经常引用其他模块，包括 Python 内置的模块和来自第三方的模块。</p>\n</li>\n<li>\n<p>使用模块可以避免函数名和变量名冲突。相同名字的函数和变量完全可以分别存在不同的模块中，因此，我们自己在编写模块时，不必考虑名字会与其他模块冲突。但是也要注意，尽量不要与内置函数名字冲突。</p>\n</li>\n</ol>\n<div class=\"hint-container info\">\n<p class=\"hint-container-title\">相关信息</p>\n<p><a href=\"http://docs.python.org/3/library/functions.html\" target=\"_blank\" rel=\"noopener noreferrer\">Python 的所有内置函数</a></p>\n</div>\n<h2 id=\"包\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#包\"><span>包</span></a></h2>\n<p>为了避免模块名冲突，Python 引入了按目录来组织模块的方法，称为包 (Package) 。</p>\n<p>举个例子，一个 <code v-pre>abc.py</code> 的文件就是一个名字叫 abc 的模块，一个 <code v-pre>xyz.py</code> 的文件就是一个名字叫 xyz 的模块。</p>\n<p>现在，假设我们的 abc 和 xyz 这两个模块名字与其他模块冲突了，于是我们可以通过包来组织模块，避免冲突。方法是选择一个顶层包名，比如 hopestudio，按照如下目录存放:</p>\n<div class=\"language-\" data-highlighter=\"shiki\" data-ext=\"\" data-title=\"\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span>hopestudio</span></span>\n<span class=\"line\"><span>├─ __init__.py</span></span>\n<span class=\"line\"><span>├─ abc.py</span></span>\n<span class=\"line\"><span>└─ xyz.py</span></span></code></pre>\n</div><p>引入了包以后，只要顶层的包名不与别人冲突，那所有模块都不会与别人冲突。现在，<code v-pre>abc.py</code> 模块的名字就变成了 <code v-pre>hopestudio.abc</code>，类似的，<code v-pre>xyz.py</code> 的模块名变成了 <code v-pre>hopestudio.xyz</code>。</p>\n<p>请注意，每一个包目录下面都会有一个 <code v-pre>__init__.py</code> 的文件，这个文件是必须存在的，否则，Python 就把这个目录当成普通目录，而不是一个包。<code v-pre>__init__.py</code>可以是空文件，也可以有 Python 代码，因为 <code v-pre>__init__.py</code> 本身就是一个模块，而它的模块名就是 hopestudio。</p>\n<p>类似的，可以有多级目录，组成多级层次的包结构。比如如下的目录结构:</p>\n<div class=\"language-\" data-highlighter=\"shiki\" data-ext=\"\" data-title=\"\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span>hopestudio</span></span>\n<span class=\"line\"><span> ├─ web</span></span>\n<span class=\"line\"><span> │  ├─ __init__.py</span></span>\n<span class=\"line\"><span> │  ├─ utils.py</span></span>\n<span class=\"line\"><span> │  └─ www.py</span></span>\n<span class=\"line\"><span> ├─ __init__.py</span></span>\n<span class=\"line\"><span> ├─ abc.py</span></span>\n<span class=\"line\"><span> └─ utils.py</span></span></code></pre>\n</div><p>文件 <code v-pre>www.py</code> 的模块名就是 <code v-pre>hopestudio.web.www</code>，两个文件 <code v-pre>utils.py</code> 的模块名分别是 <code v-pre>hopestudio.utils</code> 和 <code v-pre>hopestudio.web.utils</code>。</p>\n<div class=\"hint-container warning\">\n<p class=\"hint-container-title\">注意</p>\n<p>自己创建模块时要注意命名，不能和 Python 自带的模块名称冲突。例如，系统自带了 sys 模块，自己的模块就不可命名为 <code v-pre>sys.py</code>，否则将无法导入系统自带的 sys 模块。</p>\n</div>\n<h2 id=\"总结\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#总结\"><span>总结</span></a></h2>\n<ul>\n<li>\n<p>模块是一组 Python 代码的集合，可以使用其他模块，也可以被其他模块使用。</p>\n</li>\n<li>\n<p>创建自己的模块时，要注意:</p>\n<ol>\n<li>模块名要遵循 Python 变量命名规范，不要使用中文、特殊字符；</li>\n<li>模块名不要和系统模块名冲突，最好先查看系统是否已存在该模块，检查方法是在 Python 交互环境执行 <code v-pre>import abc</code>，若成功则说明系统存在此模块。</li>\n</ol>\n</li>\n</ul>\n</template>","contentStripped":"<p>在计算机程序的开发过程中，随着程序代码越写越多，在一个文件里代码就会越来越长，越来越不容易维护。为了编写可维护的代码，我们把很多函数分组，分别放到不同的文件里，这样，每个文件包含的代码就相对较少，很多编程语言都采用这种组织代码的方式。在 Python 中，一个 <code v-pre>.py</code> 文件就称之为一个模块 (Module) 。</p>\n<!-- more -->\n<h2 id=\"优点\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#优点\"><span>优点</span></a></h2>\n<ol>\n<li>\n<p>使用模块大大提高了代码的可维护性。当一个模块编写完毕，就可以被其他地方引用。我们在编写程序的时候，也经常引用其他模块，包括 Python 内置的模块和来自第三方的模块。</p>\n</li>\n<li>\n<p>使用模块可以避免函数名和变量名冲突。相同名字的函数和变量完全可以分别存在不同的模块中，因此，我们自己在编写模块时，不必考虑名字会与其他模块冲突。但是也要注意，尽量不要与内置函数名字冲突。</p>\n</li>\n</ol>\n<div class=\"hint-container info\">\n<p class=\"hint-container-title\">相关信息</p>\n<p><a href=\"http://docs.python.org/3/library/functions.html\" target=\"_blank\" rel=\"noopener noreferrer\">Python 的所有内置函数</a></p>\n</div>\n<h2 id=\"包\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#包\"><span>包</span></a></h2>\n<p>为了避免模块名冲突，Python 引入了按目录来组织模块的方法，称为包 (Package) 。</p>\n<p>举个例子，一个 <code v-pre>abc.py</code> 的文件就是一个名字叫 abc 的模块，一个 <code v-pre>xyz.py</code> 的文件就是一个名字叫 xyz 的模块。</p>\n<p>现在，假设我们的 abc 和 xyz 这两个模块名字与其他模块冲突了，于是我们可以通过包来组织模块，避免冲突。方法是选择一个顶层包名，比如 hopestudio，按照如下目录存放:</p>\n<div class=\"language-\" data-highlighter=\"shiki\" data-ext=\"\" data-title=\"\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span>hopestudio</span></span>\n<span class=\"line\"><span>├─ __init__.py</span></span>\n<span class=\"line\"><span>├─ abc.py</span></span>\n<span class=\"line\"><span>└─ xyz.py</span></span></code></pre>\n</div><p>引入了包以后，只要顶层的包名不与别人冲突，那所有模块都不会与别人冲突。现在，<code v-pre>abc.py</code> 模块的名字就变成了 <code v-pre>hopestudio.abc</code>，类似的，<code v-pre>xyz.py</code> 的模块名变成了 <code v-pre>hopestudio.xyz</code>。</p>\n<p>请注意，每一个包目录下面都会有一个 <code v-pre>__init__.py</code> 的文件，这个文件是必须存在的，否则，Python 就把这个目录当成普通目录，而不是一个包。<code v-pre>__init__.py</code>可以是空文件，也可以有 Python 代码，因为 <code v-pre>__init__.py</code> 本身就是一个模块，而它的模块名就是 hopestudio。</p>\n<p>类似的，可以有多级目录，组成多级层次的包结构。比如如下的目录结构:</p>\n<div class=\"language-\" data-highlighter=\"shiki\" data-ext=\"\" data-title=\"\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span>hopestudio</span></span>\n<span class=\"line\"><span> ├─ web</span></span>\n<span class=\"line\"><span> │  ├─ __init__.py</span></span>\n<span class=\"line\"><span> │  ├─ utils.py</span></span>\n<span class=\"line\"><span> │  └─ www.py</span></span>\n<span class=\"line\"><span> ├─ __init__.py</span></span>\n<span class=\"line\"><span> ├─ abc.py</span></span>\n<span class=\"line\"><span> └─ utils.py</span></span></code></pre>\n</div><p>文件 <code v-pre>www.py</code> 的模块名就是 <code v-pre>hopestudio.web.www</code>，两个文件 <code v-pre>utils.py</code> 的模块名分别是 <code v-pre>hopestudio.utils</code> 和 <code v-pre>hopestudio.web.utils</code>。</p>\n<div class=\"hint-container warning\">\n<p class=\"hint-container-title\">注意</p>\n<p>自己创建模块时要注意命名，不能和 Python 自带的模块名称冲突。例如，系统自带了 sys 模块，自己的模块就不可命名为 <code v-pre>sys.py</code>，否则将无法导入系统自带的 sys 模块。</p>\n</div>\n<h2 id=\"总结\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#总结\"><span>总结</span></a></h2>\n<ul>\n<li>\n<p>模块是一组 Python 代码的集合，可以使用其他模块，也可以被其他模块使用。</p>\n</li>\n<li>\n<p>创建自己的模块时，要注意:</p>\n<ol>\n<li>模块名要遵循 Python 变量命名规范，不要使用中文、特殊字符；</li>\n<li>模块名不要和系统模块名冲突，最好先查看系统是否已存在该模块，检查方法是在 Python 交互环境执行 <code v-pre>import abc</code>，若成功则说明系统存在此模块。</li>\n</ol>\n</li>\n</ul>\n","tagOpen":"<template>","tagClose":"</template>"},"script":null,"scriptSetup":null,"scripts":[],"styles":[],"customBlocks":[]},"content":"\n在计算机程序的开发过程中，随着程序代码越写越多，在一个文件里代码就会越来越长，越来越不容易维护。为了编写可维护的代码，我们把很多函数分组，分别放到不同的文件里，这样，每个文件包含的代码就相对较少，很多编程语言都采用这种组织代码的方式。在 Python 中，一个 `.py` 文件就称之为一个模块 (Module) 。\n\n<!-- more -->\n\n## 优点\n\n1. 使用模块大大提高了代码的可维护性。当一个模块编写完毕，就可以被其他地方引用。我们在编写程序的时候，也经常引用其他模块，包括 Python 内置的模块和来自第三方的模块。\n\n1. 使用模块可以避免函数名和变量名冲突。相同名字的函数和变量完全可以分别存在不同的模块中，因此，我们自己在编写模块时，不必考虑名字会与其他模块冲突。但是也要注意，尽量不要与内置函数名字冲突。\n\n::: info\n\n[Python 的所有内置函数](http://docs.python.org/3/library/functions.html)\n\n:::\n\n## 包\n\n为了避免模块名冲突，Python 引入了按目录来组织模块的方法，称为包 (Package) 。\n\n举个例子，一个 `abc.py` 的文件就是一个名字叫 abc 的模块，一个 `xyz.py` 的文件就是一个名字叫 xyz 的模块。\n\n现在，假设我们的 abc 和 xyz 这两个模块名字与其他模块冲突了，于是我们可以通过包来组织模块，避免冲突。方法是选择一个顶层包名，比如 hopestudio，按照如下目录存放:\n\n```\nhopestudio\n├─ __init__.py\n├─ abc.py\n└─ xyz.py\n```\n\n引入了包以后，只要顶层的包名不与别人冲突，那所有模块都不会与别人冲突。现在，`abc.py` 模块的名字就变成了 `hopestudio.abc`，类似的，`xyz.py` 的模块名变成了 `hopestudio.xyz`。\n\n请注意，每一个包目录下面都会有一个 `__init__.py` 的文件，这个文件是必须存在的，否则，Python 就把这个目录当成普通目录，而不是一个包。`__init__.py`可以是空文件，也可以有 Python 代码，因为 `__init__.py` 本身就是一个模块，而它的模块名就是 hopestudio。\n\n类似的，可以有多级目录，组成多级层次的包结构。比如如下的目录结构:\n\n```\nhopestudio\n ├─ web\n │  ├─ __init__.py\n │  ├─ utils.py\n │  └─ www.py\n ├─ __init__.py\n ├─ abc.py\n └─ utils.py\n```\n\n文件 `www.py` 的模块名就是 `hopestudio.web.www`，两个文件 `utils.py` 的模块名分别是 `hopestudio.utils` 和 `hopestudio.web.utils`。\n\n::: warning\n\n自己创建模块时要注意命名，不能和 Python 自带的模块名称冲突。例如，系统自带了 sys 模块，自己的模块就不可命名为 `sys.py`，否则将无法导入系统自带的 sys 模块。\n\n:::\n\n## 总结\n\n- 模块是一组 Python 代码的集合，可以使用其他模块，也可以被其他模块使用。\n\n- 创建自己的模块时，要注意:\n\n  1. 模块名要遵循 Python 变量命名规范，不要使用中文、特殊字符；\n  2. 模块名不要和系统模块名冲突，最好先查看系统是否已存在该模块，检查方法是在 Python 交互环境执行 `import abc`，若成功则说明系统存在此模块。\n","excerpt":"","title":"","headers":[{"level":2,"title":"优点","slug":"优点","link":"#优点","children":[]},{"level":2,"title":"包","slug":"包","link":"#包","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}]}}
