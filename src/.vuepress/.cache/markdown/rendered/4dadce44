{"content":"<p>有些时候，您必须把某些文件放到 Git 工作目录中，但又不能提交它们，比如保存了数据库密码的配置文件啦，等等，每次 <code v-pre>git status</code> 都会显示 <code v-pre>Untracked files</code> ...，有强迫症的童鞋心里肯定不爽。</p>\n<p>好在 Git 考虑到了大家的感受，这个问题解决起来也很简单，在 Git 工作区的根目录下创建一个特殊的 <code v-pre>.gitignore</code> 文件，然后把要忽略的文件名填进去，Git 就会自动忽略这些文件。</p>\n<p>忽略文件的原则是:</p>\n<ul>\n<li>忽略操作系统自动生成的文件，比如缩略图等；</li>\n<li>忽略编译生成的中间文件、可执行文件等，也就是如果一个文件是通过另一个文件自动生成的，那自动生成的文件就没必要放进版本库，比如 Java 编译产生的 <code v-pre>.class</code> 文件；</li>\n<li>忽略您自己的带有敏感信息的配置文件，比如存放口令的配置文件。</li>\n</ul>\n<p>举个例子:</p>\n<p>假设您在 Windows 下进行 Python 开发，Windows 会自动在有图片的目录下生成隐藏的缩略图文件，如果有自定义目录，目录下就会有 <code v-pre>Desktop.ini</code> 文件，因此您需要忽略 Windows 自动生成的垃圾文件:</p>\n<div class=\"language-text\" data-highlighter=\"shiki\" data-ext=\"text\" data-title=\"text\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span>Thumbs.db</span></span>\n<span class=\"line\"><span>ehthumbs.db</span></span>\n<span class=\"line\"><span>Desktop.ini</span></span></code></pre>\n</div><p>然后，继续忽略 Python 编译产生的 <code v-pre>.pyc</code>、<code v-pre>.pyo</code>、<code v-pre>dist</code> 等文件或目录:</p>\n<div class=\"language-text\" data-highlighter=\"shiki\" data-ext=\"text\" data-title=\"text\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span>_.py[cod]</span></span>\n<span class=\"line\"><span>_.so</span></span>\n<span class=\"line\"><span>_.egg</span></span>\n<span class=\"line\"><span>_.egg-info</span></span>\n<span class=\"line\"><span>dist</span></span>\n<span class=\"line\"><span>build</span></span></code></pre>\n</div><p>加上您自己定义的文件，最终得到一个完整的 <code v-pre>.gitignore</code> 文件，内容如下:</p>\n<div class=\"language-text line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"text\" data-title=\"text\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span># Windows:</span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span>Thumbs.db</span></span>\n<span class=\"line\"><span>ehthumbs.db</span></span>\n<span class=\"line\"><span>Desktop.ini</span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span># Python:</span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span>_.py[cod]</span></span>\n<span class=\"line\"><span>_.so</span></span>\n<span class=\"line\"><span>_.egg</span></span>\n<span class=\"line\"><span>_.egg-info</span></span>\n<span class=\"line\"><span>dist</span></span>\n<span class=\"line\"><span>build</span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span># My configurations:</span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span>db.ini</span></span>\n<span class=\"line\"><span>deploy_key_rsa</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>最后一步就是把 <code v-pre>.gitignore</code> 也提交到 Git，就完成了! 当然检验 <code v-pre>.gitignore</code> 的标准是 <code v-pre>git status</code> 命令是不是说 <code v-pre>working directory clean</code>。</p>\n<p>使用 Windows 的童鞋注意了，如果您在资源管理器里新建一个 <code v-pre>.gitignore</code> 文件，它会非常弱智地提示您必须输入文件名，但是在文本编辑器里“保存”或者“另存为”就可以把文件保存为 <code v-pre>.gitignore</code> 了。</p>\n<p>有些时候，您想添加一个文件到 Git，但发现添加不了，原因是这个文件被 <code v-pre>.gitignore</code> 忽略了:</p>\n<div class=\"language-sh\" data-highlighter=\"shiki\" data-ext=\"sh\" data-title=\"sh\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">$</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> git</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> add</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> App.class</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">The</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> following</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> paths</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> are</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> ignored</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> by</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> one</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> of</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> your</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> .gitignore</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> files:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">App.class</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">Use</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> -f</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> if</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> you</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> really</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> want</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> to</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> add</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> them.</span></span></code></pre>\n</div><p>如果您确实想添加该文件，可以用 <code v-pre>-f</code> 强制添加到 Git:</p>\n<div class=\"language-sh\" data-highlighter=\"shiki\" data-ext=\"sh\" data-title=\"sh\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">git</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> add</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> -f</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> App.class</span></span></code></pre>\n</div><p>或者您发现，可能是 <code v-pre>.gitignore</code> 写得有问题，需要找出来到底哪个规则写错了，可以用 <code v-pre>git check-ignore</code> 命令检查:</p>\n<div class=\"language-sh\" data-highlighter=\"shiki\" data-ext=\"sh\" data-title=\"sh\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">$</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> git</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> check-ignore</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> -v</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> App.class</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">.gitignore:3:*.class</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">    App.class</span></span></code></pre>\n</div><p>Git 会告诉我们，<code v-pre>.gitignore</code> 的第 3 行规则忽略了该文件，于是我们就可以知道应该修订哪个规则。</p>\n<h2 id=\"格式规范\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#格式规范\"><span>格式规范</span></a></h2>\n<ul>\n<li>\n<p>所有空行或者以 # 开头的行都会被 Git 忽略。</p>\n</li>\n<li>\n<p>可以使用标准的 glob 模式匹配，它会递归地应用在整个工作区中。</p>\n</li>\n<li>\n<p>匹配模式可以以(<code v-pre>/</code>)开头防止递归。</p>\n</li>\n<li>\n<p>匹配模式可以以(<code v-pre>/</code>)结尾指定目录。</p>\n</li>\n<li>\n<p>要忽略指定模式以外的文件或目录，可以在模式前加上叹号(<code v-pre>!</code>)取反。</p>\n</li>\n</ul>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">glob 模式</p>\n<p>所谓的 glob 模式是指 shell 所使用的简化了的正则表达式。星号(<code v-pre>*</code>)匹配零个或多个任意字符；<code v-pre>[abc]</code> 匹配任何一个列在方括号中的字符 (这个例子要么匹配一个 <code v-pre>a</code>，要么匹配一个 <code v-pre>b</code>，要么匹配一个 <code v-pre>c</code>)； 问号(<code v-pre>?</code>)只匹配一个任意字符；如果在方括号中使用短划线分隔两个字符， 表示所有在这两个字符范围内的都可以匹配(比如 <code v-pre>[0-9]</code> 表示匹配所有 <code v-pre>0</code> 到 <code v-pre>9</code> 的数字)。使用两个星号(<code v-pre>**</code>)表示匹配任意中间目录，比如 <code v-pre>a/**/z</code> 可以匹配 <code v-pre>a/z</code> 、<code v-pre>a/b/z</code> 或 <code v-pre>a/b/c/z</code> 等。</p>\n</div>\n<p>一个具体的例子:</p>\n<div class=\"language-text line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"text\" data-title=\"text\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span># 忽略所有的 .a 文件</span></span>\n<span class=\"line\"><span>*.a</span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span># 但跟踪所有的 lib.a，即便您在前面忽略了 .a 文件</span></span>\n<span class=\"line\"><span>!lib.a</span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span># 只忽略当前目录下的 TODO 文件，而不忽略 subdir/TODO</span></span>\n<span class=\"line\"><span>/TODO</span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span># 忽略任何目录下名为 build 的文件夹</span></span>\n<span class=\"line\"><span>build/</span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span># 忽略 doc/notes.txt，但不忽略 doc/server/arch.txt</span></span>\n<span class=\"line\"><span>doc/*.txt</span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span># 忽略 doc/ 目录及其所有子目录下的 .pdf 文件</span></span>\n<span class=\"line\"><span>doc/**/*.pdf</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><div class=\"hint-container tip\">\n<p class=\"hint-container-title\">提示</p>\n<p>GitHub 有一个十分详细的针对数十种项目及语言的 .gitignore 文件列表， 您可以在 <a href=\"https://github.com/github/gitignore\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/github/gitignore</a> 找到它。</p>\n</div>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">多个 .gitignore</p>\n<p>在最简单的情况下，一个仓库可能只根目录下有一个 .gitignore 文件，它递归地应用到整个仓库中。然而，子目录下也可以有额外的 .gitignore 文件。子目录中的 .gitignore 文件中的规则只作用于它所在的目录中。(Linux 内核的源码库拥有 206 个 .gitignore 文件。)</p>\n</div>\n<h2 id=\"小结\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#小结\"><span>小结</span></a></h2>\n<ul>\n<li>\n<p>忽略某些文件时，需要编写 <code v-pre>.gitignore</code>；</p>\n</li>\n<li>\n<p><code v-pre>.gitignore</code> 文件本身要放到版本库里，并且可以对 <code v-pre>.gitignore</code> 做版本管理!</p>\n</li>\n</ul>\n","env":{"base":"/","filePath":"/Users/carson/Desktop/Mister-Hope.github.io-main/src/software/git/ignore.md","filePathRelative":"software/git/ignore.md","frontmatter":{"date":"2020-05-05T00:00:00.000Z","title":"忽略特殊文件","icon":"skin","order":12,"author":"廖雪峰","category":"Git","tag":["Git","软件"],"copyright":"Copyright by 廖雪峰 Edited by Mister.Duan"},"sfcBlocks":{"template":{"type":"template","content":"<template><p>有些时候，您必须把某些文件放到 Git 工作目录中，但又不能提交它们，比如保存了数据库密码的配置文件啦，等等，每次 <code v-pre>git status</code> 都会显示 <code v-pre>Untracked files</code> ...，有强迫症的童鞋心里肯定不爽。</p>\n<p>好在 Git 考虑到了大家的感受，这个问题解决起来也很简单，在 Git 工作区的根目录下创建一个特殊的 <code v-pre>.gitignore</code> 文件，然后把要忽略的文件名填进去，Git 就会自动忽略这些文件。</p>\n<p>忽略文件的原则是:</p>\n<ul>\n<li>忽略操作系统自动生成的文件，比如缩略图等；</li>\n<li>忽略编译生成的中间文件、可执行文件等，也就是如果一个文件是通过另一个文件自动生成的，那自动生成的文件就没必要放进版本库，比如 Java 编译产生的 <code v-pre>.class</code> 文件；</li>\n<li>忽略您自己的带有敏感信息的配置文件，比如存放口令的配置文件。</li>\n</ul>\n<p>举个例子:</p>\n<p>假设您在 Windows 下进行 Python 开发，Windows 会自动在有图片的目录下生成隐藏的缩略图文件，如果有自定义目录，目录下就会有 <code v-pre>Desktop.ini</code> 文件，因此您需要忽略 Windows 自动生成的垃圾文件:</p>\n<div class=\"language-text\" data-highlighter=\"shiki\" data-ext=\"text\" data-title=\"text\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span>Thumbs.db</span></span>\n<span class=\"line\"><span>ehthumbs.db</span></span>\n<span class=\"line\"><span>Desktop.ini</span></span></code></pre>\n</div><p>然后，继续忽略 Python 编译产生的 <code v-pre>.pyc</code>、<code v-pre>.pyo</code>、<code v-pre>dist</code> 等文件或目录:</p>\n<div class=\"language-text\" data-highlighter=\"shiki\" data-ext=\"text\" data-title=\"text\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span>_.py[cod]</span></span>\n<span class=\"line\"><span>_.so</span></span>\n<span class=\"line\"><span>_.egg</span></span>\n<span class=\"line\"><span>_.egg-info</span></span>\n<span class=\"line\"><span>dist</span></span>\n<span class=\"line\"><span>build</span></span></code></pre>\n</div><p>加上您自己定义的文件，最终得到一个完整的 <code v-pre>.gitignore</code> 文件，内容如下:</p>\n<div class=\"language-text line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"text\" data-title=\"text\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span># Windows:</span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span>Thumbs.db</span></span>\n<span class=\"line\"><span>ehthumbs.db</span></span>\n<span class=\"line\"><span>Desktop.ini</span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span># Python:</span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span>_.py[cod]</span></span>\n<span class=\"line\"><span>_.so</span></span>\n<span class=\"line\"><span>_.egg</span></span>\n<span class=\"line\"><span>_.egg-info</span></span>\n<span class=\"line\"><span>dist</span></span>\n<span class=\"line\"><span>build</span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span># My configurations:</span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span>db.ini</span></span>\n<span class=\"line\"><span>deploy_key_rsa</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>最后一步就是把 <code v-pre>.gitignore</code> 也提交到 Git，就完成了! 当然检验 <code v-pre>.gitignore</code> 的标准是 <code v-pre>git status</code> 命令是不是说 <code v-pre>working directory clean</code>。</p>\n<p>使用 Windows 的童鞋注意了，如果您在资源管理器里新建一个 <code v-pre>.gitignore</code> 文件，它会非常弱智地提示您必须输入文件名，但是在文本编辑器里“保存”或者“另存为”就可以把文件保存为 <code v-pre>.gitignore</code> 了。</p>\n<p>有些时候，您想添加一个文件到 Git，但发现添加不了，原因是这个文件被 <code v-pre>.gitignore</code> 忽略了:</p>\n<div class=\"language-sh\" data-highlighter=\"shiki\" data-ext=\"sh\" data-title=\"sh\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">$</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> git</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> add</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> App.class</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">The</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> following</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> paths</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> are</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> ignored</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> by</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> one</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> of</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> your</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> .gitignore</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> files:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">App.class</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">Use</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> -f</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> if</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> you</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> really</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> want</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> to</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> add</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> them.</span></span></code></pre>\n</div><p>如果您确实想添加该文件，可以用 <code v-pre>-f</code> 强制添加到 Git:</p>\n<div class=\"language-sh\" data-highlighter=\"shiki\" data-ext=\"sh\" data-title=\"sh\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">git</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> add</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> -f</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> App.class</span></span></code></pre>\n</div><p>或者您发现，可能是 <code v-pre>.gitignore</code> 写得有问题，需要找出来到底哪个规则写错了，可以用 <code v-pre>git check-ignore</code> 命令检查:</p>\n<div class=\"language-sh\" data-highlighter=\"shiki\" data-ext=\"sh\" data-title=\"sh\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">$</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> git</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> check-ignore</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> -v</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> App.class</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">.gitignore:3:*.class</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">    App.class</span></span></code></pre>\n</div><p>Git 会告诉我们，<code v-pre>.gitignore</code> 的第 3 行规则忽略了该文件，于是我们就可以知道应该修订哪个规则。</p>\n<h2 id=\"格式规范\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#格式规范\"><span>格式规范</span></a></h2>\n<ul>\n<li>\n<p>所有空行或者以 # 开头的行都会被 Git 忽略。</p>\n</li>\n<li>\n<p>可以使用标准的 glob 模式匹配，它会递归地应用在整个工作区中。</p>\n</li>\n<li>\n<p>匹配模式可以以(<code v-pre>/</code>)开头防止递归。</p>\n</li>\n<li>\n<p>匹配模式可以以(<code v-pre>/</code>)结尾指定目录。</p>\n</li>\n<li>\n<p>要忽略指定模式以外的文件或目录，可以在模式前加上叹号(<code v-pre>!</code>)取反。</p>\n</li>\n</ul>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">glob 模式</p>\n<p>所谓的 glob 模式是指 shell 所使用的简化了的正则表达式。星号(<code v-pre>*</code>)匹配零个或多个任意字符；<code v-pre>[abc]</code> 匹配任何一个列在方括号中的字符 (这个例子要么匹配一个 <code v-pre>a</code>，要么匹配一个 <code v-pre>b</code>，要么匹配一个 <code v-pre>c</code>)； 问号(<code v-pre>?</code>)只匹配一个任意字符；如果在方括号中使用短划线分隔两个字符， 表示所有在这两个字符范围内的都可以匹配(比如 <code v-pre>[0-9]</code> 表示匹配所有 <code v-pre>0</code> 到 <code v-pre>9</code> 的数字)。使用两个星号(<code v-pre>**</code>)表示匹配任意中间目录，比如 <code v-pre>a/**/z</code> 可以匹配 <code v-pre>a/z</code> 、<code v-pre>a/b/z</code> 或 <code v-pre>a/b/c/z</code> 等。</p>\n</div>\n<p>一个具体的例子:</p>\n<div class=\"language-text line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"text\" data-title=\"text\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span># 忽略所有的 .a 文件</span></span>\n<span class=\"line\"><span>*.a</span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span># 但跟踪所有的 lib.a，即便您在前面忽略了 .a 文件</span></span>\n<span class=\"line\"><span>!lib.a</span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span># 只忽略当前目录下的 TODO 文件，而不忽略 subdir/TODO</span></span>\n<span class=\"line\"><span>/TODO</span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span># 忽略任何目录下名为 build 的文件夹</span></span>\n<span class=\"line\"><span>build/</span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span># 忽略 doc/notes.txt，但不忽略 doc/server/arch.txt</span></span>\n<span class=\"line\"><span>doc/*.txt</span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span># 忽略 doc/ 目录及其所有子目录下的 .pdf 文件</span></span>\n<span class=\"line\"><span>doc/**/*.pdf</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><div class=\"hint-container tip\">\n<p class=\"hint-container-title\">提示</p>\n<p>GitHub 有一个十分详细的针对数十种项目及语言的 .gitignore 文件列表， 您可以在 <a href=\"https://github.com/github/gitignore\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/github/gitignore</a> 找到它。</p>\n</div>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">多个 .gitignore</p>\n<p>在最简单的情况下，一个仓库可能只根目录下有一个 .gitignore 文件，它递归地应用到整个仓库中。然而，子目录下也可以有额外的 .gitignore 文件。子目录中的 .gitignore 文件中的规则只作用于它所在的目录中。(Linux 内核的源码库拥有 206 个 .gitignore 文件。)</p>\n</div>\n<h2 id=\"小结\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#小结\"><span>小结</span></a></h2>\n<ul>\n<li>\n<p>忽略某些文件时，需要编写 <code v-pre>.gitignore</code>；</p>\n</li>\n<li>\n<p><code v-pre>.gitignore</code> 文件本身要放到版本库里，并且可以对 <code v-pre>.gitignore</code> 做版本管理!</p>\n</li>\n</ul>\n</template>","contentStripped":"<p>有些时候，您必须把某些文件放到 Git 工作目录中，但又不能提交它们，比如保存了数据库密码的配置文件啦，等等，每次 <code v-pre>git status</code> 都会显示 <code v-pre>Untracked files</code> ...，有强迫症的童鞋心里肯定不爽。</p>\n<p>好在 Git 考虑到了大家的感受，这个问题解决起来也很简单，在 Git 工作区的根目录下创建一个特殊的 <code v-pre>.gitignore</code> 文件，然后把要忽略的文件名填进去，Git 就会自动忽略这些文件。</p>\n<p>忽略文件的原则是:</p>\n<ul>\n<li>忽略操作系统自动生成的文件，比如缩略图等；</li>\n<li>忽略编译生成的中间文件、可执行文件等，也就是如果一个文件是通过另一个文件自动生成的，那自动生成的文件就没必要放进版本库，比如 Java 编译产生的 <code v-pre>.class</code> 文件；</li>\n<li>忽略您自己的带有敏感信息的配置文件，比如存放口令的配置文件。</li>\n</ul>\n<p>举个例子:</p>\n<p>假设您在 Windows 下进行 Python 开发，Windows 会自动在有图片的目录下生成隐藏的缩略图文件，如果有自定义目录，目录下就会有 <code v-pre>Desktop.ini</code> 文件，因此您需要忽略 Windows 自动生成的垃圾文件:</p>\n<div class=\"language-text\" data-highlighter=\"shiki\" data-ext=\"text\" data-title=\"text\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span>Thumbs.db</span></span>\n<span class=\"line\"><span>ehthumbs.db</span></span>\n<span class=\"line\"><span>Desktop.ini</span></span></code></pre>\n</div><p>然后，继续忽略 Python 编译产生的 <code v-pre>.pyc</code>、<code v-pre>.pyo</code>、<code v-pre>dist</code> 等文件或目录:</p>\n<div class=\"language-text\" data-highlighter=\"shiki\" data-ext=\"text\" data-title=\"text\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span>_.py[cod]</span></span>\n<span class=\"line\"><span>_.so</span></span>\n<span class=\"line\"><span>_.egg</span></span>\n<span class=\"line\"><span>_.egg-info</span></span>\n<span class=\"line\"><span>dist</span></span>\n<span class=\"line\"><span>build</span></span></code></pre>\n</div><p>加上您自己定义的文件，最终得到一个完整的 <code v-pre>.gitignore</code> 文件，内容如下:</p>\n<div class=\"language-text line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"text\" data-title=\"text\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span># Windows:</span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span>Thumbs.db</span></span>\n<span class=\"line\"><span>ehthumbs.db</span></span>\n<span class=\"line\"><span>Desktop.ini</span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span># Python:</span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span>_.py[cod]</span></span>\n<span class=\"line\"><span>_.so</span></span>\n<span class=\"line\"><span>_.egg</span></span>\n<span class=\"line\"><span>_.egg-info</span></span>\n<span class=\"line\"><span>dist</span></span>\n<span class=\"line\"><span>build</span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span># My configurations:</span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span>db.ini</span></span>\n<span class=\"line\"><span>deploy_key_rsa</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>最后一步就是把 <code v-pre>.gitignore</code> 也提交到 Git，就完成了! 当然检验 <code v-pre>.gitignore</code> 的标准是 <code v-pre>git status</code> 命令是不是说 <code v-pre>working directory clean</code>。</p>\n<p>使用 Windows 的童鞋注意了，如果您在资源管理器里新建一个 <code v-pre>.gitignore</code> 文件，它会非常弱智地提示您必须输入文件名，但是在文本编辑器里“保存”或者“另存为”就可以把文件保存为 <code v-pre>.gitignore</code> 了。</p>\n<p>有些时候，您想添加一个文件到 Git，但发现添加不了，原因是这个文件被 <code v-pre>.gitignore</code> 忽略了:</p>\n<div class=\"language-sh\" data-highlighter=\"shiki\" data-ext=\"sh\" data-title=\"sh\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">$</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> git</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> add</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> App.class</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">The</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> following</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> paths</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> are</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> ignored</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> by</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> one</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> of</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> your</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> .gitignore</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> files:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">App.class</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">Use</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> -f</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> if</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> you</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> really</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> want</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> to</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> add</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> them.</span></span></code></pre>\n</div><p>如果您确实想添加该文件，可以用 <code v-pre>-f</code> 强制添加到 Git:</p>\n<div class=\"language-sh\" data-highlighter=\"shiki\" data-ext=\"sh\" data-title=\"sh\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">git</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> add</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> -f</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> App.class</span></span></code></pre>\n</div><p>或者您发现，可能是 <code v-pre>.gitignore</code> 写得有问题，需要找出来到底哪个规则写错了，可以用 <code v-pre>git check-ignore</code> 命令检查:</p>\n<div class=\"language-sh\" data-highlighter=\"shiki\" data-ext=\"sh\" data-title=\"sh\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">$</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> git</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> check-ignore</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> -v</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> App.class</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">.gitignore:3:*.class</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">    App.class</span></span></code></pre>\n</div><p>Git 会告诉我们，<code v-pre>.gitignore</code> 的第 3 行规则忽略了该文件，于是我们就可以知道应该修订哪个规则。</p>\n<h2 id=\"格式规范\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#格式规范\"><span>格式规范</span></a></h2>\n<ul>\n<li>\n<p>所有空行或者以 # 开头的行都会被 Git 忽略。</p>\n</li>\n<li>\n<p>可以使用标准的 glob 模式匹配，它会递归地应用在整个工作区中。</p>\n</li>\n<li>\n<p>匹配模式可以以(<code v-pre>/</code>)开头防止递归。</p>\n</li>\n<li>\n<p>匹配模式可以以(<code v-pre>/</code>)结尾指定目录。</p>\n</li>\n<li>\n<p>要忽略指定模式以外的文件或目录，可以在模式前加上叹号(<code v-pre>!</code>)取反。</p>\n</li>\n</ul>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">glob 模式</p>\n<p>所谓的 glob 模式是指 shell 所使用的简化了的正则表达式。星号(<code v-pre>*</code>)匹配零个或多个任意字符；<code v-pre>[abc]</code> 匹配任何一个列在方括号中的字符 (这个例子要么匹配一个 <code v-pre>a</code>，要么匹配一个 <code v-pre>b</code>，要么匹配一个 <code v-pre>c</code>)； 问号(<code v-pre>?</code>)只匹配一个任意字符；如果在方括号中使用短划线分隔两个字符， 表示所有在这两个字符范围内的都可以匹配(比如 <code v-pre>[0-9]</code> 表示匹配所有 <code v-pre>0</code> 到 <code v-pre>9</code> 的数字)。使用两个星号(<code v-pre>**</code>)表示匹配任意中间目录，比如 <code v-pre>a/**/z</code> 可以匹配 <code v-pre>a/z</code> 、<code v-pre>a/b/z</code> 或 <code v-pre>a/b/c/z</code> 等。</p>\n</div>\n<p>一个具体的例子:</p>\n<div class=\"language-text line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"text\" data-title=\"text\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span># 忽略所有的 .a 文件</span></span>\n<span class=\"line\"><span>*.a</span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span># 但跟踪所有的 lib.a，即便您在前面忽略了 .a 文件</span></span>\n<span class=\"line\"><span>!lib.a</span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span># 只忽略当前目录下的 TODO 文件，而不忽略 subdir/TODO</span></span>\n<span class=\"line\"><span>/TODO</span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span># 忽略任何目录下名为 build 的文件夹</span></span>\n<span class=\"line\"><span>build/</span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span># 忽略 doc/notes.txt，但不忽略 doc/server/arch.txt</span></span>\n<span class=\"line\"><span>doc/*.txt</span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span># 忽略 doc/ 目录及其所有子目录下的 .pdf 文件</span></span>\n<span class=\"line\"><span>doc/**/*.pdf</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><div class=\"hint-container tip\">\n<p class=\"hint-container-title\">提示</p>\n<p>GitHub 有一个十分详细的针对数十种项目及语言的 .gitignore 文件列表， 您可以在 <a href=\"https://github.com/github/gitignore\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/github/gitignore</a> 找到它。</p>\n</div>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">多个 .gitignore</p>\n<p>在最简单的情况下，一个仓库可能只根目录下有一个 .gitignore 文件，它递归地应用到整个仓库中。然而，子目录下也可以有额外的 .gitignore 文件。子目录中的 .gitignore 文件中的规则只作用于它所在的目录中。(Linux 内核的源码库拥有 206 个 .gitignore 文件。)</p>\n</div>\n<h2 id=\"小结\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#小结\"><span>小结</span></a></h2>\n<ul>\n<li>\n<p>忽略某些文件时，需要编写 <code v-pre>.gitignore</code>；</p>\n</li>\n<li>\n<p><code v-pre>.gitignore</code> 文件本身要放到版本库里，并且可以对 <code v-pre>.gitignore</code> 做版本管理!</p>\n</li>\n</ul>\n","tagOpen":"<template>","tagClose":"</template>"},"script":null,"scriptSetup":null,"scripts":[],"styles":[],"customBlocks":[]},"content":"\n有些时候，您必须把某些文件放到 Git 工作目录中，但又不能提交它们，比如保存了数据库密码的配置文件啦，等等，每次 `git status` 都会显示 `Untracked files` ...，有强迫症的童鞋心里肯定不爽。\n\n好在 Git 考虑到了大家的感受，这个问题解决起来也很简单，在 Git 工作区的根目录下创建一个特殊的 `.gitignore` 文件，然后把要忽略的文件名填进去，Git 就会自动忽略这些文件。\n\n忽略文件的原则是:\n\n- 忽略操作系统自动生成的文件，比如缩略图等；\n- 忽略编译生成的中间文件、可执行文件等，也就是如果一个文件是通过另一个文件自动生成的，那自动生成的文件就没必要放进版本库，比如 Java 编译产生的 `.class` 文件；\n- 忽略您自己的带有敏感信息的配置文件，比如存放口令的配置文件。\n\n举个例子:\n\n假设您在 Windows 下进行 Python 开发，Windows 会自动在有图片的目录下生成隐藏的缩略图文件，如果有自定义目录，目录下就会有 `Desktop.ini` 文件，因此您需要忽略 Windows 自动生成的垃圾文件:\n\n```text\nThumbs.db\nehthumbs.db\nDesktop.ini\n```\n\n然后，继续忽略 Python 编译产生的 `.pyc`、`.pyo`、`dist` 等文件或目录:\n\n```text\n_.py[cod]\n_.so\n_.egg\n_.egg-info\ndist\nbuild\n```\n\n加上您自己定义的文件，最终得到一个完整的 `.gitignore` 文件，内容如下:\n\n```text\n# Windows:\n\nThumbs.db\nehthumbs.db\nDesktop.ini\n\n# Python:\n\n_.py[cod]\n_.so\n_.egg\n_.egg-info\ndist\nbuild\n\n# My configurations:\n\ndb.ini\ndeploy_key_rsa\n```\n\n最后一步就是把 `.gitignore` 也提交到 Git，就完成了! 当然检验 `.gitignore` 的标准是 `git status` 命令是不是说 `working directory clean`。\n\n使用 Windows 的童鞋注意了，如果您在资源管理器里新建一个 `.gitignore` 文件，它会非常弱智地提示您必须输入文件名，但是在文本编辑器里“保存”或者“另存为”就可以把文件保存为 `.gitignore` 了。\n\n有些时候，您想添加一个文件到 Git，但发现添加不了，原因是这个文件被 `.gitignore` 忽略了:\n\n```sh\n$ git add App.class\nThe following paths are ignored by one of your .gitignore files:\nApp.class\nUse -f if you really want to add them.\n```\n\n如果您确实想添加该文件，可以用 `-f` 强制添加到 Git:\n\n```sh\ngit add -f App.class\n```\n\n或者您发现，可能是 `.gitignore` 写得有问题，需要找出来到底哪个规则写错了，可以用 `git check-ignore` 命令检查:\n\n```sh\n$ git check-ignore -v App.class\n.gitignore:3:*.class    App.class\n```\n\nGit 会告诉我们，`.gitignore` 的第 3 行规则忽略了该文件，于是我们就可以知道应该修订哪个规则。\n\n## 格式规范\n\n- 所有空行或者以 # 开头的行都会被 Git 忽略。\n\n- 可以使用标准的 glob 模式匹配，它会递归地应用在整个工作区中。\n\n- 匹配模式可以以(`/`)开头防止递归。\n\n- 匹配模式可以以(`/`)结尾指定目录。\n\n- 要忽略指定模式以外的文件或目录，可以在模式前加上叹号(`!`)取反。\n\n::: tip glob 模式\n\n所谓的 glob 模式是指 shell 所使用的简化了的正则表达式。星号(`*`)匹配零个或多个任意字符；`[abc]` 匹配任何一个列在方括号中的字符 (这个例子要么匹配一个 `a`，要么匹配一个 `b`，要么匹配一个 `c`)； 问号(`?`)只匹配一个任意字符；如果在方括号中使用短划线分隔两个字符， 表示所有在这两个字符范围内的都可以匹配(比如 `[0-9]` 表示匹配所有 `0` 到 `9` 的数字)。使用两个星号(`**`)表示匹配任意中间目录，比如 `a/**/z` 可以匹配 `a/z` 、`a/b/z` 或 `a/b/c/z` 等。\n\n:::\n\n一个具体的例子:\n\n```text\n# 忽略所有的 .a 文件\n*.a\n\n# 但跟踪所有的 lib.a，即便您在前面忽略了 .a 文件\n!lib.a\n\n# 只忽略当前目录下的 TODO 文件，而不忽略 subdir/TODO\n/TODO\n\n# 忽略任何目录下名为 build 的文件夹\nbuild/\n\n# 忽略 doc/notes.txt，但不忽略 doc/server/arch.txt\ndoc/*.txt\n\n# 忽略 doc/ 目录及其所有子目录下的 .pdf 文件\ndoc/**/*.pdf\n```\n\n::: tip\n\nGitHub 有一个十分详细的针对数十种项目及语言的 .gitignore 文件列表， 您可以在 [https://github.com/github/gitignore](https://github.com/github/gitignore) 找到它。\n\n:::\n\n::: tip 多个 .gitignore\n\n在最简单的情况下，一个仓库可能只根目录下有一个 .gitignore 文件，它递归地应用到整个仓库中。然而，子目录下也可以有额外的 .gitignore 文件。子目录中的 .gitignore 文件中的规则只作用于它所在的目录中。(Linux 内核的源码库拥有 206 个 .gitignore 文件。)\n\n:::\n\n## 小结\n\n- 忽略某些文件时，需要编写 `.gitignore`；\n\n- `.gitignore` 文件本身要放到版本库里，并且可以对 `.gitignore` 做版本管理!\n","excerpt":"","title":"","headers":[{"level":2,"title":"格式规范","slug":"格式规范","link":"#格式规范","children":[]},{"level":2,"title":"小结","slug":"小结","link":"#小结","children":[]}]}}
