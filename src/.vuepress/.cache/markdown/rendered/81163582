{"content":"<h2 id=\"semantic\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#semantic\"><span>Semantic</span></a></h2>\n<p>对于一个大型项目，几千个 commit 是很常见的，这些 commit 部分是项目维护者提交的 commit，部分是一些热心的开发者通过 PR 贡献的。</p>\n<p>无论是对于项目维护者，还是想要贡献代码的热心开发者来说，一个简洁明了的 commit 描述都是必不可少的。也就是说我们需要用尽可能简短的备注信息，备注每一个 commit 的作用，以便大家查看。所以我们需要一种规范的，语义化的备注格式，很快由知名项目牵头，全球接收并统一了一种语义化的备注格式，这就是 semantic 规范的来源。</p>\n<h2 id=\"优势\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#优势\"><span>优势</span></a></h2>\n<p>当一个仓库所有的 commit 信息都是用标准的 semantic 格式时，用户可以很方便的理解每一个 commit 的作用。</p>\n<p>同时，semantic 支持直接将某个提交或 PR 与特定 issue 链接，并自动关闭或引用这些 issue。</p>\n<p>通过一些第三方工具，大家可以基于这些备注信息进行过滤查找，更新日志生成等操作。</p>\n<h2 id=\"格式\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#格式\"><span>格式</span></a></h2>\n<div class=\"language-text\" data-highlighter=\"shiki\" data-ext=\"text\" data-title=\"text\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span>&#x3C;type>(&#x3C;scope>): &#x3C;subject></span></span>\n<span class=\"line\"><span>&#x3C;body></span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span>&#x3C;footer></span></span></code></pre>\n</div><h3 id=\"header\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#header\"><span>header</span></a></h3>\n<p>第一行被称为 <code v-pre>header</code>，它必须只有一行，包括三个字段: <code v-pre>&lt;type&gt;</code>(必需)、<code v-pre>&lt;scope&gt;</code>(可选)和 <code v-pre>&lt;subject&gt;</code>(必需)</p>\n<h3 id=\"type\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#type\"><span>type</span></a></h3>\n<p>commit 的类型。</p>\n<p>规范中规定了如下类型:</p>\n<ul>\n<li><code v-pre>feat</code>: feature, 新增功能</li>\n<li><code v-pre>fix</code> : bug fix, 修复 bug</li>\n<li><code v-pre>docs</code>: documentation, 仅仅修改了文档，如 <code v-pre>README.md</code></li>\n<li><code v-pre>style</code>: style, 仅仅是对格式进行修改，如逗号、缩进、空格等，不改变代码逻辑</li>\n<li><code v-pre>refactor</code>: refactor, 代码重构，一般更改了源文件或测试文件，但没有新增功能或修复 bug</li>\n<li><code v-pre>perf</code>: performance, 优化相关，如提升性能、用户体验等</li>\n<li><code v-pre>test</code>: test, 测试用例，包括单元测试，集成测试</li>\n<li><code v-pre>chore</code>: chore, 对于库的其他内容的改变，一般不涉及到源文件或测试文件，比如更改 CI 设置，提升仓库以来等</li>\n<li><code v-pre>revert</code>: 版本回滚</li>\n</ul>\n<h3 id=\"scope\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#scope\"><span>scope</span></a></h3>\n<p>用于说明 commit 影响的范围，比如: <code v-pre>views</code> , <code v-pre>component</code>, <code v-pre>utils</code>, <code v-pre>test</code>。这个是由项目的内容与结构决定的。</p>\n<h3 id=\"subject\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#subject\"><span>subject</span></a></h3>\n<p>commit 目的的简短描述，最好小于 50 字符，一般不超过 65 个字符，最长不超过 80 字符。</p>\n<p>当 subject 限制的字符数无法详细说明此 commit 的变动时，将 commit 的具体变动放置在 body 中</p>\n<h3 id=\"body\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#body\"><span>body</span></a></h3>\n<p>对本次 commit 修改内容的具体描述，可以分为多行。<code v-pre>body</code> 是可选的，而且 <code v-pre>body</code> 可以有多行。</p>\n<h3 id=\"footer\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#footer\"><span>footer</span></a></h3>\n<p>可选的，前面有一空行。可以添加一些备注，一般放置 <code v-pre>BREAKING CHANGE</code>(一些破坏性的变动) 或修复的 bug(涉及的 issue)的链接。</p>\n<h2 id=\"semantic-commit-与-changelog-生成\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#semantic-commit-与-changelog-生成\"><span>Semantic commit 与 Changelog 生成</span></a></h2>\n<p>不同语言环境都有很多种工具来帮助您创建一个 semantic commit 或者自动生成 changelog。</p>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">案例</p>\n<p>Node.js 环境下可以使用:</p>\n<ul>\n<li>\n<p><a href=\"https://github.com/commitizen/cz-conventional-changelog\" target=\"_blank\" rel=\"noopener noreferrer\"><code v-pre>cz-conventional-changelog</code></a> 提供 <code v-pre>git cz</code> 命令辅助创建 semantic commit。</p>\n</li>\n<li>\n<p><a href=\"https://github.com/conventional-changelog/conventional-changelog\" target=\"_blank\" rel=\"noopener noreferrer\"><code v-pre>conventional-changelog-cli</code></a> 来快速生成更新日志，如 <a href=\"https://github.com/Mister-Hope/vuepress-theme-hope/blob/master/CHANGELOG.md\" target=\"_blank\" rel=\"noopener noreferrer\">vuepress-theme-hope 的更改日志</a></p>\n</li>\n</ul>\n</div>\n","env":{"base":"/","filePath":"/Users/carson/Desktop/Mister-Hope.github.io-main/src/code/github/semantic.md","filePathRelative":"code/github/semantic.md","frontmatter":{"date":"2021-01-18T00:00:00.000Z","title":"语义化提交","icon":"semantic","category":"GitHub","order":3},"sfcBlocks":{"template":{"type":"template","content":"<template><h2 id=\"semantic\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#semantic\"><span>Semantic</span></a></h2>\n<p>对于一个大型项目，几千个 commit 是很常见的，这些 commit 部分是项目维护者提交的 commit，部分是一些热心的开发者通过 PR 贡献的。</p>\n<p>无论是对于项目维护者，还是想要贡献代码的热心开发者来说，一个简洁明了的 commit 描述都是必不可少的。也就是说我们需要用尽可能简短的备注信息，备注每一个 commit 的作用，以便大家查看。所以我们需要一种规范的，语义化的备注格式，很快由知名项目牵头，全球接收并统一了一种语义化的备注格式，这就是 semantic 规范的来源。</p>\n<h2 id=\"优势\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#优势\"><span>优势</span></a></h2>\n<p>当一个仓库所有的 commit 信息都是用标准的 semantic 格式时，用户可以很方便的理解每一个 commit 的作用。</p>\n<p>同时，semantic 支持直接将某个提交或 PR 与特定 issue 链接，并自动关闭或引用这些 issue。</p>\n<p>通过一些第三方工具，大家可以基于这些备注信息进行过滤查找，更新日志生成等操作。</p>\n<h2 id=\"格式\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#格式\"><span>格式</span></a></h2>\n<div class=\"language-text\" data-highlighter=\"shiki\" data-ext=\"text\" data-title=\"text\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span>&#x3C;type>(&#x3C;scope>): &#x3C;subject></span></span>\n<span class=\"line\"><span>&#x3C;body></span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span>&#x3C;footer></span></span></code></pre>\n</div><h3 id=\"header\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#header\"><span>header</span></a></h3>\n<p>第一行被称为 <code v-pre>header</code>，它必须只有一行，包括三个字段: <code v-pre>&lt;type&gt;</code>(必需)、<code v-pre>&lt;scope&gt;</code>(可选)和 <code v-pre>&lt;subject&gt;</code>(必需)</p>\n<h3 id=\"type\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#type\"><span>type</span></a></h3>\n<p>commit 的类型。</p>\n<p>规范中规定了如下类型:</p>\n<ul>\n<li><code v-pre>feat</code>: feature, 新增功能</li>\n<li><code v-pre>fix</code> : bug fix, 修复 bug</li>\n<li><code v-pre>docs</code>: documentation, 仅仅修改了文档，如 <code v-pre>README.md</code></li>\n<li><code v-pre>style</code>: style, 仅仅是对格式进行修改，如逗号、缩进、空格等，不改变代码逻辑</li>\n<li><code v-pre>refactor</code>: refactor, 代码重构，一般更改了源文件或测试文件，但没有新增功能或修复 bug</li>\n<li><code v-pre>perf</code>: performance, 优化相关，如提升性能、用户体验等</li>\n<li><code v-pre>test</code>: test, 测试用例，包括单元测试，集成测试</li>\n<li><code v-pre>chore</code>: chore, 对于库的其他内容的改变，一般不涉及到源文件或测试文件，比如更改 CI 设置，提升仓库以来等</li>\n<li><code v-pre>revert</code>: 版本回滚</li>\n</ul>\n<h3 id=\"scope\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#scope\"><span>scope</span></a></h3>\n<p>用于说明 commit 影响的范围，比如: <code v-pre>views</code> , <code v-pre>component</code>, <code v-pre>utils</code>, <code v-pre>test</code>。这个是由项目的内容与结构决定的。</p>\n<h3 id=\"subject\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#subject\"><span>subject</span></a></h3>\n<p>commit 目的的简短描述，最好小于 50 字符，一般不超过 65 个字符，最长不超过 80 字符。</p>\n<p>当 subject 限制的字符数无法详细说明此 commit 的变动时，将 commit 的具体变动放置在 body 中</p>\n<h3 id=\"body\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#body\"><span>body</span></a></h3>\n<p>对本次 commit 修改内容的具体描述，可以分为多行。<code v-pre>body</code> 是可选的，而且 <code v-pre>body</code> 可以有多行。</p>\n<h3 id=\"footer\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#footer\"><span>footer</span></a></h3>\n<p>可选的，前面有一空行。可以添加一些备注，一般放置 <code v-pre>BREAKING CHANGE</code>(一些破坏性的变动) 或修复的 bug(涉及的 issue)的链接。</p>\n<h2 id=\"semantic-commit-与-changelog-生成\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#semantic-commit-与-changelog-生成\"><span>Semantic commit 与 Changelog 生成</span></a></h2>\n<p>不同语言环境都有很多种工具来帮助您创建一个 semantic commit 或者自动生成 changelog。</p>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">案例</p>\n<p>Node.js 环境下可以使用:</p>\n<ul>\n<li>\n<p><a href=\"https://github.com/commitizen/cz-conventional-changelog\" target=\"_blank\" rel=\"noopener noreferrer\"><code v-pre>cz-conventional-changelog</code></a> 提供 <code v-pre>git cz</code> 命令辅助创建 semantic commit。</p>\n</li>\n<li>\n<p><a href=\"https://github.com/conventional-changelog/conventional-changelog\" target=\"_blank\" rel=\"noopener noreferrer\"><code v-pre>conventional-changelog-cli</code></a> 来快速生成更新日志，如 <a href=\"https://github.com/Mister-Hope/vuepress-theme-hope/blob/master/CHANGELOG.md\" target=\"_blank\" rel=\"noopener noreferrer\">vuepress-theme-hope 的更改日志</a></p>\n</li>\n</ul>\n</div>\n</template>","contentStripped":"<h2 id=\"semantic\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#semantic\"><span>Semantic</span></a></h2>\n<p>对于一个大型项目，几千个 commit 是很常见的，这些 commit 部分是项目维护者提交的 commit，部分是一些热心的开发者通过 PR 贡献的。</p>\n<p>无论是对于项目维护者，还是想要贡献代码的热心开发者来说，一个简洁明了的 commit 描述都是必不可少的。也就是说我们需要用尽可能简短的备注信息，备注每一个 commit 的作用，以便大家查看。所以我们需要一种规范的，语义化的备注格式，很快由知名项目牵头，全球接收并统一了一种语义化的备注格式，这就是 semantic 规范的来源。</p>\n<h2 id=\"优势\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#优势\"><span>优势</span></a></h2>\n<p>当一个仓库所有的 commit 信息都是用标准的 semantic 格式时，用户可以很方便的理解每一个 commit 的作用。</p>\n<p>同时，semantic 支持直接将某个提交或 PR 与特定 issue 链接，并自动关闭或引用这些 issue。</p>\n<p>通过一些第三方工具，大家可以基于这些备注信息进行过滤查找，更新日志生成等操作。</p>\n<h2 id=\"格式\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#格式\"><span>格式</span></a></h2>\n<div class=\"language-text\" data-highlighter=\"shiki\" data-ext=\"text\" data-title=\"text\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span>&#x3C;type>(&#x3C;scope>): &#x3C;subject></span></span>\n<span class=\"line\"><span>&#x3C;body></span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span>&#x3C;footer></span></span></code></pre>\n</div><h3 id=\"header\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#header\"><span>header</span></a></h3>\n<p>第一行被称为 <code v-pre>header</code>，它必须只有一行，包括三个字段: <code v-pre>&lt;type&gt;</code>(必需)、<code v-pre>&lt;scope&gt;</code>(可选)和 <code v-pre>&lt;subject&gt;</code>(必需)</p>\n<h3 id=\"type\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#type\"><span>type</span></a></h3>\n<p>commit 的类型。</p>\n<p>规范中规定了如下类型:</p>\n<ul>\n<li><code v-pre>feat</code>: feature, 新增功能</li>\n<li><code v-pre>fix</code> : bug fix, 修复 bug</li>\n<li><code v-pre>docs</code>: documentation, 仅仅修改了文档，如 <code v-pre>README.md</code></li>\n<li><code v-pre>style</code>: style, 仅仅是对格式进行修改，如逗号、缩进、空格等，不改变代码逻辑</li>\n<li><code v-pre>refactor</code>: refactor, 代码重构，一般更改了源文件或测试文件，但没有新增功能或修复 bug</li>\n<li><code v-pre>perf</code>: performance, 优化相关，如提升性能、用户体验等</li>\n<li><code v-pre>test</code>: test, 测试用例，包括单元测试，集成测试</li>\n<li><code v-pre>chore</code>: chore, 对于库的其他内容的改变，一般不涉及到源文件或测试文件，比如更改 CI 设置，提升仓库以来等</li>\n<li><code v-pre>revert</code>: 版本回滚</li>\n</ul>\n<h3 id=\"scope\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#scope\"><span>scope</span></a></h3>\n<p>用于说明 commit 影响的范围，比如: <code v-pre>views</code> , <code v-pre>component</code>, <code v-pre>utils</code>, <code v-pre>test</code>。这个是由项目的内容与结构决定的。</p>\n<h3 id=\"subject\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#subject\"><span>subject</span></a></h3>\n<p>commit 目的的简短描述，最好小于 50 字符，一般不超过 65 个字符，最长不超过 80 字符。</p>\n<p>当 subject 限制的字符数无法详细说明此 commit 的变动时，将 commit 的具体变动放置在 body 中</p>\n<h3 id=\"body\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#body\"><span>body</span></a></h3>\n<p>对本次 commit 修改内容的具体描述，可以分为多行。<code v-pre>body</code> 是可选的，而且 <code v-pre>body</code> 可以有多行。</p>\n<h3 id=\"footer\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#footer\"><span>footer</span></a></h3>\n<p>可选的，前面有一空行。可以添加一些备注，一般放置 <code v-pre>BREAKING CHANGE</code>(一些破坏性的变动) 或修复的 bug(涉及的 issue)的链接。</p>\n<h2 id=\"semantic-commit-与-changelog-生成\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#semantic-commit-与-changelog-生成\"><span>Semantic commit 与 Changelog 生成</span></a></h2>\n<p>不同语言环境都有很多种工具来帮助您创建一个 semantic commit 或者自动生成 changelog。</p>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">案例</p>\n<p>Node.js 环境下可以使用:</p>\n<ul>\n<li>\n<p><a href=\"https://github.com/commitizen/cz-conventional-changelog\" target=\"_blank\" rel=\"noopener noreferrer\"><code v-pre>cz-conventional-changelog</code></a> 提供 <code v-pre>git cz</code> 命令辅助创建 semantic commit。</p>\n</li>\n<li>\n<p><a href=\"https://github.com/conventional-changelog/conventional-changelog\" target=\"_blank\" rel=\"noopener noreferrer\"><code v-pre>conventional-changelog-cli</code></a> 来快速生成更新日志，如 <a href=\"https://github.com/Mister-Hope/vuepress-theme-hope/blob/master/CHANGELOG.md\" target=\"_blank\" rel=\"noopener noreferrer\">vuepress-theme-hope 的更改日志</a></p>\n</li>\n</ul>\n</div>\n","tagOpen":"<template>","tagClose":"</template>"},"script":null,"scriptSetup":null,"scripts":[],"styles":[],"customBlocks":[]},"content":"\n## Semantic\n\n对于一个大型项目，几千个 commit 是很常见的，这些 commit 部分是项目维护者提交的 commit，部分是一些热心的开发者通过 PR 贡献的。\n\n无论是对于项目维护者，还是想要贡献代码的热心开发者来说，一个简洁明了的 commit 描述都是必不可少的。也就是说我们需要用尽可能简短的备注信息，备注每一个 commit 的作用，以便大家查看。所以我们需要一种规范的，语义化的备注格式，很快由知名项目牵头，全球接收并统一了一种语义化的备注格式，这就是 semantic 规范的来源。\n\n## 优势\n\n当一个仓库所有的 commit 信息都是用标准的 semantic 格式时，用户可以很方便的理解每一个 commit 的作用。\n\n同时，semantic 支持直接将某个提交或 PR 与特定 issue 链接，并自动关闭或引用这些 issue。\n\n通过一些第三方工具，大家可以基于这些备注信息进行过滤查找，更新日志生成等操作。\n\n## 格式\n\n```text\n<type>(<scope>): <subject>\n<body>\n\n<footer>\n```\n\n### header\n\n第一行被称为 `header`，它必须只有一行，包括三个字段: `<type>`(必需)、`<scope>`(可选)和 `<subject>`(必需)\n\n### type\n\ncommit 的类型。\n\n规范中规定了如下类型:\n\n- `feat`: feature, 新增功能\n- `fix` : bug fix, 修复 bug\n- `docs`: documentation, 仅仅修改了文档，如 `README.md`\n- `style`: style, 仅仅是对格式进行修改，如逗号、缩进、空格等，不改变代码逻辑\n- `refactor`: refactor, 代码重构，一般更改了源文件或测试文件，但没有新增功能或修复 bug\n- `perf`: performance, 优化相关，如提升性能、用户体验等\n- `test`: test, 测试用例，包括单元测试，集成测试\n- `chore`: chore, 对于库的其他内容的改变，一般不涉及到源文件或测试文件，比如更改 CI 设置，提升仓库以来等\n- `revert`: 版本回滚\n\n### scope\n\n用于说明 commit 影响的范围，比如: `views` , `component`, `utils`, `test`。这个是由项目的内容与结构决定的。\n\n### subject\n\ncommit 目的的简短描述，最好小于 50 字符，一般不超过 65 个字符，最长不超过 80 字符。\n\n当 subject 限制的字符数无法详细说明此 commit 的变动时，将 commit 的具体变动放置在 body 中\n\n### body\n\n对本次 commit 修改内容的具体描述，可以分为多行。`body` 是可选的，而且 `body` 可以有多行。\n\n### footer\n\n可选的，前面有一空行。可以添加一些备注，一般放置 `BREAKING CHANGE`(一些破坏性的变动) 或修复的 bug(涉及的 issue)的链接。\n\n## Semantic commit 与 Changelog 生成\n\n不同语言环境都有很多种工具来帮助您创建一个 semantic commit 或者自动生成 changelog。\n\n::: tip 案例\n\nNode.js 环境下可以使用:\n\n- [`cz-conventional-changelog`](https://github.com/commitizen/cz-conventional-changelog) 提供 `git cz` 命令辅助创建 semantic commit。\n\n- [`conventional-changelog-cli`](https://github.com/conventional-changelog/conventional-changelog) 来快速生成更新日志，如 [vuepress-theme-hope 的更改日志](https://github.com/Mister-Hope/vuepress-theme-hope/blob/master/CHANGELOG.md)\n\n:::\n","excerpt":"","title":"","headers":[{"level":2,"title":"Semantic","slug":"semantic","link":"#semantic","children":[]},{"level":2,"title":"优势","slug":"优势","link":"#优势","children":[]},{"level":2,"title":"格式","slug":"格式","link":"#格式","children":[{"level":3,"title":"header","slug":"header","link":"#header","children":[]},{"level":3,"title":"type","slug":"type","link":"#type","children":[]},{"level":3,"title":"scope","slug":"scope","link":"#scope","children":[]},{"level":3,"title":"subject","slug":"subject","link":"#subject","children":[]},{"level":3,"title":"body","slug":"body","link":"#body","children":[]},{"level":3,"title":"footer","slug":"footer","link":"#footer","children":[]}]},{"level":2,"title":"Semantic commit 与 Changelog 生成","slug":"semantic-commit-与-changelog-生成","link":"#semantic-commit-与-changelog-生成","children":[]}]}}
