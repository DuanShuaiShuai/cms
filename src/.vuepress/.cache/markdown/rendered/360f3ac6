{"content":"<p>Nginx 是一个高性能的 HTTP 和反向代理服务器，也是一个 IMAP / POP3 / SMTP 代理服务器。其特点是占有内存少，并发能力强，稳定性高，并且 Nginx 也拥有友好灵活的配置。</p>\n<!-- more -->\n<h2 id=\"启动-停止和重新加载配置\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#启动-停止和重新加载配置\"><span>启动，停止和重新加载配置</span></a></h2>\n<p>要启动 nginx，请运行可执行文件。一旦启动 nginx，就可以通过使用 <code v-pre>-s</code> 参数调用可执行文件来对其进行控制。使用以下语法:</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">nginx</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> -s</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> signal</span></span></code></pre>\n</div><p>其中 <code v-pre>signal</code> 可能是以下之一:</p>\n<ul>\n<li>stop - 快速关机</li>\n<li>quit — 正常关机</li>\n<li>reload — 重新加载配置文件</li>\n<li>reopen — 重新打开日志文件</li>\n</ul>\n<h2 id=\"配置文件的结构\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#配置文件的结构\"><span>配置文件的结构</span></a></h2>\n<p>Nginx 由受配置文件中指定的指令控制的模块组成。指令分为简单指令和块指令。一个简单的指令由名称和参数组成，这些名称和参数之间用空格分隔，并以分号(<code v-pre>;</code>)结尾。块指令的结构与简单指令的结构相同，但是它不以分号结尾，而是带有一组用括号 (<code v-pre>{</code> 和 <code v-pre>}</code>) 括起来的附加指令。如果一个块指令在括号内可以有其他指令，则称为 context (例如: <code v-pre>events</code>, <code v-pre>http</code>, <code v-pre>server</code> 和 <code v-pre>location</code>)。</p>\n<p>放置在任何 context 外部的配置文件中的指令都被视为在 main context 中。<code v-pre>events</code> 和 <code v-pre>http</code> 指令位于 <code v-pre>main</code> context 中，<code v-pre>server</code> 位于 <code v-pre>http</code> 中, 并且 <code v-pre>location</code> 在 <code v-pre>server</code> 中</p>\n<p><code v-pre>#</code> 号后的其余行被视为注释。</p>\n<h2 id=\"提供静态内容\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#提供静态内容\"><span>提供静态内容</span></a></h2>\n<p>Web 服务器的一项重要任务是分发文件(例如图像或静态 HTML 页面)。您将实现一个示例，其中将根据请求从不同的本地目录提供文件: <code v-pre>/data/www</code> (可能包含 HTML 文件)和 <code v-pre>/data/images</code>(包含图像)。这将需要编辑配置文件，并在带有两个位置块的 http 块内设置服务器块。</p>\n<p>首先，创建 <code v-pre>/data/www</code> 目录，并将包含任何文本内容的 <code v-pre>index.html</code> 文件放入其中，并创建 <code v-pre>/data/images</code> 目录并将一些图像放入其中。</p>\n<p>接下来，打开配置文件。默认配置文件已经包含了服务器块的几个示例，大部分已被注释掉。现在，注释掉所有这些块并启动一个新的服务器块:</p>\n<div class=\"language-nginx\" data-highlighter=\"shiki\" data-ext=\"nginx\" data-title=\"nginx\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">http</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  server</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n</div><p>通常，配置文件可以包括几个服务器块，这些服务器块通过它们侦听的端口和服务器名称来区分。一旦 nginx 决定了哪个服务器处理请求，它就会根据服务器块内定义的 location 指令的参数测试请求标头中指定的 URI。</p>\n<p>将以下位置块添加到服务器块:</p>\n<div class=\"language-nginx\" data-highlighter=\"shiki\" data-ext=\"nginx\" data-title=\"nginx\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">location</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> / {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  root </span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">/data/www;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n</div><p>与请求中的 URI 相比，此位置块指定 “<code v-pre>/</code>” 前缀。对于匹配的请求，URI 将被添加到 root 指令中指定的路径，即 <code v-pre>/data/www</code>，以形成本地文件系统上所请求文件的路径。如果有多个匹配的位置块，nginx 将选择前缀最长的位置块。上面的位置块提供了最短的前缀，长度为 1，因此，只有在所有其他位置块均未提供匹配项时，才会使用该块。</p>\n<p>接下来，添加第二个位置块:</p>\n<div class=\"language-nginx\" data-highlighter=\"shiki\" data-ext=\"nginx\" data-title=\"nginx\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">location</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> /images/ {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  root </span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">/data;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n</div><p>这将匹配以 <code v-pre>/images/</code> 开头的请求(位置 <code v-pre>/</code> 也匹配此类请求，但前缀较短)。</p>\n<p>服务器块的最终配置应如下所示:</p>\n<div class=\"language-nginx\" data-highlighter=\"shiki\" data-ext=\"nginx\" data-title=\"nginx\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">server</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  location</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> / {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    root </span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">/data/www;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  location</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> /images/ {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    root </span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">/data;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n</div><p>这已经是服务器的工作配置，可以在标准端口 <code v-pre>80</code> 上侦听，并且可以在本地计算机上的 <code v-pre>http://localhost/</code> 上访问。响应以 <code v-pre>/images/</code> 开头的 URI 请求，服务器将从 <code v-pre>/data/images</code> 目录中发送文件。例如，为响应 <code v-pre>http://localhost/images/example.png</code> 请求，nginx 将发送文件 <code v-pre>/data/images/example.png</code>。如果该文件不存在，nginx 将发送一个注明 404 错误的响应。URI 不以 <code v-pre>/images/</code> 开头的请求将被映射到 <code v-pre>/data/www</code> 目录。例如，nginx 会响应 <code v-pre>http://localhost/some/example.html</code> 请求发送 <code v-pre>/data/www/some/example.html</code> 文件。</p>\n<p>要应用新配置，请启动 nginx (如果尚未启动)，或通过执行以下命令向 nginx 的主进程发送 <code v-pre>reload</code> 信号:</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">nginx</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> -s</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> reload</span></span></code></pre>\n</div><p>如果某些东西无法按预期工作，则可以尝试在目录 <code v-pre>/usr/local/nginx/logs</code> 或目录 <code v-pre>/var/log/nginx</code> 中的 access.log 和 error.log 文件中找出原因。。</p>\n<h2 id=\"设置简单的代理服务器\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#设置简单的代理服务器\"><span>设置简单的代理服务器</span></a></h2>\n<p>Nginx 的一种常用用法是将其设置为代理服务器，这意味着服务器可以接收请求，将请求传递给代理服务器，从请求中检索响应并将它们发送给客户端。</p>\n<p>我们将配置一个基本的代理服务器，该服务器为图像请求和本地目录中的文件提供服务，并将所有其他请求发送到代理服务器。在此示例中，两个服务器都将在单个 nginx 实例上定义。</p>\n<p>首先，通过向 nginx 的配置文件中添加另一个 <code v-pre>server</code> 块来定义代理服务器，其内容如下:</p>\n<div class=\"language-nginx\" data-highlighter=\"shiki\" data-ext=\"nginx\" data-title=\"nginx\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">server</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  listen </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">8080</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  root </span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">/data/up1;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  location</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> / {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n</div><p>这将是一个简单的服务器，它在端口 8080 上侦听 (以前，自从使用标准端口 80 以来，未指定 listen 指令) 并将所有请求映射到本地文件系统的 <code v-pre>/data/up1</code> 目录中。创建此目录，并将 <code v-pre>index.html</code> 文件放入其中。请注意，根指令位于服务器上下文中。当选择用于服务请求的位置块不包括自己的根指令时，将使用这种根指令。</p>\n<p>接下来，使用上一部分中的服务器配置并对其进行修改以使其成为代理服务器配置。在第一个位置块中，将 <code v-pre>proxy_pass</code> 指令与参数中指定的代理服务器的协议，名称和端口放在一起 (在本例中为 <code v-pre>http://localhost:8080</code> ):</p>\n<div class=\"language-nginx\" data-highlighter=\"shiki\" data-ext=\"nginx\" data-title=\"nginx\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">server</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  location</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> / {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    proxy_pass </span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">http://localhost:8080;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  location</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> /images/ {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    root </span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">/data;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n</div><p>我们将修改第二个 location 块，该位置块当前将带有 <code v-pre>/images/</code> 前缀的请求映射到 <code v-pre>/data/images</code> 目录下的文件，以使其与具有典型文件扩展名的图像的请求相匹配。修改后的位置块如下所示:</p>\n<div class=\"language-nginx\" data-highlighter=\"shiki\" data-ext=\"nginx\" data-title=\"nginx\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">location</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> ~ </span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">\\.(gif|jpg|png)$ </span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">{</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  root </span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">/data/images;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n</div><p>该参数是一个正则表达式，它匹配以 <code v-pre>.gif</code>，<code v-pre>.jpg</code> 或 <code v-pre>.png</code> 结尾的所有 URI。正则表达式应以 <code v-pre>~</code> 开头。相应的请求将被映射到 <code v-pre>/ data/images</code> 目录。</p>\n<p>当 nginx 选择一个 <code v-pre>location</code> 块来服务请求时，它首先检查指定前缀的 <code v-pre>location</code> 指令，记住带有最长前缀的 <code v-pre>location</code>，然后检查正则表达式。如果存在与正则表达式匹配的内容，nginx 会选择该 “<code v-pre>location</code>”，否则，它将选择之前记住的位置。</p>\n<p>代理服务器的最终配置如下所示:</p>\n<div class=\"language-nginx\" data-highlighter=\"shiki\" data-ext=\"nginx\" data-title=\"nginx\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">server</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  location</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> / {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    proxy_pass </span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">http://localhost:8080/;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  location</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> ~ </span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">\\.(gif|jpg|png)$ </span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">{</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    root </span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">/data/images;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n</div><p>该服务器将过滤以 <code v-pre>.gif</code>，<code v-pre>.jpg</code> 或 <code v-pre>.png</code> 结尾的请求，并将它们映射到目录 <code v-pre>/data/images</code>(通过将 URI 添加到根指令的参数)，并将所有其他请求传递给上面配置的代理服务器。</p>\n<p>要应用新配置，请按照前面几节的说明将重载信号发送到 nginx。</p>\n<p>还有许多其他指令可用于进一步配置代理连接。</p>\n<h2 id=\"设置-fastcgi-代理\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#设置-fastcgi-代理\"><span>设置 FastCGI 代理</span></a></h2>\n<p>Nginx 可用于将请求路由到 FastCGI 服务器，该服务器运行使用各种框架和编程语言 (例如 PHP) 构建的应用程序。</p>\n<p>与 FastCGI 服务器一起使用的最基本的 Nginx 配置包括使用 <code v-pre>fastcgi_pass</code> 指令而不是 <code v-pre>proxy_pass</code> 指令和 <code v-pre>fastcgi_param</code> 指令来设置传递给 FastCGI 服务器的参数。假设 FastCGI 服务器可以在 <code v-pre>localhost:9000</code> 上访问。以上一节中的代理配置为基础，用 <code v-pre>fastcgi_pass</code> 指令替换 <code v-pre>proxy_pass</code> 指令，并将参数更改为 <code v-pre>localhost:9000</code>。在 PHP 中， <code v-pre>SCRIPT_FILENAME</code> 参数用于确定脚本名称，而 <code v-pre>QUERY_STRING</code> 参数用于传递请求参数。配置的结果为:</p>\n<div class=\"language-nginx line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"nginx\" data-title=\"nginx\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">server</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  location</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> / {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    fastcgi_pass </span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> localhost:9000;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    fastcgi_param </span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">SCRIPT_FILENAME $</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">document_root</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">$</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">fastcgi_script_name</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    fastcgi_param </span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">QUERY_STRING    $</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">query_string</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  location</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> ~ </span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">\\.(gif|jpg|png)$ </span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">{</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    root </span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">/data/images;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>这将设置一个服务器，该服务器将通过 FastCGI 协议将除静态图像请求以外的所有请求路由到运行在 <code v-pre>localhost:9000</code> 上的代理服务器。</p>\n<h2 id=\"官方文档\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#官方文档\"><span>官方文档</span></a></h2>\n<ul>\n<li><a href=\"https://docs.nginx.com/nginx/admin-guide/\" target=\"_blank\" rel=\"noopener noreferrer\">点击此处</a></li>\n</ul>\n","env":{"base":"/","filePath":"/Users/carson/Desktop/Mister-Hope.github.io-main/src/software/nginx.md","filePathRelative":"software/nginx.md","frontmatter":{"title":"Nginx","icon":"nginx","date":"2019-12-13T00:00:00.000Z","category":"服务器"},"sfcBlocks":{"template":{"type":"template","content":"<template><p>Nginx 是一个高性能的 HTTP 和反向代理服务器，也是一个 IMAP / POP3 / SMTP 代理服务器。其特点是占有内存少，并发能力强，稳定性高，并且 Nginx 也拥有友好灵活的配置。</p>\n<!-- more -->\n<h2 id=\"启动-停止和重新加载配置\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#启动-停止和重新加载配置\"><span>启动，停止和重新加载配置</span></a></h2>\n<p>要启动 nginx，请运行可执行文件。一旦启动 nginx，就可以通过使用 <code v-pre>-s</code> 参数调用可执行文件来对其进行控制。使用以下语法:</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">nginx</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> -s</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> signal</span></span></code></pre>\n</div><p>其中 <code v-pre>signal</code> 可能是以下之一:</p>\n<ul>\n<li>stop - 快速关机</li>\n<li>quit — 正常关机</li>\n<li>reload — 重新加载配置文件</li>\n<li>reopen — 重新打开日志文件</li>\n</ul>\n<h2 id=\"配置文件的结构\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#配置文件的结构\"><span>配置文件的结构</span></a></h2>\n<p>Nginx 由受配置文件中指定的指令控制的模块组成。指令分为简单指令和块指令。一个简单的指令由名称和参数组成，这些名称和参数之间用空格分隔，并以分号(<code v-pre>;</code>)结尾。块指令的结构与简单指令的结构相同，但是它不以分号结尾，而是带有一组用括号 (<code v-pre>{</code> 和 <code v-pre>}</code>) 括起来的附加指令。如果一个块指令在括号内可以有其他指令，则称为 context (例如: <code v-pre>events</code>, <code v-pre>http</code>, <code v-pre>server</code> 和 <code v-pre>location</code>)。</p>\n<p>放置在任何 context 外部的配置文件中的指令都被视为在 main context 中。<code v-pre>events</code> 和 <code v-pre>http</code> 指令位于 <code v-pre>main</code> context 中，<code v-pre>server</code> 位于 <code v-pre>http</code> 中, 并且 <code v-pre>location</code> 在 <code v-pre>server</code> 中</p>\n<p><code v-pre>#</code> 号后的其余行被视为注释。</p>\n<h2 id=\"提供静态内容\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#提供静态内容\"><span>提供静态内容</span></a></h2>\n<p>Web 服务器的一项重要任务是分发文件(例如图像或静态 HTML 页面)。您将实现一个示例，其中将根据请求从不同的本地目录提供文件: <code v-pre>/data/www</code> (可能包含 HTML 文件)和 <code v-pre>/data/images</code>(包含图像)。这将需要编辑配置文件，并在带有两个位置块的 http 块内设置服务器块。</p>\n<p>首先，创建 <code v-pre>/data/www</code> 目录，并将包含任何文本内容的 <code v-pre>index.html</code> 文件放入其中，并创建 <code v-pre>/data/images</code> 目录并将一些图像放入其中。</p>\n<p>接下来，打开配置文件。默认配置文件已经包含了服务器块的几个示例，大部分已被注释掉。现在，注释掉所有这些块并启动一个新的服务器块:</p>\n<div class=\"language-nginx\" data-highlighter=\"shiki\" data-ext=\"nginx\" data-title=\"nginx\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">http</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  server</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n</div><p>通常，配置文件可以包括几个服务器块，这些服务器块通过它们侦听的端口和服务器名称来区分。一旦 nginx 决定了哪个服务器处理请求，它就会根据服务器块内定义的 location 指令的参数测试请求标头中指定的 URI。</p>\n<p>将以下位置块添加到服务器块:</p>\n<div class=\"language-nginx\" data-highlighter=\"shiki\" data-ext=\"nginx\" data-title=\"nginx\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">location</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> / {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  root </span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">/data/www;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n</div><p>与请求中的 URI 相比，此位置块指定 “<code v-pre>/</code>” 前缀。对于匹配的请求，URI 将被添加到 root 指令中指定的路径，即 <code v-pre>/data/www</code>，以形成本地文件系统上所请求文件的路径。如果有多个匹配的位置块，nginx 将选择前缀最长的位置块。上面的位置块提供了最短的前缀，长度为 1，因此，只有在所有其他位置块均未提供匹配项时，才会使用该块。</p>\n<p>接下来，添加第二个位置块:</p>\n<div class=\"language-nginx\" data-highlighter=\"shiki\" data-ext=\"nginx\" data-title=\"nginx\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">location</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> /images/ {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  root </span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">/data;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n</div><p>这将匹配以 <code v-pre>/images/</code> 开头的请求(位置 <code v-pre>/</code> 也匹配此类请求，但前缀较短)。</p>\n<p>服务器块的最终配置应如下所示:</p>\n<div class=\"language-nginx\" data-highlighter=\"shiki\" data-ext=\"nginx\" data-title=\"nginx\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">server</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  location</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> / {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    root </span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">/data/www;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  location</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> /images/ {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    root </span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">/data;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n</div><p>这已经是服务器的工作配置，可以在标准端口 <code v-pre>80</code> 上侦听，并且可以在本地计算机上的 <code v-pre>http://localhost/</code> 上访问。响应以 <code v-pre>/images/</code> 开头的 URI 请求，服务器将从 <code v-pre>/data/images</code> 目录中发送文件。例如，为响应 <code v-pre>http://localhost/images/example.png</code> 请求，nginx 将发送文件 <code v-pre>/data/images/example.png</code>。如果该文件不存在，nginx 将发送一个注明 404 错误的响应。URI 不以 <code v-pre>/images/</code> 开头的请求将被映射到 <code v-pre>/data/www</code> 目录。例如，nginx 会响应 <code v-pre>http://localhost/some/example.html</code> 请求发送 <code v-pre>/data/www/some/example.html</code> 文件。</p>\n<p>要应用新配置，请启动 nginx (如果尚未启动)，或通过执行以下命令向 nginx 的主进程发送 <code v-pre>reload</code> 信号:</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">nginx</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> -s</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> reload</span></span></code></pre>\n</div><p>如果某些东西无法按预期工作，则可以尝试在目录 <code v-pre>/usr/local/nginx/logs</code> 或目录 <code v-pre>/var/log/nginx</code> 中的 access.log 和 error.log 文件中找出原因。。</p>\n<h2 id=\"设置简单的代理服务器\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#设置简单的代理服务器\"><span>设置简单的代理服务器</span></a></h2>\n<p>Nginx 的一种常用用法是将其设置为代理服务器，这意味着服务器可以接收请求，将请求传递给代理服务器，从请求中检索响应并将它们发送给客户端。</p>\n<p>我们将配置一个基本的代理服务器，该服务器为图像请求和本地目录中的文件提供服务，并将所有其他请求发送到代理服务器。在此示例中，两个服务器都将在单个 nginx 实例上定义。</p>\n<p>首先，通过向 nginx 的配置文件中添加另一个 <code v-pre>server</code> 块来定义代理服务器，其内容如下:</p>\n<div class=\"language-nginx\" data-highlighter=\"shiki\" data-ext=\"nginx\" data-title=\"nginx\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">server</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  listen </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">8080</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  root </span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">/data/up1;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  location</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> / {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n</div><p>这将是一个简单的服务器，它在端口 8080 上侦听 (以前，自从使用标准端口 80 以来，未指定 listen 指令) 并将所有请求映射到本地文件系统的 <code v-pre>/data/up1</code> 目录中。创建此目录，并将 <code v-pre>index.html</code> 文件放入其中。请注意，根指令位于服务器上下文中。当选择用于服务请求的位置块不包括自己的根指令时，将使用这种根指令。</p>\n<p>接下来，使用上一部分中的服务器配置并对其进行修改以使其成为代理服务器配置。在第一个位置块中，将 <code v-pre>proxy_pass</code> 指令与参数中指定的代理服务器的协议，名称和端口放在一起 (在本例中为 <code v-pre>http://localhost:8080</code> ):</p>\n<div class=\"language-nginx\" data-highlighter=\"shiki\" data-ext=\"nginx\" data-title=\"nginx\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">server</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  location</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> / {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    proxy_pass </span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">http://localhost:8080;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  location</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> /images/ {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    root </span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">/data;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n</div><p>我们将修改第二个 location 块，该位置块当前将带有 <code v-pre>/images/</code> 前缀的请求映射到 <code v-pre>/data/images</code> 目录下的文件，以使其与具有典型文件扩展名的图像的请求相匹配。修改后的位置块如下所示:</p>\n<div class=\"language-nginx\" data-highlighter=\"shiki\" data-ext=\"nginx\" data-title=\"nginx\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">location</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> ~ </span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">\\.(gif|jpg|png)$ </span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">{</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  root </span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">/data/images;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n</div><p>该参数是一个正则表达式，它匹配以 <code v-pre>.gif</code>，<code v-pre>.jpg</code> 或 <code v-pre>.png</code> 结尾的所有 URI。正则表达式应以 <code v-pre>~</code> 开头。相应的请求将被映射到 <code v-pre>/ data/images</code> 目录。</p>\n<p>当 nginx 选择一个 <code v-pre>location</code> 块来服务请求时，它首先检查指定前缀的 <code v-pre>location</code> 指令，记住带有最长前缀的 <code v-pre>location</code>，然后检查正则表达式。如果存在与正则表达式匹配的内容，nginx 会选择该 “<code v-pre>location</code>”，否则，它将选择之前记住的位置。</p>\n<p>代理服务器的最终配置如下所示:</p>\n<div class=\"language-nginx\" data-highlighter=\"shiki\" data-ext=\"nginx\" data-title=\"nginx\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">server</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  location</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> / {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    proxy_pass </span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">http://localhost:8080/;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  location</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> ~ </span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">\\.(gif|jpg|png)$ </span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">{</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    root </span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">/data/images;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n</div><p>该服务器将过滤以 <code v-pre>.gif</code>，<code v-pre>.jpg</code> 或 <code v-pre>.png</code> 结尾的请求，并将它们映射到目录 <code v-pre>/data/images</code>(通过将 URI 添加到根指令的参数)，并将所有其他请求传递给上面配置的代理服务器。</p>\n<p>要应用新配置，请按照前面几节的说明将重载信号发送到 nginx。</p>\n<p>还有许多其他指令可用于进一步配置代理连接。</p>\n<h2 id=\"设置-fastcgi-代理\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#设置-fastcgi-代理\"><span>设置 FastCGI 代理</span></a></h2>\n<p>Nginx 可用于将请求路由到 FastCGI 服务器，该服务器运行使用各种框架和编程语言 (例如 PHP) 构建的应用程序。</p>\n<p>与 FastCGI 服务器一起使用的最基本的 Nginx 配置包括使用 <code v-pre>fastcgi_pass</code> 指令而不是 <code v-pre>proxy_pass</code> 指令和 <code v-pre>fastcgi_param</code> 指令来设置传递给 FastCGI 服务器的参数。假设 FastCGI 服务器可以在 <code v-pre>localhost:9000</code> 上访问。以上一节中的代理配置为基础，用 <code v-pre>fastcgi_pass</code> 指令替换 <code v-pre>proxy_pass</code> 指令，并将参数更改为 <code v-pre>localhost:9000</code>。在 PHP 中， <code v-pre>SCRIPT_FILENAME</code> 参数用于确定脚本名称，而 <code v-pre>QUERY_STRING</code> 参数用于传递请求参数。配置的结果为:</p>\n<div class=\"language-nginx line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"nginx\" data-title=\"nginx\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">server</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  location</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> / {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    fastcgi_pass </span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> localhost:9000;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    fastcgi_param </span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">SCRIPT_FILENAME $</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">document_root</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">$</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">fastcgi_script_name</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    fastcgi_param </span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">QUERY_STRING    $</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">query_string</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  location</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> ~ </span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">\\.(gif|jpg|png)$ </span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">{</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    root </span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">/data/images;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>这将设置一个服务器，该服务器将通过 FastCGI 协议将除静态图像请求以外的所有请求路由到运行在 <code v-pre>localhost:9000</code> 上的代理服务器。</p>\n<h2 id=\"官方文档\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#官方文档\"><span>官方文档</span></a></h2>\n<ul>\n<li><a href=\"https://docs.nginx.com/nginx/admin-guide/\" target=\"_blank\" rel=\"noopener noreferrer\">点击此处</a></li>\n</ul>\n</template>","contentStripped":"<p>Nginx 是一个高性能的 HTTP 和反向代理服务器，也是一个 IMAP / POP3 / SMTP 代理服务器。其特点是占有内存少，并发能力强，稳定性高，并且 Nginx 也拥有友好灵活的配置。</p>\n<!-- more -->\n<h2 id=\"启动-停止和重新加载配置\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#启动-停止和重新加载配置\"><span>启动，停止和重新加载配置</span></a></h2>\n<p>要启动 nginx，请运行可执行文件。一旦启动 nginx，就可以通过使用 <code v-pre>-s</code> 参数调用可执行文件来对其进行控制。使用以下语法:</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">nginx</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> -s</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> signal</span></span></code></pre>\n</div><p>其中 <code v-pre>signal</code> 可能是以下之一:</p>\n<ul>\n<li>stop - 快速关机</li>\n<li>quit — 正常关机</li>\n<li>reload — 重新加载配置文件</li>\n<li>reopen — 重新打开日志文件</li>\n</ul>\n<h2 id=\"配置文件的结构\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#配置文件的结构\"><span>配置文件的结构</span></a></h2>\n<p>Nginx 由受配置文件中指定的指令控制的模块组成。指令分为简单指令和块指令。一个简单的指令由名称和参数组成，这些名称和参数之间用空格分隔，并以分号(<code v-pre>;</code>)结尾。块指令的结构与简单指令的结构相同，但是它不以分号结尾，而是带有一组用括号 (<code v-pre>{</code> 和 <code v-pre>}</code>) 括起来的附加指令。如果一个块指令在括号内可以有其他指令，则称为 context (例如: <code v-pre>events</code>, <code v-pre>http</code>, <code v-pre>server</code> 和 <code v-pre>location</code>)。</p>\n<p>放置在任何 context 外部的配置文件中的指令都被视为在 main context 中。<code v-pre>events</code> 和 <code v-pre>http</code> 指令位于 <code v-pre>main</code> context 中，<code v-pre>server</code> 位于 <code v-pre>http</code> 中, 并且 <code v-pre>location</code> 在 <code v-pre>server</code> 中</p>\n<p><code v-pre>#</code> 号后的其余行被视为注释。</p>\n<h2 id=\"提供静态内容\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#提供静态内容\"><span>提供静态内容</span></a></h2>\n<p>Web 服务器的一项重要任务是分发文件(例如图像或静态 HTML 页面)。您将实现一个示例，其中将根据请求从不同的本地目录提供文件: <code v-pre>/data/www</code> (可能包含 HTML 文件)和 <code v-pre>/data/images</code>(包含图像)。这将需要编辑配置文件，并在带有两个位置块的 http 块内设置服务器块。</p>\n<p>首先，创建 <code v-pre>/data/www</code> 目录，并将包含任何文本内容的 <code v-pre>index.html</code> 文件放入其中，并创建 <code v-pre>/data/images</code> 目录并将一些图像放入其中。</p>\n<p>接下来，打开配置文件。默认配置文件已经包含了服务器块的几个示例，大部分已被注释掉。现在，注释掉所有这些块并启动一个新的服务器块:</p>\n<div class=\"language-nginx\" data-highlighter=\"shiki\" data-ext=\"nginx\" data-title=\"nginx\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">http</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  server</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n</div><p>通常，配置文件可以包括几个服务器块，这些服务器块通过它们侦听的端口和服务器名称来区分。一旦 nginx 决定了哪个服务器处理请求，它就会根据服务器块内定义的 location 指令的参数测试请求标头中指定的 URI。</p>\n<p>将以下位置块添加到服务器块:</p>\n<div class=\"language-nginx\" data-highlighter=\"shiki\" data-ext=\"nginx\" data-title=\"nginx\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">location</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> / {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  root </span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">/data/www;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n</div><p>与请求中的 URI 相比，此位置块指定 “<code v-pre>/</code>” 前缀。对于匹配的请求，URI 将被添加到 root 指令中指定的路径，即 <code v-pre>/data/www</code>，以形成本地文件系统上所请求文件的路径。如果有多个匹配的位置块，nginx 将选择前缀最长的位置块。上面的位置块提供了最短的前缀，长度为 1，因此，只有在所有其他位置块均未提供匹配项时，才会使用该块。</p>\n<p>接下来，添加第二个位置块:</p>\n<div class=\"language-nginx\" data-highlighter=\"shiki\" data-ext=\"nginx\" data-title=\"nginx\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">location</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> /images/ {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  root </span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">/data;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n</div><p>这将匹配以 <code v-pre>/images/</code> 开头的请求(位置 <code v-pre>/</code> 也匹配此类请求，但前缀较短)。</p>\n<p>服务器块的最终配置应如下所示:</p>\n<div class=\"language-nginx\" data-highlighter=\"shiki\" data-ext=\"nginx\" data-title=\"nginx\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">server</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  location</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> / {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    root </span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">/data/www;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  location</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> /images/ {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    root </span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">/data;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n</div><p>这已经是服务器的工作配置，可以在标准端口 <code v-pre>80</code> 上侦听，并且可以在本地计算机上的 <code v-pre>http://localhost/</code> 上访问。响应以 <code v-pre>/images/</code> 开头的 URI 请求，服务器将从 <code v-pre>/data/images</code> 目录中发送文件。例如，为响应 <code v-pre>http://localhost/images/example.png</code> 请求，nginx 将发送文件 <code v-pre>/data/images/example.png</code>。如果该文件不存在，nginx 将发送一个注明 404 错误的响应。URI 不以 <code v-pre>/images/</code> 开头的请求将被映射到 <code v-pre>/data/www</code> 目录。例如，nginx 会响应 <code v-pre>http://localhost/some/example.html</code> 请求发送 <code v-pre>/data/www/some/example.html</code> 文件。</p>\n<p>要应用新配置，请启动 nginx (如果尚未启动)，或通过执行以下命令向 nginx 的主进程发送 <code v-pre>reload</code> 信号:</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">nginx</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> -s</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> reload</span></span></code></pre>\n</div><p>如果某些东西无法按预期工作，则可以尝试在目录 <code v-pre>/usr/local/nginx/logs</code> 或目录 <code v-pre>/var/log/nginx</code> 中的 access.log 和 error.log 文件中找出原因。。</p>\n<h2 id=\"设置简单的代理服务器\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#设置简单的代理服务器\"><span>设置简单的代理服务器</span></a></h2>\n<p>Nginx 的一种常用用法是将其设置为代理服务器，这意味着服务器可以接收请求，将请求传递给代理服务器，从请求中检索响应并将它们发送给客户端。</p>\n<p>我们将配置一个基本的代理服务器，该服务器为图像请求和本地目录中的文件提供服务，并将所有其他请求发送到代理服务器。在此示例中，两个服务器都将在单个 nginx 实例上定义。</p>\n<p>首先，通过向 nginx 的配置文件中添加另一个 <code v-pre>server</code> 块来定义代理服务器，其内容如下:</p>\n<div class=\"language-nginx\" data-highlighter=\"shiki\" data-ext=\"nginx\" data-title=\"nginx\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">server</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  listen </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">8080</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  root </span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">/data/up1;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  location</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> / {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n</div><p>这将是一个简单的服务器，它在端口 8080 上侦听 (以前，自从使用标准端口 80 以来，未指定 listen 指令) 并将所有请求映射到本地文件系统的 <code v-pre>/data/up1</code> 目录中。创建此目录，并将 <code v-pre>index.html</code> 文件放入其中。请注意，根指令位于服务器上下文中。当选择用于服务请求的位置块不包括自己的根指令时，将使用这种根指令。</p>\n<p>接下来，使用上一部分中的服务器配置并对其进行修改以使其成为代理服务器配置。在第一个位置块中，将 <code v-pre>proxy_pass</code> 指令与参数中指定的代理服务器的协议，名称和端口放在一起 (在本例中为 <code v-pre>http://localhost:8080</code> ):</p>\n<div class=\"language-nginx\" data-highlighter=\"shiki\" data-ext=\"nginx\" data-title=\"nginx\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">server</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  location</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> / {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    proxy_pass </span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">http://localhost:8080;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  location</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> /images/ {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    root </span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">/data;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n</div><p>我们将修改第二个 location 块，该位置块当前将带有 <code v-pre>/images/</code> 前缀的请求映射到 <code v-pre>/data/images</code> 目录下的文件，以使其与具有典型文件扩展名的图像的请求相匹配。修改后的位置块如下所示:</p>\n<div class=\"language-nginx\" data-highlighter=\"shiki\" data-ext=\"nginx\" data-title=\"nginx\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">location</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> ~ </span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">\\.(gif|jpg|png)$ </span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">{</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  root </span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">/data/images;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n</div><p>该参数是一个正则表达式，它匹配以 <code v-pre>.gif</code>，<code v-pre>.jpg</code> 或 <code v-pre>.png</code> 结尾的所有 URI。正则表达式应以 <code v-pre>~</code> 开头。相应的请求将被映射到 <code v-pre>/ data/images</code> 目录。</p>\n<p>当 nginx 选择一个 <code v-pre>location</code> 块来服务请求时，它首先检查指定前缀的 <code v-pre>location</code> 指令，记住带有最长前缀的 <code v-pre>location</code>，然后检查正则表达式。如果存在与正则表达式匹配的内容，nginx 会选择该 “<code v-pre>location</code>”，否则，它将选择之前记住的位置。</p>\n<p>代理服务器的最终配置如下所示:</p>\n<div class=\"language-nginx\" data-highlighter=\"shiki\" data-ext=\"nginx\" data-title=\"nginx\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">server</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  location</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> / {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    proxy_pass </span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">http://localhost:8080/;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  location</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> ~ </span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">\\.(gif|jpg|png)$ </span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">{</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    root </span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">/data/images;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n</div><p>该服务器将过滤以 <code v-pre>.gif</code>，<code v-pre>.jpg</code> 或 <code v-pre>.png</code> 结尾的请求，并将它们映射到目录 <code v-pre>/data/images</code>(通过将 URI 添加到根指令的参数)，并将所有其他请求传递给上面配置的代理服务器。</p>\n<p>要应用新配置，请按照前面几节的说明将重载信号发送到 nginx。</p>\n<p>还有许多其他指令可用于进一步配置代理连接。</p>\n<h2 id=\"设置-fastcgi-代理\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#设置-fastcgi-代理\"><span>设置 FastCGI 代理</span></a></h2>\n<p>Nginx 可用于将请求路由到 FastCGI 服务器，该服务器运行使用各种框架和编程语言 (例如 PHP) 构建的应用程序。</p>\n<p>与 FastCGI 服务器一起使用的最基本的 Nginx 配置包括使用 <code v-pre>fastcgi_pass</code> 指令而不是 <code v-pre>proxy_pass</code> 指令和 <code v-pre>fastcgi_param</code> 指令来设置传递给 FastCGI 服务器的参数。假设 FastCGI 服务器可以在 <code v-pre>localhost:9000</code> 上访问。以上一节中的代理配置为基础，用 <code v-pre>fastcgi_pass</code> 指令替换 <code v-pre>proxy_pass</code> 指令，并将参数更改为 <code v-pre>localhost:9000</code>。在 PHP 中， <code v-pre>SCRIPT_FILENAME</code> 参数用于确定脚本名称，而 <code v-pre>QUERY_STRING</code> 参数用于传递请求参数。配置的结果为:</p>\n<div class=\"language-nginx line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"nginx\" data-title=\"nginx\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">server</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  location</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> / {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    fastcgi_pass </span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> localhost:9000;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    fastcgi_param </span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">SCRIPT_FILENAME $</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">document_root</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">$</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">fastcgi_script_name</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    fastcgi_param </span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">QUERY_STRING    $</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">query_string</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  location</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> ~ </span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">\\.(gif|jpg|png)$ </span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">{</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    root </span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">/data/images;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>这将设置一个服务器，该服务器将通过 FastCGI 协议将除静态图像请求以外的所有请求路由到运行在 <code v-pre>localhost:9000</code> 上的代理服务器。</p>\n<h2 id=\"官方文档\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#官方文档\"><span>官方文档</span></a></h2>\n<ul>\n<li><a href=\"https://docs.nginx.com/nginx/admin-guide/\" target=\"_blank\" rel=\"noopener noreferrer\">点击此处</a></li>\n</ul>\n","tagOpen":"<template>","tagClose":"</template>"},"script":null,"scriptSetup":null,"scripts":[],"styles":[],"customBlocks":[]},"content":"\nNginx 是一个高性能的 HTTP 和反向代理服务器，也是一个 IMAP / POP3 / SMTP 代理服务器。其特点是占有内存少，并发能力强，稳定性高，并且 Nginx 也拥有友好灵活的配置。\n\n<!-- more -->\n\n## 启动，停止和重新加载配置\n\n要启动 nginx，请运行可执行文件。一旦启动 nginx，就可以通过使用 `-s` 参数调用可执行文件来对其进行控制。使用以下语法:\n\n```bash\nnginx -s signal\n```\n\n其中 `signal` 可能是以下之一:\n\n- stop - 快速关机\n- quit — 正常关机\n- reload — 重新加载配置文件\n- reopen — 重新打开日志文件\n\n## 配置文件的结构\n\nNginx 由受配置文件中指定的指令控制的模块组成。指令分为简单指令和块指令。一个简单的指令由名称和参数组成，这些名称和参数之间用空格分隔，并以分号(`;`)结尾。块指令的结构与简单指令的结构相同，但是它不以分号结尾，而是带有一组用括号 (`{` 和 `}`) 括起来的附加指令。如果一个块指令在括号内可以有其他指令，则称为 context (例如: `events`, `http`, `server` 和 `location`)。\n\n放置在任何 context 外部的配置文件中的指令都被视为在 main context 中。`events` 和 `http` 指令位于 `main` context 中，`server` 位于 `http` 中, 并且 `location` 在 `server` 中\n\n`#` 号后的其余行被视为注释。\n\n## 提供静态内容\n\nWeb 服务器的一项重要任务是分发文件(例如图像或静态 HTML 页面)。您将实现一个示例，其中将根据请求从不同的本地目录提供文件: `/data/www` (可能包含 HTML 文件)和 `/data/images`(包含图像)。这将需要编辑配置文件，并在带有两个位置块的 http 块内设置服务器块。\n\n首先，创建 `/data/www` 目录，并将包含任何文本内容的 `index.html` 文件放入其中，并创建 `/data/images` 目录并将一些图像放入其中。\n\n接下来，打开配置文件。默认配置文件已经包含了服务器块的几个示例，大部分已被注释掉。现在，注释掉所有这些块并启动一个新的服务器块:\n\n```nginx\nhttp {\n  server {\n  }\n}\n```\n\n通常，配置文件可以包括几个服务器块，这些服务器块通过它们侦听的端口和服务器名称来区分。一旦 nginx 决定了哪个服务器处理请求，它就会根据服务器块内定义的 location 指令的参数测试请求标头中指定的 URI。\n\n将以下位置块添加到服务器块:\n\n```nginx\nlocation / {\n  root /data/www;\n}\n```\n\n与请求中的 URI 相比，此位置块指定 “`/`” 前缀。对于匹配的请求，URI 将被添加到 root 指令中指定的路径，即 `/data/www`，以形成本地文件系统上所请求文件的路径。如果有多个匹配的位置块，nginx 将选择前缀最长的位置块。上面的位置块提供了最短的前缀，长度为 1，因此，只有在所有其他位置块均未提供匹配项时，才会使用该块。\n\n接下来，添加第二个位置块:\n\n```nginx\nlocation /images/ {\n  root /data;\n}\n```\n\n这将匹配以 `/images/` 开头的请求(位置 `/` 也匹配此类请求，但前缀较短)。\n\n服务器块的最终配置应如下所示:\n\n```nginx\nserver {\n  location / {\n    root /data/www;\n  }\n\n  location /images/ {\n    root /data;\n  }\n}\n```\n\n这已经是服务器的工作配置，可以在标准端口 `80` 上侦听，并且可以在本地计算机上的 `http://localhost/` 上访问。响应以 `/images/` 开头的 URI 请求，服务器将从 `/data/images` 目录中发送文件。例如，为响应 `http://localhost/images/example.png` 请求，nginx 将发送文件 `/data/images/example.png`。如果该文件不存在，nginx 将发送一个注明 404 错误的响应。URI 不以 `/images/` 开头的请求将被映射到 `/data/www` 目录。例如，nginx 会响应 `http://localhost/some/example.html` 请求发送 `/data/www/some/example.html` 文件。\n\n要应用新配置，请启动 nginx (如果尚未启动)，或通过执行以下命令向 nginx 的主进程发送 `reload` 信号:\n\n```bash\nnginx -s reload\n```\n\n如果某些东西无法按预期工作，则可以尝试在目录 `/usr/local/nginx/logs` 或目录 `/var/log/nginx` 中的 access.log 和 error.log 文件中找出原因。。\n\n## 设置简单的代理服务器\n\nNginx 的一种常用用法是将其设置为代理服务器，这意味着服务器可以接收请求，将请求传递给代理服务器，从请求中检索响应并将它们发送给客户端。\n\n我们将配置一个基本的代理服务器，该服务器为图像请求和本地目录中的文件提供服务，并将所有其他请求发送到代理服务器。在此示例中，两个服务器都将在单个 nginx 实例上定义。\n\n首先，通过向 nginx 的配置文件中添加另一个 `server` 块来定义代理服务器，其内容如下:\n\n```nginx\nserver {\n  listen 8080;\n  root /data/up1;\n\n  location / {\n  }\n}\n```\n\n这将是一个简单的服务器，它在端口 8080 上侦听 (以前，自从使用标准端口 80 以来，未指定 listen 指令) 并将所有请求映射到本地文件系统的 `/data/up1` 目录中。创建此目录，并将 `index.html` 文件放入其中。请注意，根指令位于服务器上下文中。当选择用于服务请求的位置块不包括自己的根指令时，将使用这种根指令。\n\n接下来，使用上一部分中的服务器配置并对其进行修改以使其成为代理服务器配置。在第一个位置块中，将 `proxy_pass` 指令与参数中指定的代理服务器的协议，名称和端口放在一起 (在本例中为 `http://localhost:8080` ):\n\n```nginx\nserver {\n  location / {\n    proxy_pass http://localhost:8080;\n  }\n\n  location /images/ {\n    root /data;\n  }\n}\n```\n\n我们将修改第二个 location 块，该位置块当前将带有 `/images/` 前缀的请求映射到 `/data/images` 目录下的文件，以使其与具有典型文件扩展名的图像的请求相匹配。修改后的位置块如下所示:\n\n```nginx\nlocation ~ \\.(gif|jpg|png)$ {\n  root /data/images;\n}\n```\n\n该参数是一个正则表达式，它匹配以 `.gif`，`.jpg` 或 `.png` 结尾的所有 URI。正则表达式应以 `~` 开头。相应的请求将被映射到 `/ data/images` 目录。\n\n当 nginx 选择一个 `location` 块来服务请求时，它首先检查指定前缀的 `location` 指令，记住带有最长前缀的 `location`，然后检查正则表达式。如果存在与正则表达式匹配的内容，nginx 会选择该 “`location`”，否则，它将选择之前记住的位置。\n\n代理服务器的最终配置如下所示:\n\n```nginx\nserver {\n  location / {\n    proxy_pass http://localhost:8080/;\n  }\n\n  location ~ \\.(gif|jpg|png)$ {\n    root /data/images;\n  }\n}\n```\n\n该服务器将过滤以 `.gif`，`.jpg` 或 `.png` 结尾的请求，并将它们映射到目录 `/data/images`(通过将 URI 添加到根指令的参数)，并将所有其他请求传递给上面配置的代理服务器。\n\n要应用新配置，请按照前面几节的说明将重载信号发送到 nginx。\n\n还有许多其他指令可用于进一步配置代理连接。\n\n## 设置 FastCGI 代理\n\nNginx 可用于将请求路由到 FastCGI 服务器，该服务器运行使用各种框架和编程语言 (例如 PHP) 构建的应用程序。\n\n与 FastCGI 服务器一起使用的最基本的 Nginx 配置包括使用 `fastcgi_pass` 指令而不是 `proxy_pass` 指令和 `fastcgi_param` 指令来设置传递给 FastCGI 服务器的参数。假设 FastCGI 服务器可以在 `localhost:9000` 上访问。以上一节中的代理配置为基础，用 `fastcgi_pass` 指令替换 `proxy_pass` 指令，并将参数更改为 `localhost:9000`。在 PHP 中， `SCRIPT_FILENAME` 参数用于确定脚本名称，而 `QUERY_STRING` 参数用于传递请求参数。配置的结果为:\n\n```nginx\nserver {\n  location / {\n    fastcgi_pass  localhost:9000;\n    fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\n    fastcgi_param QUERY_STRING    $query_string;\n  }\n\n  location ~ \\.(gif|jpg|png)$ {\n    root /data/images;\n  }\n}\n```\n\n这将设置一个服务器，该服务器将通过 FastCGI 协议将除静态图像请求以外的所有请求路由到运行在 `localhost:9000` 上的代理服务器。\n\n## 官方文档\n\n- [点击此处](https://docs.nginx.com/nginx/admin-guide/)\n","excerpt":"","title":"","headers":[{"level":2,"title":"启动，停止和重新加载配置","slug":"启动-停止和重新加载配置","link":"#启动-停止和重新加载配置","children":[]},{"level":2,"title":"配置文件的结构","slug":"配置文件的结构","link":"#配置文件的结构","children":[]},{"level":2,"title":"提供静态内容","slug":"提供静态内容","link":"#提供静态内容","children":[]},{"level":2,"title":"设置简单的代理服务器","slug":"设置简单的代理服务器","link":"#设置简单的代理服务器","children":[]},{"level":2,"title":"设置 FastCGI 代理","slug":"设置-fastcgi-代理","link":"#设置-fastcgi-代理","children":[]},{"level":2,"title":"官方文档","slug":"官方文档","link":"#官方文档","children":[]}]}}
