{"content":"<p>由于 Node.js 平台是在后端运行 JavaScript 代码，所以，必须首先在本机安装 Node.js 环境。</p>\n<!-- more -->\n<h2 id=\"安装-node-js\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#安装-node-js\"><span>安装 Node.js</span></a></h2>\n<p>目前 Node.js 的 LTS 版本是 18.15.0。首先，从 Node.js 官网下载对应平台的安装程序。点击<strong>长期维护版</strong>的下载按钮。</p>\n<ul>\n<li><a href=\"https://nodejs.org/zh-cn/\" target=\"_blank\" rel=\"noopener noreferrer\">Node.js 官网</a></li>\n</ul>\n<h3 id=\"安装过程\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#安装过程\"><span>安装过程</span></a></h3>\n<ul>\n<li>\n<p>在 Windows 上安装时务必选择全部组件，包括勾选 <code v-pre>Add to Path</code>。</p>\n<p>在安装过程中，无需勾选 &quot;Automatically install the necessary tools&quot;。选中此项会在电脑中安装 VS 等日常开发使用不到的软件。</p>\n<p>安装完成后，在 Windows 环境下，请打开命令提示符，然后输入 <code v-pre>node -v</code> ，如果安装正常，您应该看到 <code v-pre>v18.15.0</code> 这样的输出:</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">C:\\Users\\IEUser</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">></span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">node</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> -v</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">v18.15.0</span></span></code></pre>\n</div><p>继续在命令提示符输入 node，此刻您将进入 Node.js 的交互环境。在交互环境下，您可以输入任意 JavaScript 语句，例如 <code v-pre>100 + 200</code>，回车后将得到输出结果。</p>\n<p>要退出 Node.js 环境，连按两次 <code v-pre>Ctrl + C</code> 。</p>\n</li>\n<li>\n<p>在 Mac 或 Linux 环境下，请打开终端，然后输入 <code v-pre>node -v</code>，您应该看到如下输出:</p>\n<div class=\"language-sh\" data-highlighter=\"shiki\" data-ext=\"sh\" data-title=\"sh\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">$</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> node</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> -v</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">v18.15.0</span></span></code></pre>\n</div></li>\n</ul>\n<h2 id=\"npm\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#npm\"><span>npm</span></a></h2>\n<p>npm 是 Node.js 的包管理工具(package manager)。</p>\n<p>我们在 Node.js 上开发时，会用到很多别人写的 JavaScript 代码。如果我们要使用别人写的某个包，每次都根据名称搜索一下官方网站，下载代码，解压，再使用，非常繁琐。于是一个集中管理的工具应运而生: 大家都把自己开发的模块打包后放到 npm 官网上，如果要使用，直接通过 npm 安装就可以直接用，不用管代码存在哪，应该从哪下载。</p>\n<p>更重要的是，如果我们要使用模块 A，而模块 A 又依赖于模块 B，模块 B 又依赖于模块 X 和模块 Y，npm 可以根据依赖关系，把所有依赖的包都下载下来并管理起来。否则，靠我们自己手动管理，肯定既麻烦又容易出错。</p>\n<p>讲了这么多，npm 究竟在哪?</p>\n<p>其实 npm 已经在 Node.js 安装的时候顺带装好了。我们在命令提示符或者终端输入 <code v-pre>npm -v</code>，应该看到类似的输出:</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">C:\\</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">></span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">npm</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> -v</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">9.6.0</span></span></code></pre>\n</div><blockquote>\n<p>如果版本号太小，说明 npm 版本较低，请使用此命令升级到最新版本: <code v-pre>npm i -g npm</code>。</p>\n</blockquote>\n<p>如果直接输入 <code v-pre>npm</code>，您会看到类似下面的输出:</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">C:\\</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">> </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">npm</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">npm</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> &#x3C;</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">comman</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">d></span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">Usage:</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">npm</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> install</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">        install</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> all</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> the</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> dependencies</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> in</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> your</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> project</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">npm</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> install</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> &#x3C;</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">fo</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">o>  </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">add</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> the</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> &#x3C;</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">fo</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">o> </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">dependency</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> to</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> your</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> project</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">    ...</span></span></code></pre>\n</div><p>上面的一大堆文字告诉您，npm 需要附带命令。现在我们不用关心这些命令，后面会一一讲到。目前，您只需要确保 npm 正确安装了，能运行就行。</p>\n<h2 id=\"国内镜像站\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#国内镜像站\"><span>国内镜像站</span></a></h2>\n<p>由于 GFW，有的时候，访问国外的 Node.js 服务器可能会十分缓慢以至于您想把它砸了。</p>\n<p>阿里巴巴免费为国内开发者提供镜像源。你可以将 npm 的源配置为该镜像源，以在每次安装依赖的时候从国内镜像站拉取镜像。这可以极大的提升安装速度。</p>\n<div class=\"hint-container note\">\n<p class=\"hint-container-title\">注</p>\n<p>如果官方源的速度还可以的话请尽可能使用官方源。</p>\n<p>国内源毕竟是镜像站点，同步官方源的包会出现延迟，所以有时候你可能会遇到 <code v-pre>version xxx not found</code> 之类的错误，这是因为所需要的版本还没来得及被镜像站点同步所导致。</p>\n<p>你可以通过访问 <code v-pre>npmmirror.com/sync/&lt;包名&gt;</code> 来手动同步一个包。</p>\n</div>\n<p>设置及国内源的命令如下:</p>\n<div class=\"language-sh\" data-highlighter=\"shiki\" data-ext=\"sh\" data-title=\"sh\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">npm</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> config</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> set</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> registry</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> https://registry.npmmirror.com/</span></span></code></pre>\n</div><div class=\"hint-container caution\">\n<p class=\"hint-container-title\">警告</p>\n<p><code v-pre>https://registry.npm.taobao.org/</code> 是老的淘宝源地址，现已停止维护，请不要使用!!!</p>\n</div>\n<h2 id=\"启用-corepack\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#启用-corepack\"><span>启用 Corepack</span></a></h2>\n<p>Node.js 自带的包管理工具 npm 并不是那么的强大，其安装速度也很慢，所以社区开发了一些其他的包管理工具如 <code v-pre>yarn</code> 和 <code v-pre>pnpm</code>，它们有自己的优势。</p>\n<p>Mr.Hope 推荐使用 pnpm 进行包管理，因为它使用硬链接索引包文件，安装速度更快而且节省磁盘空间。</p>\n<p>从 v16 开始，Node.js 引入了 Corepack 工具，并在 package.json 支持了 <code v-pre>packageManager</code> 选项以支持第三方管理工具。</p>\n<p>你需要通过下方命令启用 Corepack:</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">corepack</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> enable</span></span></code></pre>\n</div><p>这样每个项目会自动应用根目录 package.json 中的 <code v-pre>packageManager</code> 选项。比如设置 <code v-pre>&quot;packageManager&quot;: &quot;pnpm@7.30.3&quot;</code> 的时候，会自动下载并使用 <code v-pre>pnpm@7.30.3</code>。</p>\n<div class=\"hint-container info\">\n<p class=\"hint-container-title\">设置全局的 packageManager</p>\n<p>你可以使用 <code v-pre>corepack prepare packageManager@semver</code> 来全局准备一个 packageManager 版本，并使用 <code v-pre>--activate</code> 选新娘 全局激活。</p>\n<p>比如以下命令下载 <code v-pre>pnpm@7.30.3</code> 并将其作为默认的全局包管理器:</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">corepack</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> prepare</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> pnpm@7.30.3</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> --activate</span></span></code></pre>\n</div></div>\n<h2 id=\"小结\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#小结\"><span>小结</span></a></h2>\n<p>请在本机安装 Node.js 环境，并确保 Node.js 和 npm 能正常运行。</p>\n","env":{"base":"/","filePath":"/Users/carson/Desktop/Mister-Hope.github.io-main/src/code/node-js/install.md","filePathRelative":"code/node-js/install.md","frontmatter":{"date":"2020-12-27T00:00:00.000Z","title":"安装 Node.js","icon":"install","order":2,"category":"Node.js","tag":["Node.js","软件","安装"]},"sfcBlocks":{"template":{"type":"template","content":"<template><p>由于 Node.js 平台是在后端运行 JavaScript 代码，所以，必须首先在本机安装 Node.js 环境。</p>\n<!-- more -->\n<h2 id=\"安装-node-js\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#安装-node-js\"><span>安装 Node.js</span></a></h2>\n<p>目前 Node.js 的 LTS 版本是 18.15.0。首先，从 Node.js 官网下载对应平台的安装程序。点击<strong>长期维护版</strong>的下载按钮。</p>\n<ul>\n<li><a href=\"https://nodejs.org/zh-cn/\" target=\"_blank\" rel=\"noopener noreferrer\">Node.js 官网</a></li>\n</ul>\n<h3 id=\"安装过程\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#安装过程\"><span>安装过程</span></a></h3>\n<ul>\n<li>\n<p>在 Windows 上安装时务必选择全部组件，包括勾选 <code v-pre>Add to Path</code>。</p>\n<p>在安装过程中，无需勾选 &quot;Automatically install the necessary tools&quot;。选中此项会在电脑中安装 VS 等日常开发使用不到的软件。</p>\n<p>安装完成后，在 Windows 环境下，请打开命令提示符，然后输入 <code v-pre>node -v</code> ，如果安装正常，您应该看到 <code v-pre>v18.15.0</code> 这样的输出:</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">C:\\Users\\IEUser</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">></span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">node</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> -v</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">v18.15.0</span></span></code></pre>\n</div><p>继续在命令提示符输入 node，此刻您将进入 Node.js 的交互环境。在交互环境下，您可以输入任意 JavaScript 语句，例如 <code v-pre>100 + 200</code>，回车后将得到输出结果。</p>\n<p>要退出 Node.js 环境，连按两次 <code v-pre>Ctrl + C</code> 。</p>\n</li>\n<li>\n<p>在 Mac 或 Linux 环境下，请打开终端，然后输入 <code v-pre>node -v</code>，您应该看到如下输出:</p>\n<div class=\"language-sh\" data-highlighter=\"shiki\" data-ext=\"sh\" data-title=\"sh\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">$</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> node</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> -v</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">v18.15.0</span></span></code></pre>\n</div></li>\n</ul>\n<h2 id=\"npm\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#npm\"><span>npm</span></a></h2>\n<p>npm 是 Node.js 的包管理工具(package manager)。</p>\n<p>我们在 Node.js 上开发时，会用到很多别人写的 JavaScript 代码。如果我们要使用别人写的某个包，每次都根据名称搜索一下官方网站，下载代码，解压，再使用，非常繁琐。于是一个集中管理的工具应运而生: 大家都把自己开发的模块打包后放到 npm 官网上，如果要使用，直接通过 npm 安装就可以直接用，不用管代码存在哪，应该从哪下载。</p>\n<p>更重要的是，如果我们要使用模块 A，而模块 A 又依赖于模块 B，模块 B 又依赖于模块 X 和模块 Y，npm 可以根据依赖关系，把所有依赖的包都下载下来并管理起来。否则，靠我们自己手动管理，肯定既麻烦又容易出错。</p>\n<p>讲了这么多，npm 究竟在哪?</p>\n<p>其实 npm 已经在 Node.js 安装的时候顺带装好了。我们在命令提示符或者终端输入 <code v-pre>npm -v</code>，应该看到类似的输出:</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">C:\\</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">></span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">npm</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> -v</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">9.6.0</span></span></code></pre>\n</div><blockquote>\n<p>如果版本号太小，说明 npm 版本较低，请使用此命令升级到最新版本: <code v-pre>npm i -g npm</code>。</p>\n</blockquote>\n<p>如果直接输入 <code v-pre>npm</code>，您会看到类似下面的输出:</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">C:\\</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">> </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">npm</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">npm</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> &#x3C;</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">comman</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">d></span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">Usage:</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">npm</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> install</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">        install</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> all</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> the</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> dependencies</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> in</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> your</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> project</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">npm</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> install</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> &#x3C;</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">fo</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">o>  </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">add</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> the</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> &#x3C;</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">fo</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">o> </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">dependency</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> to</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> your</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> project</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">    ...</span></span></code></pre>\n</div><p>上面的一大堆文字告诉您，npm 需要附带命令。现在我们不用关心这些命令，后面会一一讲到。目前，您只需要确保 npm 正确安装了，能运行就行。</p>\n<h2 id=\"国内镜像站\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#国内镜像站\"><span>国内镜像站</span></a></h2>\n<p>由于 GFW，有的时候，访问国外的 Node.js 服务器可能会十分缓慢以至于您想把它砸了。</p>\n<p>阿里巴巴免费为国内开发者提供镜像源。你可以将 npm 的源配置为该镜像源，以在每次安装依赖的时候从国内镜像站拉取镜像。这可以极大的提升安装速度。</p>\n<div class=\"hint-container note\">\n<p class=\"hint-container-title\">注</p>\n<p>如果官方源的速度还可以的话请尽可能使用官方源。</p>\n<p>国内源毕竟是镜像站点，同步官方源的包会出现延迟，所以有时候你可能会遇到 <code v-pre>version xxx not found</code> 之类的错误，这是因为所需要的版本还没来得及被镜像站点同步所导致。</p>\n<p>你可以通过访问 <code v-pre>npmmirror.com/sync/&lt;包名&gt;</code> 来手动同步一个包。</p>\n</div>\n<p>设置及国内源的命令如下:</p>\n<div class=\"language-sh\" data-highlighter=\"shiki\" data-ext=\"sh\" data-title=\"sh\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">npm</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> config</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> set</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> registry</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> https://registry.npmmirror.com/</span></span></code></pre>\n</div><div class=\"hint-container caution\">\n<p class=\"hint-container-title\">警告</p>\n<p><code v-pre>https://registry.npm.taobao.org/</code> 是老的淘宝源地址，现已停止维护，请不要使用!!!</p>\n</div>\n<h2 id=\"启用-corepack\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#启用-corepack\"><span>启用 Corepack</span></a></h2>\n<p>Node.js 自带的包管理工具 npm 并不是那么的强大，其安装速度也很慢，所以社区开发了一些其他的包管理工具如 <code v-pre>yarn</code> 和 <code v-pre>pnpm</code>，它们有自己的优势。</p>\n<p>Mr.Hope 推荐使用 pnpm 进行包管理，因为它使用硬链接索引包文件，安装速度更快而且节省磁盘空间。</p>\n<p>从 v16 开始，Node.js 引入了 Corepack 工具，并在 package.json 支持了 <code v-pre>packageManager</code> 选项以支持第三方管理工具。</p>\n<p>你需要通过下方命令启用 Corepack:</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">corepack</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> enable</span></span></code></pre>\n</div><p>这样每个项目会自动应用根目录 package.json 中的 <code v-pre>packageManager</code> 选项。比如设置 <code v-pre>&quot;packageManager&quot;: &quot;pnpm@7.30.3&quot;</code> 的时候，会自动下载并使用 <code v-pre>pnpm@7.30.3</code>。</p>\n<div class=\"hint-container info\">\n<p class=\"hint-container-title\">设置全局的 packageManager</p>\n<p>你可以使用 <code v-pre>corepack prepare packageManager@semver</code> 来全局准备一个 packageManager 版本，并使用 <code v-pre>--activate</code> 选新娘 全局激活。</p>\n<p>比如以下命令下载 <code v-pre>pnpm@7.30.3</code> 并将其作为默认的全局包管理器:</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">corepack</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> prepare</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> pnpm@7.30.3</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> --activate</span></span></code></pre>\n</div></div>\n<h2 id=\"小结\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#小结\"><span>小结</span></a></h2>\n<p>请在本机安装 Node.js 环境，并确保 Node.js 和 npm 能正常运行。</p>\n</template>","contentStripped":"<p>由于 Node.js 平台是在后端运行 JavaScript 代码，所以，必须首先在本机安装 Node.js 环境。</p>\n<!-- more -->\n<h2 id=\"安装-node-js\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#安装-node-js\"><span>安装 Node.js</span></a></h2>\n<p>目前 Node.js 的 LTS 版本是 18.15.0。首先，从 Node.js 官网下载对应平台的安装程序。点击<strong>长期维护版</strong>的下载按钮。</p>\n<ul>\n<li><a href=\"https://nodejs.org/zh-cn/\" target=\"_blank\" rel=\"noopener noreferrer\">Node.js 官网</a></li>\n</ul>\n<h3 id=\"安装过程\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#安装过程\"><span>安装过程</span></a></h3>\n<ul>\n<li>\n<p>在 Windows 上安装时务必选择全部组件，包括勾选 <code v-pre>Add to Path</code>。</p>\n<p>在安装过程中，无需勾选 &quot;Automatically install the necessary tools&quot;。选中此项会在电脑中安装 VS 等日常开发使用不到的软件。</p>\n<p>安装完成后，在 Windows 环境下，请打开命令提示符，然后输入 <code v-pre>node -v</code> ，如果安装正常，您应该看到 <code v-pre>v18.15.0</code> 这样的输出:</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">C:\\Users\\IEUser</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">></span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">node</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> -v</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">v18.15.0</span></span></code></pre>\n</div><p>继续在命令提示符输入 node，此刻您将进入 Node.js 的交互环境。在交互环境下，您可以输入任意 JavaScript 语句，例如 <code v-pre>100 + 200</code>，回车后将得到输出结果。</p>\n<p>要退出 Node.js 环境，连按两次 <code v-pre>Ctrl + C</code> 。</p>\n</li>\n<li>\n<p>在 Mac 或 Linux 环境下，请打开终端，然后输入 <code v-pre>node -v</code>，您应该看到如下输出:</p>\n<div class=\"language-sh\" data-highlighter=\"shiki\" data-ext=\"sh\" data-title=\"sh\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">$</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> node</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> -v</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">v18.15.0</span></span></code></pre>\n</div></li>\n</ul>\n<h2 id=\"npm\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#npm\"><span>npm</span></a></h2>\n<p>npm 是 Node.js 的包管理工具(package manager)。</p>\n<p>我们在 Node.js 上开发时，会用到很多别人写的 JavaScript 代码。如果我们要使用别人写的某个包，每次都根据名称搜索一下官方网站，下载代码，解压，再使用，非常繁琐。于是一个集中管理的工具应运而生: 大家都把自己开发的模块打包后放到 npm 官网上，如果要使用，直接通过 npm 安装就可以直接用，不用管代码存在哪，应该从哪下载。</p>\n<p>更重要的是，如果我们要使用模块 A，而模块 A 又依赖于模块 B，模块 B 又依赖于模块 X 和模块 Y，npm 可以根据依赖关系，把所有依赖的包都下载下来并管理起来。否则，靠我们自己手动管理，肯定既麻烦又容易出错。</p>\n<p>讲了这么多，npm 究竟在哪?</p>\n<p>其实 npm 已经在 Node.js 安装的时候顺带装好了。我们在命令提示符或者终端输入 <code v-pre>npm -v</code>，应该看到类似的输出:</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">C:\\</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">></span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">npm</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> -v</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">9.6.0</span></span></code></pre>\n</div><blockquote>\n<p>如果版本号太小，说明 npm 版本较低，请使用此命令升级到最新版本: <code v-pre>npm i -g npm</code>。</p>\n</blockquote>\n<p>如果直接输入 <code v-pre>npm</code>，您会看到类似下面的输出:</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">C:\\</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">> </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">npm</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">npm</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> &#x3C;</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">comman</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">d></span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">Usage:</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">npm</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> install</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">        install</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> all</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> the</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> dependencies</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> in</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> your</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> project</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">npm</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> install</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> &#x3C;</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">fo</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">o>  </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">add</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> the</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> &#x3C;</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">fo</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">o> </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">dependency</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> to</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> your</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> project</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">    ...</span></span></code></pre>\n</div><p>上面的一大堆文字告诉您，npm 需要附带命令。现在我们不用关心这些命令，后面会一一讲到。目前，您只需要确保 npm 正确安装了，能运行就行。</p>\n<h2 id=\"国内镜像站\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#国内镜像站\"><span>国内镜像站</span></a></h2>\n<p>由于 GFW，有的时候，访问国外的 Node.js 服务器可能会十分缓慢以至于您想把它砸了。</p>\n<p>阿里巴巴免费为国内开发者提供镜像源。你可以将 npm 的源配置为该镜像源，以在每次安装依赖的时候从国内镜像站拉取镜像。这可以极大的提升安装速度。</p>\n<div class=\"hint-container note\">\n<p class=\"hint-container-title\">注</p>\n<p>如果官方源的速度还可以的话请尽可能使用官方源。</p>\n<p>国内源毕竟是镜像站点，同步官方源的包会出现延迟，所以有时候你可能会遇到 <code v-pre>version xxx not found</code> 之类的错误，这是因为所需要的版本还没来得及被镜像站点同步所导致。</p>\n<p>你可以通过访问 <code v-pre>npmmirror.com/sync/&lt;包名&gt;</code> 来手动同步一个包。</p>\n</div>\n<p>设置及国内源的命令如下:</p>\n<div class=\"language-sh\" data-highlighter=\"shiki\" data-ext=\"sh\" data-title=\"sh\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">npm</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> config</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> set</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> registry</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> https://registry.npmmirror.com/</span></span></code></pre>\n</div><div class=\"hint-container caution\">\n<p class=\"hint-container-title\">警告</p>\n<p><code v-pre>https://registry.npm.taobao.org/</code> 是老的淘宝源地址，现已停止维护，请不要使用!!!</p>\n</div>\n<h2 id=\"启用-corepack\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#启用-corepack\"><span>启用 Corepack</span></a></h2>\n<p>Node.js 自带的包管理工具 npm 并不是那么的强大，其安装速度也很慢，所以社区开发了一些其他的包管理工具如 <code v-pre>yarn</code> 和 <code v-pre>pnpm</code>，它们有自己的优势。</p>\n<p>Mr.Hope 推荐使用 pnpm 进行包管理，因为它使用硬链接索引包文件，安装速度更快而且节省磁盘空间。</p>\n<p>从 v16 开始，Node.js 引入了 Corepack 工具，并在 package.json 支持了 <code v-pre>packageManager</code> 选项以支持第三方管理工具。</p>\n<p>你需要通过下方命令启用 Corepack:</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">corepack</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> enable</span></span></code></pre>\n</div><p>这样每个项目会自动应用根目录 package.json 中的 <code v-pre>packageManager</code> 选项。比如设置 <code v-pre>&quot;packageManager&quot;: &quot;pnpm@7.30.3&quot;</code> 的时候，会自动下载并使用 <code v-pre>pnpm@7.30.3</code>。</p>\n<div class=\"hint-container info\">\n<p class=\"hint-container-title\">设置全局的 packageManager</p>\n<p>你可以使用 <code v-pre>corepack prepare packageManager@semver</code> 来全局准备一个 packageManager 版本，并使用 <code v-pre>--activate</code> 选新娘 全局激活。</p>\n<p>比如以下命令下载 <code v-pre>pnpm@7.30.3</code> 并将其作为默认的全局包管理器:</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">corepack</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> prepare</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> pnpm@7.30.3</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> --activate</span></span></code></pre>\n</div></div>\n<h2 id=\"小结\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#小结\"><span>小结</span></a></h2>\n<p>请在本机安装 Node.js 环境，并确保 Node.js 和 npm 能正常运行。</p>\n","tagOpen":"<template>","tagClose":"</template>"},"script":null,"scriptSetup":null,"scripts":[],"styles":[],"customBlocks":[]},"content":"\n由于 Node.js 平台是在后端运行 JavaScript 代码，所以，必须首先在本机安装 Node.js 环境。\n\n<!-- more -->\n\n## 安装 Node.js\n\n目前 Node.js 的 LTS 版本是 18.15.0。首先，从 Node.js 官网下载对应平台的安装程序。点击**长期维护版**的下载按钮。\n\n- [Node.js 官网](https://nodejs.org/zh-cn/)\n\n### 安装过程\n\n- 在 Windows 上安装时务必选择全部组件，包括勾选 `Add to Path`。\n\n  在安装过程中，无需勾选 \"Automatically install the necessary tools\"。选中此项会在电脑中安装 VS 等日常开发使用不到的软件。\n\n  安装完成后，在 Windows 环境下，请打开命令提示符，然后输入 `node -v` ，如果安装正常，您应该看到 `v18.15.0` 这样的输出:\n\n  ```bash\n  C:\\Users\\IEUser>node -v\n  v18.15.0\n  ```\n\n  继续在命令提示符输入 node，此刻您将进入 Node.js 的交互环境。在交互环境下，您可以输入任意 JavaScript 语句，例如 `100 + 200`，回车后将得到输出结果。\n\n  要退出 Node.js 环境，连按两次 `Ctrl + C` 。\n\n- 在 Mac 或 Linux 环境下，请打开终端，然后输入 `node -v`，您应该看到如下输出:\n\n  ```sh\n  $ node -v\n  v18.15.0\n  ```\n\n## npm\n\nnpm 是 Node.js 的包管理工具(package manager)。\n\n我们在 Node.js 上开发时，会用到很多别人写的 JavaScript 代码。如果我们要使用别人写的某个包，每次都根据名称搜索一下官方网站，下载代码，解压，再使用，非常繁琐。于是一个集中管理的工具应运而生: 大家都把自己开发的模块打包后放到 npm 官网上，如果要使用，直接通过 npm 安装就可以直接用，不用管代码存在哪，应该从哪下载。\n\n更重要的是，如果我们要使用模块 A，而模块 A 又依赖于模块 B，模块 B 又依赖于模块 X 和模块 Y，npm 可以根据依赖关系，把所有依赖的包都下载下来并管理起来。否则，靠我们自己手动管理，肯定既麻烦又容易出错。\n\n讲了这么多，npm 究竟在哪?\n\n其实 npm 已经在 Node.js 安装的时候顺带装好了。我们在命令提示符或者终端输入 `npm -v`，应该看到类似的输出:\n\n```bash\nC:\\>npm -v\n9.6.0\n```\n\n> 如果版本号太小，说明 npm 版本较低，请使用此命令升级到最新版本: `npm i -g npm`。\n\n如果直接输入 `npm`，您会看到类似下面的输出:\n\n```bash\nC:\\> npm\nnpm <command>\n\nUsage:\n\nnpm install        install all the dependencies in your project\nnpm install <foo>  add the <foo> dependency to your project\n    ...\n```\n\n上面的一大堆文字告诉您，npm 需要附带命令。现在我们不用关心这些命令，后面会一一讲到。目前，您只需要确保 npm 正确安装了，能运行就行。\n\n## 国内镜像站\n\n由于 GFW，有的时候，访问国外的 Node.js 服务器可能会十分缓慢以至于您想把它砸了。\n\n阿里巴巴免费为国内开发者提供镜像源。你可以将 npm 的源配置为该镜像源，以在每次安装依赖的时候从国内镜像站拉取镜像。这可以极大的提升安装速度。\n\n::: note\n\n如果官方源的速度还可以的话请尽可能使用官方源。\n\n国内源毕竟是镜像站点，同步官方源的包会出现延迟，所以有时候你可能会遇到 `version xxx not found` 之类的错误，这是因为所需要的版本还没来得及被镜像站点同步所导致。\n\n你可以通过访问 `npmmirror.com/sync/<包名>` 来手动同步一个包。\n\n:::\n\n设置及国内源的命令如下:\n\n```sh\nnpm config set registry https://registry.npmmirror.com/\n```\n\n::: caution\n\n`https://registry.npm.taobao.org/` 是老的淘宝源地址，现已停止维护，请不要使用!!!\n\n:::\n\n## 启用 Corepack\n\nNode.js 自带的包管理工具 npm 并不是那么的强大，其安装速度也很慢，所以社区开发了一些其他的包管理工具如 `yarn` 和 `pnpm`，它们有自己的优势。\n\nMr.Hope 推荐使用 pnpm 进行包管理，因为它使用硬链接索引包文件，安装速度更快而且节省磁盘空间。\n\n从 v16 开始，Node.js 引入了 Corepack 工具，并在 package.json 支持了 `packageManager` 选项以支持第三方管理工具。\n\n你需要通过下方命令启用 Corepack:\n\n```bash\ncorepack enable\n```\n\n这样每个项目会自动应用根目录 package.json 中的 `packageManager` 选项。比如设置 `\"packageManager\": \"pnpm@7.30.3\"` 的时候，会自动下载并使用 `pnpm@7.30.3`。\n\n::: info 设置全局的 packageManager\n\n你可以使用 `corepack prepare packageManager@semver` 来全局准备一个 packageManager 版本，并使用 `--activate` 选新娘 全局激活。\n\n比如以下命令下载 `pnpm@7.30.3` 并将其作为默认的全局包管理器:\n\n```bash\ncorepack prepare pnpm@7.30.3 --activate\n```\n\n:::\n\n## 小结\n\n请在本机安装 Node.js 环境，并确保 Node.js 和 npm 能正常运行。\n","excerpt":"","title":"","headers":[{"level":2,"title":"安装 Node.js","slug":"安装-node-js","link":"#安装-node-js","children":[{"level":3,"title":"安装过程","slug":"安装过程","link":"#安装过程","children":[]}]},{"level":2,"title":"npm","slug":"npm","link":"#npm","children":[]},{"level":2,"title":"国内镜像站","slug":"国内镜像站","link":"#国内镜像站","children":[]},{"level":2,"title":"启用 Corepack","slug":"启用-corepack","link":"#启用-corepack","children":[]},{"level":2,"title":"小结","slug":"小结","link":"#小结","children":[]}]}}
