{"content":"<p>JavaScript 语言的每一个值，都属于某一种数据类型。</p>\n<!-- more -->\n<h2 id=\"简介\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#简介\"><span>简介</span></a></h2>\n<p>JavaScript 的数据类型，共有六种。(ES6 又新增了第七种 Symbol 类型的值，本教程不涉及。)</p>\n<ul>\n<li>数值(number): 整数和小数(比如 <code v-pre>1</code> 和 <code v-pre>3.14</code>)</li>\n<li>字符串(string): 文本(比如 <code v-pre>Hello World</code>)。</li>\n<li>布尔值(boolean): 表示真伪的两个特殊值，即 <code v-pre>true</code>(真)和 <code v-pre>false</code>(假)</li>\n<li><code v-pre>undefined</code>: 表示“未定义”或不存在，即由于目前没有定义，所以此处暂时没有任何值</li>\n<li><code v-pre>null</code>: 表示空值，即此处的值为空。</li>\n<li>对象(object): 各种值组成的集合。</li>\n</ul>\n<p>通常，数值、字符串、布尔值这三种类型，合称为原始类型(primitive type)的值，即它们是最基本的数据类型，不能再细分了。对象则称为合成类型(complex type)的值，因为一个对象往往是多个原始类型的值的合成，可以看作是一个存放各种值的容器。至于 <code v-pre>undefined</code> 和 <code v-pre>null</code>，一般将它们看成两个特殊值。</p>\n<p>对象是最复杂的数据类型，又可以分成三个子类型。</p>\n<ul>\n<li>狭义的对象(object)</li>\n<li>数组(array)</li>\n<li>函数(function)</li>\n</ul>\n<p>狭义的对象和数组是两种不同的数据组合方式，除非特别声明，本教程的“对象”都特指狭义的对象。函数其实是处理数据的方法，JavaScript 把它当成一种数据类型，可以赋值给变量，这为编程带来了很大的灵活性，也为 JavaScript 的“函数式编程”奠定了基础。</p>\n<h2 id=\"typeof-运算符\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#typeof-运算符\"><span>typeof 运算符</span></a></h2>\n<p>JavaScript 有三种方法，可以确定一个值到底是什么类型。</p>\n<ul>\n<li><code v-pre>typeof</code> 运算符</li>\n<li><code v-pre>instanceof</code> 运算符</li>\n<li><code v-pre>Object.prototype.toString</code> 方法</li>\n</ul>\n<p><code v-pre>instanceof</code> 运算符和 <code v-pre>Object.prototype.toString</code> 方法，将在后文介绍。这里介绍 <code v-pre>typeof</code> 运算符。</p>\n<p><code v-pre>typeof</code> 运算符可以返回一个值的数据类型。</p>\n<p>数值、字符串、布尔值分别返回 <code v-pre>number</code>、<code v-pre>string</code>、<code v-pre>boolean</code>。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#C678DD\">typeof</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 123</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// \"number\"</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#C678DD\">typeof</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"123\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// \"string\"</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#C678DD\">typeof</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> false</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// \"boolean\"</span></span></code></pre>\n</div><p>函数返回 <code v-pre>function</code>。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">function</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> f</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">() {}</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#C678DD\">typeof</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> f</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// \"function\"</span></span></code></pre>\n</div><p><code v-pre>undefined</code> 返回 <code v-pre>undefined</code>。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#C678DD\">typeof</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> undefined</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// \"undefined\"</span></span></code></pre>\n</div><p>利用这一点，<code v-pre>typeof</code> 可以用来检查一个没有声明的变量，而不报错。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">v</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// ReferenceError: v is not defined</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#C678DD\">typeof</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> v</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// \"undefined\"</span></span></code></pre>\n</div><p>上面代码中，变量 <code v-pre>v</code> 没有用 <code v-pre>const</code> <code v-pre>var</code> 或 <code v-pre>let</code> 命令声明，直接使用就会报错。但是，放在 <code v-pre>typeof</code> 后面，就不报错了，而是返回 <code v-pre>undefined</code>。</p>\n<p>实际编程中，这个特点通常用在判断语句。</p>\n<div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 错误的写法</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">if</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">v</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">  // ...</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// ReferenceError: v is not defined</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 正确的写法</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">if</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#C678DD\">typeof</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> v</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> ===</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"undefined\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">  // ...</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>对象返回 <code v-pre>object</code>。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#C678DD\">typeof</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> window</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// \"object\"</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#C678DD\">typeof</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {}; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// \"object\"</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#C678DD\">typeof</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> []; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// \"object\"</span></span></code></pre>\n</div><p>上面代码中，空数组(<code v-pre>[]</code>)的类型也是 <code v-pre>object</code>，这表示在 JavaScript 内部，数组本质上只是一种特殊的对象。这里顺便提一下，<code v-pre>instanceof</code> 运算符可以区分数组和对象。<code v-pre>instanceof</code> 运算符的详细解释，请见《面向对象编程》一章。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> o</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {};</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> a</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> [];</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">o</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> instanceof</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> Array</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// false</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">a</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> instanceof</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> Array</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// true</span></span></code></pre>\n</div><p><code v-pre>null</code> 返回 <code v-pre>object</code>。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#C678DD\">typeof</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> null</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// \"object\"</span></span></code></pre>\n</div><p><code v-pre>null</code> 的类型是 <code v-pre>object</code>，这是由于历史原因造成的。1995 年的 JavaScript 语言第一版，只设计了五种数据类型(对象、整数、浮点数、字符串和布尔值)，没考虑 <code v-pre>null</code>，只把它当作 <code v-pre>object</code> 的一种特殊值。后来 <code v-pre>null</code> 独立出来，作为一种单独的数据类型，为了兼容以前的代码，<code v-pre>typeof null</code> 返回 <code v-pre>object</code> 就没法改变了。</p>\n<h2 id=\"参考链接\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#参考链接\"><span>参考链接</span></a></h2>\n<ul>\n<li>Axel Rauschmayer, <a href=\"http://www.2ality.com/2011/11/improving-typeof.html\" target=\"_blank\" rel=\"noopener noreferrer\">Improving the JavaScript typeof operator</a></li>\n</ul>\n","env":{"base":"/","filePath":"/Users/carson/Desktop/Mister-Hope.github.io-main/src/code/language/js/types/general.md","filePathRelative":"code/language/js/types/general.md","frontmatter":{"title":"数据类型概述","icon":"info","date":"2019-09-20T00:00:00.000Z","category":"JavaScript"},"sfcBlocks":{"template":{"type":"template","content":"<template><p>JavaScript 语言的每一个值，都属于某一种数据类型。</p>\n<!-- more -->\n<h2 id=\"简介\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#简介\"><span>简介</span></a></h2>\n<p>JavaScript 的数据类型，共有六种。(ES6 又新增了第七种 Symbol 类型的值，本教程不涉及。)</p>\n<ul>\n<li>数值(number): 整数和小数(比如 <code v-pre>1</code> 和 <code v-pre>3.14</code>)</li>\n<li>字符串(string): 文本(比如 <code v-pre>Hello World</code>)。</li>\n<li>布尔值(boolean): 表示真伪的两个特殊值，即 <code v-pre>true</code>(真)和 <code v-pre>false</code>(假)</li>\n<li><code v-pre>undefined</code>: 表示“未定义”或不存在，即由于目前没有定义，所以此处暂时没有任何值</li>\n<li><code v-pre>null</code>: 表示空值，即此处的值为空。</li>\n<li>对象(object): 各种值组成的集合。</li>\n</ul>\n<p>通常，数值、字符串、布尔值这三种类型，合称为原始类型(primitive type)的值，即它们是最基本的数据类型，不能再细分了。对象则称为合成类型(complex type)的值，因为一个对象往往是多个原始类型的值的合成，可以看作是一个存放各种值的容器。至于 <code v-pre>undefined</code> 和 <code v-pre>null</code>，一般将它们看成两个特殊值。</p>\n<p>对象是最复杂的数据类型，又可以分成三个子类型。</p>\n<ul>\n<li>狭义的对象(object)</li>\n<li>数组(array)</li>\n<li>函数(function)</li>\n</ul>\n<p>狭义的对象和数组是两种不同的数据组合方式，除非特别声明，本教程的“对象”都特指狭义的对象。函数其实是处理数据的方法，JavaScript 把它当成一种数据类型，可以赋值给变量，这为编程带来了很大的灵活性，也为 JavaScript 的“函数式编程”奠定了基础。</p>\n<h2 id=\"typeof-运算符\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#typeof-运算符\"><span>typeof 运算符</span></a></h2>\n<p>JavaScript 有三种方法，可以确定一个值到底是什么类型。</p>\n<ul>\n<li><code v-pre>typeof</code> 运算符</li>\n<li><code v-pre>instanceof</code> 运算符</li>\n<li><code v-pre>Object.prototype.toString</code> 方法</li>\n</ul>\n<p><code v-pre>instanceof</code> 运算符和 <code v-pre>Object.prototype.toString</code> 方法，将在后文介绍。这里介绍 <code v-pre>typeof</code> 运算符。</p>\n<p><code v-pre>typeof</code> 运算符可以返回一个值的数据类型。</p>\n<p>数值、字符串、布尔值分别返回 <code v-pre>number</code>、<code v-pre>string</code>、<code v-pre>boolean</code>。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#C678DD\">typeof</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 123</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// \"number\"</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#C678DD\">typeof</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"123\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// \"string\"</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#C678DD\">typeof</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> false</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// \"boolean\"</span></span></code></pre>\n</div><p>函数返回 <code v-pre>function</code>。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">function</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> f</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">() {}</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#C678DD\">typeof</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> f</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// \"function\"</span></span></code></pre>\n</div><p><code v-pre>undefined</code> 返回 <code v-pre>undefined</code>。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#C678DD\">typeof</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> undefined</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// \"undefined\"</span></span></code></pre>\n</div><p>利用这一点，<code v-pre>typeof</code> 可以用来检查一个没有声明的变量，而不报错。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">v</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// ReferenceError: v is not defined</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#C678DD\">typeof</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> v</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// \"undefined\"</span></span></code></pre>\n</div><p>上面代码中，变量 <code v-pre>v</code> 没有用 <code v-pre>const</code> <code v-pre>var</code> 或 <code v-pre>let</code> 命令声明，直接使用就会报错。但是，放在 <code v-pre>typeof</code> 后面，就不报错了，而是返回 <code v-pre>undefined</code>。</p>\n<p>实际编程中，这个特点通常用在判断语句。</p>\n<div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 错误的写法</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">if</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">v</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">  // ...</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// ReferenceError: v is not defined</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 正确的写法</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">if</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#C678DD\">typeof</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> v</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> ===</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"undefined\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">  // ...</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>对象返回 <code v-pre>object</code>。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#C678DD\">typeof</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> window</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// \"object\"</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#C678DD\">typeof</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {}; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// \"object\"</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#C678DD\">typeof</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> []; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// \"object\"</span></span></code></pre>\n</div><p>上面代码中，空数组(<code v-pre>[]</code>)的类型也是 <code v-pre>object</code>，这表示在 JavaScript 内部，数组本质上只是一种特殊的对象。这里顺便提一下，<code v-pre>instanceof</code> 运算符可以区分数组和对象。<code v-pre>instanceof</code> 运算符的详细解释，请见《面向对象编程》一章。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> o</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {};</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> a</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> [];</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">o</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> instanceof</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> Array</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// false</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">a</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> instanceof</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> Array</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// true</span></span></code></pre>\n</div><p><code v-pre>null</code> 返回 <code v-pre>object</code>。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#C678DD\">typeof</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> null</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// \"object\"</span></span></code></pre>\n</div><p><code v-pre>null</code> 的类型是 <code v-pre>object</code>，这是由于历史原因造成的。1995 年的 JavaScript 语言第一版，只设计了五种数据类型(对象、整数、浮点数、字符串和布尔值)，没考虑 <code v-pre>null</code>，只把它当作 <code v-pre>object</code> 的一种特殊值。后来 <code v-pre>null</code> 独立出来，作为一种单独的数据类型，为了兼容以前的代码，<code v-pre>typeof null</code> 返回 <code v-pre>object</code> 就没法改变了。</p>\n<h2 id=\"参考链接\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#参考链接\"><span>参考链接</span></a></h2>\n<ul>\n<li>Axel Rauschmayer, <a href=\"http://www.2ality.com/2011/11/improving-typeof.html\" target=\"_blank\" rel=\"noopener noreferrer\">Improving the JavaScript typeof operator</a></li>\n</ul>\n</template>","contentStripped":"<p>JavaScript 语言的每一个值，都属于某一种数据类型。</p>\n<!-- more -->\n<h2 id=\"简介\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#简介\"><span>简介</span></a></h2>\n<p>JavaScript 的数据类型，共有六种。(ES6 又新增了第七种 Symbol 类型的值，本教程不涉及。)</p>\n<ul>\n<li>数值(number): 整数和小数(比如 <code v-pre>1</code> 和 <code v-pre>3.14</code>)</li>\n<li>字符串(string): 文本(比如 <code v-pre>Hello World</code>)。</li>\n<li>布尔值(boolean): 表示真伪的两个特殊值，即 <code v-pre>true</code>(真)和 <code v-pre>false</code>(假)</li>\n<li><code v-pre>undefined</code>: 表示“未定义”或不存在，即由于目前没有定义，所以此处暂时没有任何值</li>\n<li><code v-pre>null</code>: 表示空值，即此处的值为空。</li>\n<li>对象(object): 各种值组成的集合。</li>\n</ul>\n<p>通常，数值、字符串、布尔值这三种类型，合称为原始类型(primitive type)的值，即它们是最基本的数据类型，不能再细分了。对象则称为合成类型(complex type)的值，因为一个对象往往是多个原始类型的值的合成，可以看作是一个存放各种值的容器。至于 <code v-pre>undefined</code> 和 <code v-pre>null</code>，一般将它们看成两个特殊值。</p>\n<p>对象是最复杂的数据类型，又可以分成三个子类型。</p>\n<ul>\n<li>狭义的对象(object)</li>\n<li>数组(array)</li>\n<li>函数(function)</li>\n</ul>\n<p>狭义的对象和数组是两种不同的数据组合方式，除非特别声明，本教程的“对象”都特指狭义的对象。函数其实是处理数据的方法，JavaScript 把它当成一种数据类型，可以赋值给变量，这为编程带来了很大的灵活性，也为 JavaScript 的“函数式编程”奠定了基础。</p>\n<h2 id=\"typeof-运算符\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#typeof-运算符\"><span>typeof 运算符</span></a></h2>\n<p>JavaScript 有三种方法，可以确定一个值到底是什么类型。</p>\n<ul>\n<li><code v-pre>typeof</code> 运算符</li>\n<li><code v-pre>instanceof</code> 运算符</li>\n<li><code v-pre>Object.prototype.toString</code> 方法</li>\n</ul>\n<p><code v-pre>instanceof</code> 运算符和 <code v-pre>Object.prototype.toString</code> 方法，将在后文介绍。这里介绍 <code v-pre>typeof</code> 运算符。</p>\n<p><code v-pre>typeof</code> 运算符可以返回一个值的数据类型。</p>\n<p>数值、字符串、布尔值分别返回 <code v-pre>number</code>、<code v-pre>string</code>、<code v-pre>boolean</code>。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#C678DD\">typeof</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 123</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// \"number\"</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#C678DD\">typeof</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"123\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// \"string\"</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#C678DD\">typeof</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> false</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// \"boolean\"</span></span></code></pre>\n</div><p>函数返回 <code v-pre>function</code>。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">function</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> f</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">() {}</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#C678DD\">typeof</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> f</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// \"function\"</span></span></code></pre>\n</div><p><code v-pre>undefined</code> 返回 <code v-pre>undefined</code>。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#C678DD\">typeof</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> undefined</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// \"undefined\"</span></span></code></pre>\n</div><p>利用这一点，<code v-pre>typeof</code> 可以用来检查一个没有声明的变量，而不报错。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">v</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// ReferenceError: v is not defined</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#C678DD\">typeof</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> v</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// \"undefined\"</span></span></code></pre>\n</div><p>上面代码中，变量 <code v-pre>v</code> 没有用 <code v-pre>const</code> <code v-pre>var</code> 或 <code v-pre>let</code> 命令声明，直接使用就会报错。但是，放在 <code v-pre>typeof</code> 后面，就不报错了，而是返回 <code v-pre>undefined</code>。</p>\n<p>实际编程中，这个特点通常用在判断语句。</p>\n<div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 错误的写法</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">if</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">v</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">  // ...</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// ReferenceError: v is not defined</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 正确的写法</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">if</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#C678DD\">typeof</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> v</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> ===</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"undefined\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">  // ...</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>对象返回 <code v-pre>object</code>。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#C678DD\">typeof</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> window</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// \"object\"</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#C678DD\">typeof</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {}; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// \"object\"</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#C678DD\">typeof</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> []; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// \"object\"</span></span></code></pre>\n</div><p>上面代码中，空数组(<code v-pre>[]</code>)的类型也是 <code v-pre>object</code>，这表示在 JavaScript 内部，数组本质上只是一种特殊的对象。这里顺便提一下，<code v-pre>instanceof</code> 运算符可以区分数组和对象。<code v-pre>instanceof</code> 运算符的详细解释，请见《面向对象编程》一章。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> o</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {};</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> a</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> [];</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">o</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> instanceof</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> Array</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// false</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">a</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> instanceof</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> Array</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// true</span></span></code></pre>\n</div><p><code v-pre>null</code> 返回 <code v-pre>object</code>。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#C678DD\">typeof</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> null</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// \"object\"</span></span></code></pre>\n</div><p><code v-pre>null</code> 的类型是 <code v-pre>object</code>，这是由于历史原因造成的。1995 年的 JavaScript 语言第一版，只设计了五种数据类型(对象、整数、浮点数、字符串和布尔值)，没考虑 <code v-pre>null</code>，只把它当作 <code v-pre>object</code> 的一种特殊值。后来 <code v-pre>null</code> 独立出来，作为一种单独的数据类型，为了兼容以前的代码，<code v-pre>typeof null</code> 返回 <code v-pre>object</code> 就没法改变了。</p>\n<h2 id=\"参考链接\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#参考链接\"><span>参考链接</span></a></h2>\n<ul>\n<li>Axel Rauschmayer, <a href=\"http://www.2ality.com/2011/11/improving-typeof.html\" target=\"_blank\" rel=\"noopener noreferrer\">Improving the JavaScript typeof operator</a></li>\n</ul>\n","tagOpen":"<template>","tagClose":"</template>"},"script":null,"scriptSetup":null,"scripts":[],"styles":[],"customBlocks":[]},"content":"\nJavaScript 语言的每一个值，都属于某一种数据类型。\n\n<!-- more -->\n\n## 简介\n\nJavaScript 的数据类型，共有六种。(ES6 又新增了第七种 Symbol 类型的值，本教程不涉及。)\n\n- 数值(number): 整数和小数(比如 `1` 和 `3.14`)\n- 字符串(string): 文本(比如 `Hello World`)。\n- 布尔值(boolean): 表示真伪的两个特殊值，即 `true`(真)和 `false`(假)\n- `undefined`: 表示“未定义”或不存在，即由于目前没有定义，所以此处暂时没有任何值\n- `null`: 表示空值，即此处的值为空。\n- 对象(object): 各种值组成的集合。\n\n通常，数值、字符串、布尔值这三种类型，合称为原始类型(primitive type)的值，即它们是最基本的数据类型，不能再细分了。对象则称为合成类型(complex type)的值，因为一个对象往往是多个原始类型的值的合成，可以看作是一个存放各种值的容器。至于 `undefined` 和 `null`，一般将它们看成两个特殊值。\n\n对象是最复杂的数据类型，又可以分成三个子类型。\n\n- 狭义的对象(object)\n- 数组(array)\n- 函数(function)\n\n狭义的对象和数组是两种不同的数据组合方式，除非特别声明，本教程的“对象”都特指狭义的对象。函数其实是处理数据的方法，JavaScript 把它当成一种数据类型，可以赋值给变量，这为编程带来了很大的灵活性，也为 JavaScript 的“函数式编程”奠定了基础。\n\n## typeof 运算符\n\nJavaScript 有三种方法，可以确定一个值到底是什么类型。\n\n- `typeof` 运算符\n- `instanceof` 运算符\n- `Object.prototype.toString` 方法\n\n`instanceof` 运算符和 `Object.prototype.toString` 方法，将在后文介绍。这里介绍 `typeof` 运算符。\n\n`typeof` 运算符可以返回一个值的数据类型。\n\n数值、字符串、布尔值分别返回 `number`、`string`、`boolean`。\n\n```js\ntypeof 123; // \"number\"\ntypeof \"123\"; // \"string\"\ntypeof false; // \"boolean\"\n```\n\n函数返回 `function`。\n\n```js\nfunction f() {}\ntypeof f;\n// \"function\"\n```\n\n`undefined` 返回 `undefined`。\n\n```js\ntypeof undefined;\n// \"undefined\"\n```\n\n利用这一点，`typeof` 可以用来检查一个没有声明的变量，而不报错。\n\n```js\nv;\n// ReferenceError: v is not defined\n\ntypeof v;\n// \"undefined\"\n```\n\n上面代码中，变量 `v` 没有用 `const` `var` 或 `let` 命令声明，直接使用就会报错。但是，放在 `typeof` 后面，就不报错了，而是返回 `undefined`。\n\n实际编程中，这个特点通常用在判断语句。\n\n```js\n// 错误的写法\nif (v) {\n  // ...\n}\n// ReferenceError: v is not defined\n\n// 正确的写法\nif (typeof v === \"undefined\") {\n  // ...\n}\n```\n\n对象返回 `object`。\n\n```js\ntypeof window; // \"object\"\ntypeof {}; // \"object\"\ntypeof []; // \"object\"\n```\n\n上面代码中，空数组(`[]`)的类型也是 `object`，这表示在 JavaScript 内部，数组本质上只是一种特殊的对象。这里顺便提一下，`instanceof` 运算符可以区分数组和对象。`instanceof` 运算符的详细解释，请见《面向对象编程》一章。\n\n```js\nconst o = {};\nconst a = [];\n\no instanceof Array; // false\na instanceof Array; // true\n```\n\n`null` 返回 `object`。\n\n```js\ntypeof null; // \"object\"\n```\n\n`null` 的类型是 `object`，这是由于历史原因造成的。1995 年的 JavaScript 语言第一版，只设计了五种数据类型(对象、整数、浮点数、字符串和布尔值)，没考虑 `null`，只把它当作 `object` 的一种特殊值。后来 `null` 独立出来，作为一种单独的数据类型，为了兼容以前的代码，`typeof null` 返回 `object` 就没法改变了。\n\n## 参考链接\n\n- Axel Rauschmayer, [Improving the JavaScript typeof operator](http://www.2ality.com/2011/11/improving-typeof.html)\n","excerpt":"","title":"","headers":[{"level":2,"title":"简介","slug":"简介","link":"#简介","children":[]},{"level":2,"title":"typeof 运算符","slug":"typeof-运算符","link":"#typeof-运算符","children":[]},{"level":2,"title":"参考链接","slug":"参考链接","link":"#参考链接","children":[]}]}}
