{"content":"<p><code v-pre>Component</code> 构造器用于创建自定义组件，接受一个 Object 类型的参数。</p>\n<!-- more -->\n<h2 id=\"参数\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#参数\"><span>参数</span></a></h2>\n<table>\n<thead>\n<tr>\n<th>定义段</th>\n<th>类型</th>\n<th>是否必填</th>\n<th>描述</th>\n<th>最低版本</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>properties</td>\n<td>Object Map</td>\n<td>否</td>\n<td>组件的对外属性，是属性名到属性设置的映射表</td>\n<td></td>\n</tr>\n<tr>\n<td>data</td>\n<td>Object</td>\n<td>否</td>\n<td>组件的内部数据，和 properties 一同用于组件的模板渲染</td>\n<td></td>\n</tr>\n<tr>\n<td>observers</td>\n<td>Object</td>\n<td>否</td>\n<td>组件数据字段监听器，用于监听 properties 和 data 的变化，参见 数据监听器</td>\n<td>2.6.1</td>\n</tr>\n<tr>\n<td>methods</td>\n<td>Object</td>\n<td>否</td>\n<td>组件的方法，包括事件响应函数和任意的自定义方法，关于事件响应函数的使用，参见 组件间通信与事件</td>\n<td></td>\n</tr>\n<tr>\n<td>behaviors</td>\n<td>String Array</td>\n<td>否</td>\n<td>类似于 mixins 和 traits 的组件间代码复用机制，参见 behaviors</td>\n<td></td>\n</tr>\n<tr>\n<td>created</td>\n<td>Function</td>\n<td>否</td>\n<td>组件生命周期函数-在组件实例刚刚被创建时执行，注意此时不能调用 setData</td>\n<td></td>\n</tr>\n<tr>\n<td>attached</td>\n<td>Function</td>\n<td>否</td>\n<td>组件生命周期函数-在组件实例进入页面节点树时执行</td>\n<td></td>\n</tr>\n<tr>\n<td>ready</td>\n<td>Function</td>\n<td>否</td>\n<td>组件生命周期函数-在组件布局完成后执行</td>\n<td></td>\n</tr>\n<tr>\n<td>moved</td>\n<td>Function</td>\n<td>否</td>\n<td>组件生命周期函数-在组件实例被移动到节点树另一个位置时执行</td>\n<td></td>\n</tr>\n<tr>\n<td>detached</td>\n<td>Function</td>\n<td>否</td>\n<td>组件生命周期函数-在组件实例被从页面节点树移除时执行</td>\n<td></td>\n</tr>\n<tr>\n<td>relations</td>\n<td>Object</td>\n<td>否</td>\n<td>组件间关系定义，参见 组件间关系</td>\n<td></td>\n</tr>\n<tr>\n<td>externalClasses</td>\n<td>String Array</td>\n<td>否</td>\n<td>组件接受的外部样式类，参见 外部样式类</td>\n<td></td>\n</tr>\n<tr>\n<td>options</td>\n<td>Object Map</td>\n<td>否</td>\n<td>一些选项(文档中介绍相关特性时会涉及具体的选项设置，这里暂不列举)</td>\n<td></td>\n</tr>\n<tr>\n<td>lifetimes</td>\n<td>Object</td>\n<td>否</td>\n<td>组件生命周期声明对象，参见 组件生命周期</td>\n<td>2.2.3</td>\n</tr>\n<tr>\n<td>pageLifetimes</td>\n<td>Object</td>\n<td>否</td>\n<td>组件所在页面的生命周期声明对象，参见 组件生命周期</td>\n<td>2.2.3</td>\n</tr>\n<tr>\n<td>definitionFilter</td>\n<td>Function</td>\n<td>否</td>\n<td>定义段过滤器，用于自定义组件扩展，参见 自定义组件扩展</td>\n<td>2.2.3</td>\n</tr>\n</tbody>\n</table>\n<p>生成的组件实例可以在组件的方法、生命周期函数和属性 <code v-pre>observer</code> 中通过 <code v-pre>this</code> 访问。组件包含一些通用属性和方法。</p>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>类型</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>is</td>\n<td>String</td>\n<td>组件的文件路径</td>\n</tr>\n<tr>\n<td>id</td>\n<td>String</td>\n<td>节点 id</td>\n</tr>\n<tr>\n<td>dataset</td>\n<td>String</td>\n<td>节点 dataset</td>\n</tr>\n<tr>\n<td>data</td>\n<td>Object</td>\n<td>组件数据，包括内部数据和属性值</td>\n</tr>\n<tr>\n<td>properties</td>\n<td>Object</td>\n<td>组件数据，包括内部数据和属性值(与 data 一致)</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>方法名</th>\n<th>参数</th>\n<th>描述</th>\n<th>最低版本</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>setData</td>\n<td>Object newData</td>\n<td>设置 data 并执行视图层渲染</td>\n<td></td>\n</tr>\n<tr>\n<td>hasBehavior</td>\n<td>Object behavior</td>\n<td>检查组件是否具有 behavior (检查时会递归检查被直接或间接引入的所有 behavior)</td>\n<td></td>\n</tr>\n<tr>\n<td>triggerEvent</td>\n<td>String name, Object detail, Object options</td>\n<td>触发事件，参见 组件间通信与事件</td>\n<td></td>\n</tr>\n<tr>\n<td>createSelectorQuery</td>\n<td></td>\n<td>创建一个 SelectorQuery 对象，选择器选取范围为这个组件实例内</td>\n<td></td>\n</tr>\n<tr>\n<td>createIntersectionObserver</td>\n<td></td>\n<td>创建一个 IntersectionObserver 对象，选择器选取范围为这个组件实例内</td>\n<td></td>\n</tr>\n<tr>\n<td>createMediaQueryObserver</td>\n<td></td>\n<td>创建一个 MediaQueryObserver 对象</td>\n<td>2.11.1</td>\n</tr>\n<tr>\n<td>selectComponent</td>\n<td>String selector</td>\n<td>使用选择器选择组件实例节点，返回匹配到的第一个组件实例对象(会被 wx://component-export 影响)</td>\n<td></td>\n</tr>\n<tr>\n<td>selectAllComponents</td>\n<td>String selector</td>\n<td>使用选择器选择组件实例节点，返回匹配到的全部组件实例对象组成的数组(会被 wx://component-export 影响)</td>\n<td></td>\n</tr>\n<tr>\n<td>selectOwnerComponent</td>\n<td></td>\n<td>选取当前组件节点所在的组件实例(即组件的引用者)，返回它的组件实例对象(会被 wx://component-export 影响)</td>\n<td>2.8.2</td>\n</tr>\n<tr>\n<td>getRelationNodes</td>\n<td>String relationKey</td>\n<td>获取这个关系所对应的所有关联节点，参见 组件间关系</td>\n<td></td>\n</tr>\n<tr>\n<td>groupSetData</td>\n<td>Function callback</td>\n<td>立刻执行 callback ，其中的多个 setData 之间不会触发界面绘制(只有某些特殊场景中需要，如用于在不同组件同时 setData 时进行界面绘制同步)</td>\n<td>2.4.0</td>\n</tr>\n<tr>\n<td>getTabBar</td>\n<td></td>\n<td>返回当前页面的 custom-tab-bar 的组件实例，详见自定义 tabBar</td>\n<td>2.6.2</td>\n</tr>\n<tr>\n<td>getPageId</td>\n<td></td>\n<td>返回页面标识符(一个字符串)，可以用来判断几个自定义组件实例是不是在同一个页面内</td>\n<td>2.7.1</td>\n</tr>\n<tr>\n<td>animate</td>\n<td>String selector, Array keyframes, Number duration, Function callback</td>\n<td>执行关键帧动画，详见动画</td>\n<td>2.9.0</td>\n</tr>\n<tr>\n<td>clearAnimation</td>\n<td>String selector, Object options, Function callback</td>\n<td>清除关键帧动画，详见动画</td>\n<td>2.9.0</td>\n</tr>\n<tr>\n<td>setUpdatePerformanceListener</td>\n<td>Object options, Function listener</td>\n<td>清除关键帧动画，详见动画</td>\n<td>2.12.0</td>\n</tr>\n</tbody>\n</table>\n<details class=\"hint-container details\"><summary>代码示例</summary>\n<p><a href=\"https://developers.weixin.qq.com/s/GqVTnvmq7g1m\" target=\"_blank\" rel=\"noopener noreferrer\">在开发者工具中预览效果</a></p>\n<div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">Component</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">({</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  behaviors</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> [],</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">  // 属性定义(详情参见下文)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  properties</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">    myProperty</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">      // 属性名</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">      type</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> String</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">      value</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    },</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">    myProperty2</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> String</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 简化的定义方式</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  },</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  data</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {}, </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 私有数据，可用于模板渲染</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  lifetimes</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    // 生命周期函数，可以为函数，或一个在methods段中定义的方法名</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">    attached</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">() {},</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">    moved</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">() {},</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">    detached</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">() {},</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  },</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  pageLifetimes</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    // 组件所在页面的生命周期函数</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">    show</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">() {},</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">    hide</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">() {},</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">    resize</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">() {},</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  },</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  methods</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">    onMyButtonTap</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">() {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">      this</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">setData</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">({</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">        // 更新属性和数据的方法与更新页面数据的方法类似</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">      });</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    },</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    // 内部方法建议以下划线开头</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">    _myPrivateMethod</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">() {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">      // 这里将 data.A[0].B 设为 'myPrivateData'</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">      this</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">setData</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">({</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">        \"A[0].B\"</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"myPrivateData\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">      });</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    },</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">    _propertyChange</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">newVal</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">oldVal</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) {},</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  },</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">});</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div></details>\n<h2 id=\"properties-定义\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#properties-定义\"><span>properties 定义</span></a></h2>\n<table>\n<thead>\n<tr>\n<th>定义段</th>\n<th>类型</th>\n<th>是否必填</th>\n<th>描述</th>\n<th>最低版本</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>type</td>\n<td></td>\n<td>是</td>\n<td>属性的类型</td>\n<td></td>\n</tr>\n<tr>\n<td>optionalTypes</td>\n<td>Array</td>\n<td>否</td>\n<td>属性的类型(可以指定多个)</td>\n<td>2.6.5</td>\n</tr>\n<tr>\n<td>value</td>\n<td></td>\n<td>否</td>\n<td>属性的初始值</td>\n<td></td>\n</tr>\n<tr>\n<td>observer</td>\n<td>Function</td>\n<td>否</td>\n<td>属性值变化时的回调函数</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<div class=\"hint-container warning\">\n<p class=\"hint-container-title\">注意</p>\n<p>新版本基础库中不推荐使用 <code v-pre>observer</code> 字段，而是使用 Component 构造器的 <code v-pre>observers</code> 字段代替，它更加强大且性能更好。</p>\n</div>\n<details class=\"hint-container details\"><summary>代码示例</summary>\n<div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">Component</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">({</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  properties</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">    min</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">      type</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> Number</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">      value</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    },</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">    min</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">      type</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> Number</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">      value</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">      observer</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">newVal</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">oldVal</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">        // 属性值变化时执行</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">      },</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    },</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">    lastLeaf</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">      // 这个属性可以是 Number 、 String 、 Boolean 三种类型中的一种</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">      type</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> Number</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">      optionalTypes</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> [</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">String</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">Object</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">],</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">      value</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    },</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  },</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">});</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div></details>\n<p>属性的类型可以为 <code v-pre>String</code> <code v-pre>Number</code> <code v-pre>Boolean</code> <code v-pre>Object</code> <code v-pre>Array</code> 其一，也可以为 <code v-pre>null</code> 表示不限制类型。</p>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">提示</p>\n<p>多数情况下，属性最好指定一个确切的类型。这样，在 WXML 中以字面量指定属性值时，值可以获得一个确切的类型，如:</p>\n<div class=\"language-xml\" data-highlighter=\"shiki\" data-ext=\"xml\" data-title=\"xml\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&#x3C;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">custom-comp</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> min</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"1\"</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> max</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"5\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> /></span></span></code></pre>\n</div><p>此时，由于自定义组件的对应属性被规定为 <code v-pre>Number</code> 类型， min 和 max 会被赋值为 <code v-pre>1</code> 和 <code v-pre>5</code> ，而非 <code v-pre>&quot;1&quot;</code> 和 <code v-pre>&quot;5&quot;</code> ，即:</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">this</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">data</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">min</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> ===</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// true</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">this</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">data</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">max</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> ===</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 5</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// true</span></span></code></pre>\n</div></div>\n<div class=\"hint-container info\">\n<p class=\"hint-container-title\">相关信息</p>\n<p>在 <code v-pre>properties</code> 定义段中，属性名采用驼峰写法(propertyName)；在 wxml 中，指定属性值时则对应使用连字符写法(component-tag-name property-name=&quot;attr value&quot;)，应用于数据绑定时采用驼峰写法(attr=&quot;&quot;)。</p>\n</div>\n<h3 id=\"bug-tips\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#bug-tips\"><span>Bug &amp; Tips</span></a></h3>\n<ul>\n<li>使用 <code v-pre>this.data</code> 可以获取内部数据和属性值；但直接修改它不会将变更应用到界面上，应使用 setData 修改。</li>\n<li>生命周期函数无法在组件方法中通过 <code v-pre>this</code> 访问到。</li>\n<li>属性名应避免以 <code v-pre>data</code> 开头，即不要命名成 <code v-pre>dataXyz</code> 这样的形式，因为在 WXML 中， <code v-pre>data-xyz=&quot;&quot;</code> 会被作为节点 dataset 来处理，而不是组件属性。</li>\n<li>在一个组件的定义和使用时，组件的属性名和 data 字段相互间都不能冲突(尽管它们位于不同的定义段中)。</li>\n<li>从基础库 2.0.9 开始，对象类型的属性和 data 字段中可以包含函数类型的子字段，即可以通过对象类型的属性字段来传递函数。低于这一版本的基础库不支持这一特性。</li>\n<li>bug : 对于 type 为 Object 或 Array 的属性，如果通过该组件自身的 <code v-pre>this.setData</code> 来改变属性值的一个子字段，则依旧会触发属性 observer ，且 observer 接收到的 <code v-pre>newVal</code> 是变化的那个子字段的值，<code v-pre>oldVal</code> 为空， <code v-pre>changedPath</code> 包含子字段的字段名相关信息；目前推荐使用 <code v-pre>observers</code> 定义段代替。</li>\n</ul>\n","env":{"base":"/","filePath":"/Users/carson/Desktop/Mister-Hope.github.io-main/src/code/mini-app/guide/custom-component/component.md","filePathRelative":"code/mini-app/guide/custom-component/component.md","frontmatter":{"date":"2020-12-19T00:00:00.000Z","title":"框架接口","category":"小程序"},"sfcBlocks":{"template":{"type":"template","content":"<template><p><code v-pre>Component</code> 构造器用于创建自定义组件，接受一个 Object 类型的参数。</p>\n<!-- more -->\n<h2 id=\"参数\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#参数\"><span>参数</span></a></h2>\n<table>\n<thead>\n<tr>\n<th>定义段</th>\n<th>类型</th>\n<th>是否必填</th>\n<th>描述</th>\n<th>最低版本</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>properties</td>\n<td>Object Map</td>\n<td>否</td>\n<td>组件的对外属性，是属性名到属性设置的映射表</td>\n<td></td>\n</tr>\n<tr>\n<td>data</td>\n<td>Object</td>\n<td>否</td>\n<td>组件的内部数据，和 properties 一同用于组件的模板渲染</td>\n<td></td>\n</tr>\n<tr>\n<td>observers</td>\n<td>Object</td>\n<td>否</td>\n<td>组件数据字段监听器，用于监听 properties 和 data 的变化，参见 数据监听器</td>\n<td>2.6.1</td>\n</tr>\n<tr>\n<td>methods</td>\n<td>Object</td>\n<td>否</td>\n<td>组件的方法，包括事件响应函数和任意的自定义方法，关于事件响应函数的使用，参见 组件间通信与事件</td>\n<td></td>\n</tr>\n<tr>\n<td>behaviors</td>\n<td>String Array</td>\n<td>否</td>\n<td>类似于 mixins 和 traits 的组件间代码复用机制，参见 behaviors</td>\n<td></td>\n</tr>\n<tr>\n<td>created</td>\n<td>Function</td>\n<td>否</td>\n<td>组件生命周期函数-在组件实例刚刚被创建时执行，注意此时不能调用 setData</td>\n<td></td>\n</tr>\n<tr>\n<td>attached</td>\n<td>Function</td>\n<td>否</td>\n<td>组件生命周期函数-在组件实例进入页面节点树时执行</td>\n<td></td>\n</tr>\n<tr>\n<td>ready</td>\n<td>Function</td>\n<td>否</td>\n<td>组件生命周期函数-在组件布局完成后执行</td>\n<td></td>\n</tr>\n<tr>\n<td>moved</td>\n<td>Function</td>\n<td>否</td>\n<td>组件生命周期函数-在组件实例被移动到节点树另一个位置时执行</td>\n<td></td>\n</tr>\n<tr>\n<td>detached</td>\n<td>Function</td>\n<td>否</td>\n<td>组件生命周期函数-在组件实例被从页面节点树移除时执行</td>\n<td></td>\n</tr>\n<tr>\n<td>relations</td>\n<td>Object</td>\n<td>否</td>\n<td>组件间关系定义，参见 组件间关系</td>\n<td></td>\n</tr>\n<tr>\n<td>externalClasses</td>\n<td>String Array</td>\n<td>否</td>\n<td>组件接受的外部样式类，参见 外部样式类</td>\n<td></td>\n</tr>\n<tr>\n<td>options</td>\n<td>Object Map</td>\n<td>否</td>\n<td>一些选项(文档中介绍相关特性时会涉及具体的选项设置，这里暂不列举)</td>\n<td></td>\n</tr>\n<tr>\n<td>lifetimes</td>\n<td>Object</td>\n<td>否</td>\n<td>组件生命周期声明对象，参见 组件生命周期</td>\n<td>2.2.3</td>\n</tr>\n<tr>\n<td>pageLifetimes</td>\n<td>Object</td>\n<td>否</td>\n<td>组件所在页面的生命周期声明对象，参见 组件生命周期</td>\n<td>2.2.3</td>\n</tr>\n<tr>\n<td>definitionFilter</td>\n<td>Function</td>\n<td>否</td>\n<td>定义段过滤器，用于自定义组件扩展，参见 自定义组件扩展</td>\n<td>2.2.3</td>\n</tr>\n</tbody>\n</table>\n<p>生成的组件实例可以在组件的方法、生命周期函数和属性 <code v-pre>observer</code> 中通过 <code v-pre>this</code> 访问。组件包含一些通用属性和方法。</p>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>类型</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>is</td>\n<td>String</td>\n<td>组件的文件路径</td>\n</tr>\n<tr>\n<td>id</td>\n<td>String</td>\n<td>节点 id</td>\n</tr>\n<tr>\n<td>dataset</td>\n<td>String</td>\n<td>节点 dataset</td>\n</tr>\n<tr>\n<td>data</td>\n<td>Object</td>\n<td>组件数据，包括内部数据和属性值</td>\n</tr>\n<tr>\n<td>properties</td>\n<td>Object</td>\n<td>组件数据，包括内部数据和属性值(与 data 一致)</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>方法名</th>\n<th>参数</th>\n<th>描述</th>\n<th>最低版本</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>setData</td>\n<td>Object newData</td>\n<td>设置 data 并执行视图层渲染</td>\n<td></td>\n</tr>\n<tr>\n<td>hasBehavior</td>\n<td>Object behavior</td>\n<td>检查组件是否具有 behavior (检查时会递归检查被直接或间接引入的所有 behavior)</td>\n<td></td>\n</tr>\n<tr>\n<td>triggerEvent</td>\n<td>String name, Object detail, Object options</td>\n<td>触发事件，参见 组件间通信与事件</td>\n<td></td>\n</tr>\n<tr>\n<td>createSelectorQuery</td>\n<td></td>\n<td>创建一个 SelectorQuery 对象，选择器选取范围为这个组件实例内</td>\n<td></td>\n</tr>\n<tr>\n<td>createIntersectionObserver</td>\n<td></td>\n<td>创建一个 IntersectionObserver 对象，选择器选取范围为这个组件实例内</td>\n<td></td>\n</tr>\n<tr>\n<td>createMediaQueryObserver</td>\n<td></td>\n<td>创建一个 MediaQueryObserver 对象</td>\n<td>2.11.1</td>\n</tr>\n<tr>\n<td>selectComponent</td>\n<td>String selector</td>\n<td>使用选择器选择组件实例节点，返回匹配到的第一个组件实例对象(会被 wx://component-export 影响)</td>\n<td></td>\n</tr>\n<tr>\n<td>selectAllComponents</td>\n<td>String selector</td>\n<td>使用选择器选择组件实例节点，返回匹配到的全部组件实例对象组成的数组(会被 wx://component-export 影响)</td>\n<td></td>\n</tr>\n<tr>\n<td>selectOwnerComponent</td>\n<td></td>\n<td>选取当前组件节点所在的组件实例(即组件的引用者)，返回它的组件实例对象(会被 wx://component-export 影响)</td>\n<td>2.8.2</td>\n</tr>\n<tr>\n<td>getRelationNodes</td>\n<td>String relationKey</td>\n<td>获取这个关系所对应的所有关联节点，参见 组件间关系</td>\n<td></td>\n</tr>\n<tr>\n<td>groupSetData</td>\n<td>Function callback</td>\n<td>立刻执行 callback ，其中的多个 setData 之间不会触发界面绘制(只有某些特殊场景中需要，如用于在不同组件同时 setData 时进行界面绘制同步)</td>\n<td>2.4.0</td>\n</tr>\n<tr>\n<td>getTabBar</td>\n<td></td>\n<td>返回当前页面的 custom-tab-bar 的组件实例，详见自定义 tabBar</td>\n<td>2.6.2</td>\n</tr>\n<tr>\n<td>getPageId</td>\n<td></td>\n<td>返回页面标识符(一个字符串)，可以用来判断几个自定义组件实例是不是在同一个页面内</td>\n<td>2.7.1</td>\n</tr>\n<tr>\n<td>animate</td>\n<td>String selector, Array keyframes, Number duration, Function callback</td>\n<td>执行关键帧动画，详见动画</td>\n<td>2.9.0</td>\n</tr>\n<tr>\n<td>clearAnimation</td>\n<td>String selector, Object options, Function callback</td>\n<td>清除关键帧动画，详见动画</td>\n<td>2.9.0</td>\n</tr>\n<tr>\n<td>setUpdatePerformanceListener</td>\n<td>Object options, Function listener</td>\n<td>清除关键帧动画，详见动画</td>\n<td>2.12.0</td>\n</tr>\n</tbody>\n</table>\n<details class=\"hint-container details\"><summary>代码示例</summary>\n<p><a href=\"https://developers.weixin.qq.com/s/GqVTnvmq7g1m\" target=\"_blank\" rel=\"noopener noreferrer\">在开发者工具中预览效果</a></p>\n<div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">Component</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">({</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  behaviors</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> [],</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">  // 属性定义(详情参见下文)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  properties</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">    myProperty</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">      // 属性名</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">      type</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> String</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">      value</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    },</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">    myProperty2</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> String</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 简化的定义方式</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  },</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  data</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {}, </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 私有数据，可用于模板渲染</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  lifetimes</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    // 生命周期函数，可以为函数，或一个在methods段中定义的方法名</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">    attached</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">() {},</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">    moved</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">() {},</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">    detached</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">() {},</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  },</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  pageLifetimes</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    // 组件所在页面的生命周期函数</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">    show</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">() {},</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">    hide</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">() {},</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">    resize</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">() {},</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  },</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  methods</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">    onMyButtonTap</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">() {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">      this</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">setData</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">({</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">        // 更新属性和数据的方法与更新页面数据的方法类似</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">      });</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    },</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    // 内部方法建议以下划线开头</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">    _myPrivateMethod</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">() {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">      // 这里将 data.A[0].B 设为 'myPrivateData'</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">      this</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">setData</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">({</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">        \"A[0].B\"</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"myPrivateData\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">      });</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    },</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">    _propertyChange</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">newVal</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">oldVal</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) {},</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  },</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">});</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div></details>\n<h2 id=\"properties-定义\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#properties-定义\"><span>properties 定义</span></a></h2>\n<table>\n<thead>\n<tr>\n<th>定义段</th>\n<th>类型</th>\n<th>是否必填</th>\n<th>描述</th>\n<th>最低版本</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>type</td>\n<td></td>\n<td>是</td>\n<td>属性的类型</td>\n<td></td>\n</tr>\n<tr>\n<td>optionalTypes</td>\n<td>Array</td>\n<td>否</td>\n<td>属性的类型(可以指定多个)</td>\n<td>2.6.5</td>\n</tr>\n<tr>\n<td>value</td>\n<td></td>\n<td>否</td>\n<td>属性的初始值</td>\n<td></td>\n</tr>\n<tr>\n<td>observer</td>\n<td>Function</td>\n<td>否</td>\n<td>属性值变化时的回调函数</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<div class=\"hint-container warning\">\n<p class=\"hint-container-title\">注意</p>\n<p>新版本基础库中不推荐使用 <code v-pre>observer</code> 字段，而是使用 Component 构造器的 <code v-pre>observers</code> 字段代替，它更加强大且性能更好。</p>\n</div>\n<details class=\"hint-container details\"><summary>代码示例</summary>\n<div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">Component</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">({</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  properties</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">    min</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">      type</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> Number</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">      value</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    },</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">    min</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">      type</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> Number</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">      value</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">      observer</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">newVal</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">oldVal</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">        // 属性值变化时执行</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">      },</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    },</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">    lastLeaf</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">      // 这个属性可以是 Number 、 String 、 Boolean 三种类型中的一种</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">      type</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> Number</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">      optionalTypes</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> [</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">String</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">Object</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">],</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">      value</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    },</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  },</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">});</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div></details>\n<p>属性的类型可以为 <code v-pre>String</code> <code v-pre>Number</code> <code v-pre>Boolean</code> <code v-pre>Object</code> <code v-pre>Array</code> 其一，也可以为 <code v-pre>null</code> 表示不限制类型。</p>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">提示</p>\n<p>多数情况下，属性最好指定一个确切的类型。这样，在 WXML 中以字面量指定属性值时，值可以获得一个确切的类型，如:</p>\n<div class=\"language-xml\" data-highlighter=\"shiki\" data-ext=\"xml\" data-title=\"xml\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&#x3C;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">custom-comp</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> min</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"1\"</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> max</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"5\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> /></span></span></code></pre>\n</div><p>此时，由于自定义组件的对应属性被规定为 <code v-pre>Number</code> 类型， min 和 max 会被赋值为 <code v-pre>1</code> 和 <code v-pre>5</code> ，而非 <code v-pre>&quot;1&quot;</code> 和 <code v-pre>&quot;5&quot;</code> ，即:</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">this</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">data</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">min</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> ===</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// true</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">this</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">data</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">max</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> ===</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 5</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// true</span></span></code></pre>\n</div></div>\n<div class=\"hint-container info\">\n<p class=\"hint-container-title\">相关信息</p>\n<p>在 <code v-pre>properties</code> 定义段中，属性名采用驼峰写法(propertyName)；在 wxml 中，指定属性值时则对应使用连字符写法(component-tag-name property-name=&quot;attr value&quot;)，应用于数据绑定时采用驼峰写法(attr=&quot;&quot;)。</p>\n</div>\n<h3 id=\"bug-tips\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#bug-tips\"><span>Bug &amp; Tips</span></a></h3>\n<ul>\n<li>使用 <code v-pre>this.data</code> 可以获取内部数据和属性值；但直接修改它不会将变更应用到界面上，应使用 setData 修改。</li>\n<li>生命周期函数无法在组件方法中通过 <code v-pre>this</code> 访问到。</li>\n<li>属性名应避免以 <code v-pre>data</code> 开头，即不要命名成 <code v-pre>dataXyz</code> 这样的形式，因为在 WXML 中， <code v-pre>data-xyz=&quot;&quot;</code> 会被作为节点 dataset 来处理，而不是组件属性。</li>\n<li>在一个组件的定义和使用时，组件的属性名和 data 字段相互间都不能冲突(尽管它们位于不同的定义段中)。</li>\n<li>从基础库 2.0.9 开始，对象类型的属性和 data 字段中可以包含函数类型的子字段，即可以通过对象类型的属性字段来传递函数。低于这一版本的基础库不支持这一特性。</li>\n<li>bug : 对于 type 为 Object 或 Array 的属性，如果通过该组件自身的 <code v-pre>this.setData</code> 来改变属性值的一个子字段，则依旧会触发属性 observer ，且 observer 接收到的 <code v-pre>newVal</code> 是变化的那个子字段的值，<code v-pre>oldVal</code> 为空， <code v-pre>changedPath</code> 包含子字段的字段名相关信息；目前推荐使用 <code v-pre>observers</code> 定义段代替。</li>\n</ul>\n</template>","contentStripped":"<p><code v-pre>Component</code> 构造器用于创建自定义组件，接受一个 Object 类型的参数。</p>\n<!-- more -->\n<h2 id=\"参数\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#参数\"><span>参数</span></a></h2>\n<table>\n<thead>\n<tr>\n<th>定义段</th>\n<th>类型</th>\n<th>是否必填</th>\n<th>描述</th>\n<th>最低版本</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>properties</td>\n<td>Object Map</td>\n<td>否</td>\n<td>组件的对外属性，是属性名到属性设置的映射表</td>\n<td></td>\n</tr>\n<tr>\n<td>data</td>\n<td>Object</td>\n<td>否</td>\n<td>组件的内部数据，和 properties 一同用于组件的模板渲染</td>\n<td></td>\n</tr>\n<tr>\n<td>observers</td>\n<td>Object</td>\n<td>否</td>\n<td>组件数据字段监听器，用于监听 properties 和 data 的变化，参见 数据监听器</td>\n<td>2.6.1</td>\n</tr>\n<tr>\n<td>methods</td>\n<td>Object</td>\n<td>否</td>\n<td>组件的方法，包括事件响应函数和任意的自定义方法，关于事件响应函数的使用，参见 组件间通信与事件</td>\n<td></td>\n</tr>\n<tr>\n<td>behaviors</td>\n<td>String Array</td>\n<td>否</td>\n<td>类似于 mixins 和 traits 的组件间代码复用机制，参见 behaviors</td>\n<td></td>\n</tr>\n<tr>\n<td>created</td>\n<td>Function</td>\n<td>否</td>\n<td>组件生命周期函数-在组件实例刚刚被创建时执行，注意此时不能调用 setData</td>\n<td></td>\n</tr>\n<tr>\n<td>attached</td>\n<td>Function</td>\n<td>否</td>\n<td>组件生命周期函数-在组件实例进入页面节点树时执行</td>\n<td></td>\n</tr>\n<tr>\n<td>ready</td>\n<td>Function</td>\n<td>否</td>\n<td>组件生命周期函数-在组件布局完成后执行</td>\n<td></td>\n</tr>\n<tr>\n<td>moved</td>\n<td>Function</td>\n<td>否</td>\n<td>组件生命周期函数-在组件实例被移动到节点树另一个位置时执行</td>\n<td></td>\n</tr>\n<tr>\n<td>detached</td>\n<td>Function</td>\n<td>否</td>\n<td>组件生命周期函数-在组件实例被从页面节点树移除时执行</td>\n<td></td>\n</tr>\n<tr>\n<td>relations</td>\n<td>Object</td>\n<td>否</td>\n<td>组件间关系定义，参见 组件间关系</td>\n<td></td>\n</tr>\n<tr>\n<td>externalClasses</td>\n<td>String Array</td>\n<td>否</td>\n<td>组件接受的外部样式类，参见 外部样式类</td>\n<td></td>\n</tr>\n<tr>\n<td>options</td>\n<td>Object Map</td>\n<td>否</td>\n<td>一些选项(文档中介绍相关特性时会涉及具体的选项设置，这里暂不列举)</td>\n<td></td>\n</tr>\n<tr>\n<td>lifetimes</td>\n<td>Object</td>\n<td>否</td>\n<td>组件生命周期声明对象，参见 组件生命周期</td>\n<td>2.2.3</td>\n</tr>\n<tr>\n<td>pageLifetimes</td>\n<td>Object</td>\n<td>否</td>\n<td>组件所在页面的生命周期声明对象，参见 组件生命周期</td>\n<td>2.2.3</td>\n</tr>\n<tr>\n<td>definitionFilter</td>\n<td>Function</td>\n<td>否</td>\n<td>定义段过滤器，用于自定义组件扩展，参见 自定义组件扩展</td>\n<td>2.2.3</td>\n</tr>\n</tbody>\n</table>\n<p>生成的组件实例可以在组件的方法、生命周期函数和属性 <code v-pre>observer</code> 中通过 <code v-pre>this</code> 访问。组件包含一些通用属性和方法。</p>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>类型</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>is</td>\n<td>String</td>\n<td>组件的文件路径</td>\n</tr>\n<tr>\n<td>id</td>\n<td>String</td>\n<td>节点 id</td>\n</tr>\n<tr>\n<td>dataset</td>\n<td>String</td>\n<td>节点 dataset</td>\n</tr>\n<tr>\n<td>data</td>\n<td>Object</td>\n<td>组件数据，包括内部数据和属性值</td>\n</tr>\n<tr>\n<td>properties</td>\n<td>Object</td>\n<td>组件数据，包括内部数据和属性值(与 data 一致)</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>方法名</th>\n<th>参数</th>\n<th>描述</th>\n<th>最低版本</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>setData</td>\n<td>Object newData</td>\n<td>设置 data 并执行视图层渲染</td>\n<td></td>\n</tr>\n<tr>\n<td>hasBehavior</td>\n<td>Object behavior</td>\n<td>检查组件是否具有 behavior (检查时会递归检查被直接或间接引入的所有 behavior)</td>\n<td></td>\n</tr>\n<tr>\n<td>triggerEvent</td>\n<td>String name, Object detail, Object options</td>\n<td>触发事件，参见 组件间通信与事件</td>\n<td></td>\n</tr>\n<tr>\n<td>createSelectorQuery</td>\n<td></td>\n<td>创建一个 SelectorQuery 对象，选择器选取范围为这个组件实例内</td>\n<td></td>\n</tr>\n<tr>\n<td>createIntersectionObserver</td>\n<td></td>\n<td>创建一个 IntersectionObserver 对象，选择器选取范围为这个组件实例内</td>\n<td></td>\n</tr>\n<tr>\n<td>createMediaQueryObserver</td>\n<td></td>\n<td>创建一个 MediaQueryObserver 对象</td>\n<td>2.11.1</td>\n</tr>\n<tr>\n<td>selectComponent</td>\n<td>String selector</td>\n<td>使用选择器选择组件实例节点，返回匹配到的第一个组件实例对象(会被 wx://component-export 影响)</td>\n<td></td>\n</tr>\n<tr>\n<td>selectAllComponents</td>\n<td>String selector</td>\n<td>使用选择器选择组件实例节点，返回匹配到的全部组件实例对象组成的数组(会被 wx://component-export 影响)</td>\n<td></td>\n</tr>\n<tr>\n<td>selectOwnerComponent</td>\n<td></td>\n<td>选取当前组件节点所在的组件实例(即组件的引用者)，返回它的组件实例对象(会被 wx://component-export 影响)</td>\n<td>2.8.2</td>\n</tr>\n<tr>\n<td>getRelationNodes</td>\n<td>String relationKey</td>\n<td>获取这个关系所对应的所有关联节点，参见 组件间关系</td>\n<td></td>\n</tr>\n<tr>\n<td>groupSetData</td>\n<td>Function callback</td>\n<td>立刻执行 callback ，其中的多个 setData 之间不会触发界面绘制(只有某些特殊场景中需要，如用于在不同组件同时 setData 时进行界面绘制同步)</td>\n<td>2.4.0</td>\n</tr>\n<tr>\n<td>getTabBar</td>\n<td></td>\n<td>返回当前页面的 custom-tab-bar 的组件实例，详见自定义 tabBar</td>\n<td>2.6.2</td>\n</tr>\n<tr>\n<td>getPageId</td>\n<td></td>\n<td>返回页面标识符(一个字符串)，可以用来判断几个自定义组件实例是不是在同一个页面内</td>\n<td>2.7.1</td>\n</tr>\n<tr>\n<td>animate</td>\n<td>String selector, Array keyframes, Number duration, Function callback</td>\n<td>执行关键帧动画，详见动画</td>\n<td>2.9.0</td>\n</tr>\n<tr>\n<td>clearAnimation</td>\n<td>String selector, Object options, Function callback</td>\n<td>清除关键帧动画，详见动画</td>\n<td>2.9.0</td>\n</tr>\n<tr>\n<td>setUpdatePerformanceListener</td>\n<td>Object options, Function listener</td>\n<td>清除关键帧动画，详见动画</td>\n<td>2.12.0</td>\n</tr>\n</tbody>\n</table>\n<details class=\"hint-container details\"><summary>代码示例</summary>\n<p><a href=\"https://developers.weixin.qq.com/s/GqVTnvmq7g1m\" target=\"_blank\" rel=\"noopener noreferrer\">在开发者工具中预览效果</a></p>\n<div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">Component</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">({</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  behaviors</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> [],</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">  // 属性定义(详情参见下文)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  properties</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">    myProperty</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">      // 属性名</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">      type</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> String</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">      value</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    },</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">    myProperty2</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> String</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 简化的定义方式</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  },</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  data</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {}, </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 私有数据，可用于模板渲染</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  lifetimes</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    // 生命周期函数，可以为函数，或一个在methods段中定义的方法名</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">    attached</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">() {},</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">    moved</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">() {},</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">    detached</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">() {},</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  },</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  pageLifetimes</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    // 组件所在页面的生命周期函数</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">    show</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">() {},</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">    hide</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">() {},</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">    resize</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">() {},</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  },</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  methods</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">    onMyButtonTap</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">() {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">      this</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">setData</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">({</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">        // 更新属性和数据的方法与更新页面数据的方法类似</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">      });</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    },</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    // 内部方法建议以下划线开头</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">    _myPrivateMethod</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">() {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">      // 这里将 data.A[0].B 设为 'myPrivateData'</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">      this</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">setData</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">({</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">        \"A[0].B\"</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"myPrivateData\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">      });</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    },</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">    _propertyChange</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">newVal</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">oldVal</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) {},</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  },</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">});</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div></details>\n<h2 id=\"properties-定义\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#properties-定义\"><span>properties 定义</span></a></h2>\n<table>\n<thead>\n<tr>\n<th>定义段</th>\n<th>类型</th>\n<th>是否必填</th>\n<th>描述</th>\n<th>最低版本</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>type</td>\n<td></td>\n<td>是</td>\n<td>属性的类型</td>\n<td></td>\n</tr>\n<tr>\n<td>optionalTypes</td>\n<td>Array</td>\n<td>否</td>\n<td>属性的类型(可以指定多个)</td>\n<td>2.6.5</td>\n</tr>\n<tr>\n<td>value</td>\n<td></td>\n<td>否</td>\n<td>属性的初始值</td>\n<td></td>\n</tr>\n<tr>\n<td>observer</td>\n<td>Function</td>\n<td>否</td>\n<td>属性值变化时的回调函数</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<div class=\"hint-container warning\">\n<p class=\"hint-container-title\">注意</p>\n<p>新版本基础库中不推荐使用 <code v-pre>observer</code> 字段，而是使用 Component 构造器的 <code v-pre>observers</code> 字段代替，它更加强大且性能更好。</p>\n</div>\n<details class=\"hint-container details\"><summary>代码示例</summary>\n<div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">Component</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">({</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  properties</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">    min</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">      type</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> Number</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">      value</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    },</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">    min</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">      type</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> Number</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">      value</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">      observer</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">newVal</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">oldVal</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">        // 属性值变化时执行</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">      },</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    },</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">    lastLeaf</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">      // 这个属性可以是 Number 、 String 、 Boolean 三种类型中的一种</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">      type</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> Number</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">      optionalTypes</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> [</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">String</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">Object</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">],</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">      value</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    },</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  },</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">});</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div></details>\n<p>属性的类型可以为 <code v-pre>String</code> <code v-pre>Number</code> <code v-pre>Boolean</code> <code v-pre>Object</code> <code v-pre>Array</code> 其一，也可以为 <code v-pre>null</code> 表示不限制类型。</p>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">提示</p>\n<p>多数情况下，属性最好指定一个确切的类型。这样，在 WXML 中以字面量指定属性值时，值可以获得一个确切的类型，如:</p>\n<div class=\"language-xml\" data-highlighter=\"shiki\" data-ext=\"xml\" data-title=\"xml\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&#x3C;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">custom-comp</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> min</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"1\"</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> max</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"5\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> /></span></span></code></pre>\n</div><p>此时，由于自定义组件的对应属性被规定为 <code v-pre>Number</code> 类型， min 和 max 会被赋值为 <code v-pre>1</code> 和 <code v-pre>5</code> ，而非 <code v-pre>&quot;1&quot;</code> 和 <code v-pre>&quot;5&quot;</code> ，即:</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">this</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">data</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">min</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> ===</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// true</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">this</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">data</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">max</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> ===</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 5</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// true</span></span></code></pre>\n</div></div>\n<div class=\"hint-container info\">\n<p class=\"hint-container-title\">相关信息</p>\n<p>在 <code v-pre>properties</code> 定义段中，属性名采用驼峰写法(propertyName)；在 wxml 中，指定属性值时则对应使用连字符写法(component-tag-name property-name=&quot;attr value&quot;)，应用于数据绑定时采用驼峰写法(attr=&quot;&quot;)。</p>\n</div>\n<h3 id=\"bug-tips\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#bug-tips\"><span>Bug &amp; Tips</span></a></h3>\n<ul>\n<li>使用 <code v-pre>this.data</code> 可以获取内部数据和属性值；但直接修改它不会将变更应用到界面上，应使用 setData 修改。</li>\n<li>生命周期函数无法在组件方法中通过 <code v-pre>this</code> 访问到。</li>\n<li>属性名应避免以 <code v-pre>data</code> 开头，即不要命名成 <code v-pre>dataXyz</code> 这样的形式，因为在 WXML 中， <code v-pre>data-xyz=&quot;&quot;</code> 会被作为节点 dataset 来处理，而不是组件属性。</li>\n<li>在一个组件的定义和使用时，组件的属性名和 data 字段相互间都不能冲突(尽管它们位于不同的定义段中)。</li>\n<li>从基础库 2.0.9 开始，对象类型的属性和 data 字段中可以包含函数类型的子字段，即可以通过对象类型的属性字段来传递函数。低于这一版本的基础库不支持这一特性。</li>\n<li>bug : 对于 type 为 Object 或 Array 的属性，如果通过该组件自身的 <code v-pre>this.setData</code> 来改变属性值的一个子字段，则依旧会触发属性 observer ，且 observer 接收到的 <code v-pre>newVal</code> 是变化的那个子字段的值，<code v-pre>oldVal</code> 为空， <code v-pre>changedPath</code> 包含子字段的字段名相关信息；目前推荐使用 <code v-pre>observers</code> 定义段代替。</li>\n</ul>\n","tagOpen":"<template>","tagClose":"</template>"},"script":null,"scriptSetup":null,"scripts":[],"styles":[],"customBlocks":[]},"content":"\n`Component` 构造器用于创建自定义组件，接受一个 Object 类型的参数。\n\n<!-- more -->\n\n## 参数\n\n| 定义段           | 类型         | 是否必填 | 描述                                                                                          | 最低版本 |\n| ---------------- | ------------ | -------- | --------------------------------------------------------------------------------------------- | -------- |\n| properties       | Object Map   | 否       | 组件的对外属性，是属性名到属性设置的映射表                                                    |          |\n| data             | Object       | 否       | 组件的内部数据，和 properties 一同用于组件的模板渲染                                          |          |\n| observers        | Object       | 否       | 组件数据字段监听器，用于监听 properties 和 data 的变化，参见 数据监听器                       | 2.6.1    |\n| methods          | Object       | 否       | 组件的方法，包括事件响应函数和任意的自定义方法，关于事件响应函数的使用，参见 组件间通信与事件 |          |\n| behaviors        | String Array | 否       | 类似于 mixins 和 traits 的组件间代码复用机制，参见 behaviors                                  |          |\n| created          | Function     | 否       | 组件生命周期函数-在组件实例刚刚被创建时执行，注意此时不能调用 setData                         |          |\n| attached         | Function     | 否       | 组件生命周期函数-在组件实例进入页面节点树时执行                                               |          |\n| ready            | Function     | 否       | 组件生命周期函数-在组件布局完成后执行                                                         |          |\n| moved            | Function     | 否       | 组件生命周期函数-在组件实例被移动到节点树另一个位置时执行                                     |          |\n| detached         | Function     | 否       | 组件生命周期函数-在组件实例被从页面节点树移除时执行                                           |          |\n| relations        | Object       | 否       | 组件间关系定义，参见 组件间关系                                                               |          |\n| externalClasses  | String Array | 否       | 组件接受的外部样式类，参见 外部样式类                                                         |          |\n| options          | Object Map   | 否       | 一些选项(文档中介绍相关特性时会涉及具体的选项设置，这里暂不列举)                              |          |\n| lifetimes        | Object       | 否       | 组件生命周期声明对象，参见 组件生命周期                                                       | 2.2.3    |\n| pageLifetimes    | Object       | 否       | 组件所在页面的生命周期声明对象，参见 组件生命周期                                             | 2.2.3    |\n| definitionFilter | Function     | 否       | 定义段过滤器，用于自定义组件扩展，参见 自定义组件扩展                                         | 2.2.3    |\n\n生成的组件实例可以在组件的方法、生命周期函数和属性 `observer` 中通过 `this` 访问。组件包含一些通用属性和方法。\n\n| 属性名     | 类型   | 描述                                         |\n| ---------- | ------ | -------------------------------------------- |\n| is         | String | 组件的文件路径                               |\n| id         | String | 节点 id                                      |\n| dataset    | String | 节点 dataset                                 |\n| data       | Object | 组件数据，包括内部数据和属性值               |\n| properties | Object | 组件数据，包括内部数据和属性值(与 data 一致) |\n\n| 方法名                       | 参数                                                                 | 描述                                                                                                                                 | 最低版本 |\n| ---------------------------- | -------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------ | -------- |\n| setData                      | Object newData                                                       | 设置 data 并执行视图层渲染                                                                                                           |          |\n| hasBehavior                  | Object behavior                                                      | 检查组件是否具有 behavior (检查时会递归检查被直接或间接引入的所有 behavior)                                                          |          |\n| triggerEvent                 | String name, Object detail, Object options                           | 触发事件，参见 组件间通信与事件                                                                                                      |          |\n| createSelectorQuery          |                                                                      | 创建一个 SelectorQuery 对象，选择器选取范围为这个组件实例内                                                                          |          |\n| createIntersectionObserver   |                                                                      | 创建一个 IntersectionObserver 对象，选择器选取范围为这个组件实例内                                                                   |          |\n| createMediaQueryObserver     |                                                                      | 创建一个 MediaQueryObserver 对象                                                                                                     | 2.11.1   |\n| selectComponent              | String selector                                                      | 使用选择器选择组件实例节点，返回匹配到的第一个组件实例对象(会被 wx://component-export 影响)                                          |          |\n| selectAllComponents          | String selector                                                      | 使用选择器选择组件实例节点，返回匹配到的全部组件实例对象组成的数组(会被 wx://component-export 影响)                                  |          |\n| selectOwnerComponent         |                                                                      | 选取当前组件节点所在的组件实例(即组件的引用者)，返回它的组件实例对象(会被 wx://component-export 影响)                                | 2.8.2    |\n| getRelationNodes             | String relationKey                                                   | 获取这个关系所对应的所有关联节点，参见 组件间关系                                                                                    |          |\n| groupSetData                 | Function callback                                                    | 立刻执行 callback ，其中的多个 setData 之间不会触发界面绘制(只有某些特殊场景中需要，如用于在不同组件同时 setData 时进行界面绘制同步) | 2.4.0    |\n| getTabBar                    |                                                                      | 返回当前页面的 custom-tab-bar 的组件实例，详见自定义 tabBar                                                                          | 2.6.2    |\n| getPageId                    |                                                                      | 返回页面标识符(一个字符串)，可以用来判断几个自定义组件实例是不是在同一个页面内                                                       | 2.7.1    |\n| animate                      | String selector, Array keyframes, Number duration, Function callback | 执行关键帧动画，详见动画                                                                                                             | 2.9.0    |\n| clearAnimation               | String selector, Object options, Function callback                   | 清除关键帧动画，详见动画                                                                                                             | 2.9.0    |\n| setUpdatePerformanceListener | Object options, Function listener                                    | 清除关键帧动画，详见动画                                                                                                             | 2.12.0   |\n\n::: details 代码示例\n\n[在开发者工具中预览效果](https://developers.weixin.qq.com/s/GqVTnvmq7g1m)\n\n```js\nComponent({\n  behaviors: [],\n\n  // 属性定义(详情参见下文)\n  properties: {\n    myProperty: {\n      // 属性名\n      type: String,\n      value: \"\",\n    },\n    myProperty2: String, // 简化的定义方式\n  },\n\n  data: {}, // 私有数据，可用于模板渲染\n\n  lifetimes: {\n    // 生命周期函数，可以为函数，或一个在methods段中定义的方法名\n    attached() {},\n    moved() {},\n    detached() {},\n  },\n\n  pageLifetimes: {\n    // 组件所在页面的生命周期函数\n    show() {},\n    hide() {},\n    resize() {},\n  },\n\n  methods: {\n    onMyButtonTap() {\n      this.setData({\n        // 更新属性和数据的方法与更新页面数据的方法类似\n      });\n    },\n    // 内部方法建议以下划线开头\n    _myPrivateMethod() {\n      // 这里将 data.A[0].B 设为 'myPrivateData'\n      this.setData({\n        \"A[0].B\": \"myPrivateData\",\n      });\n    },\n    _propertyChange(newVal, oldVal) {},\n  },\n});\n```\n\n:::\n\n## properties 定义\n\n| 定义段        | 类型     | 是否必填 | 描述                     | 最低版本 |\n| ------------- | -------- | -------- | ------------------------ | -------- |\n| type          |          | 是       | 属性的类型               |          |\n| optionalTypes | Array    | 否       | 属性的类型(可以指定多个) | 2.6.5    |\n| value         |          | 否       | 属性的初始值             |          |\n| observer      | Function | 否       | 属性值变化时的回调函数   |          |\n\n::: warning\n\n新版本基础库中不推荐使用 `observer` 字段，而是使用 Component 构造器的 `observers` 字段代替，它更加强大且性能更好。\n\n:::\n\n::: details 代码示例\n\n```js\nComponent({\n  properties: {\n    min: {\n      type: Number,\n      value: 0,\n    },\n    min: {\n      type: Number,\n      value: 0,\n      observer(newVal, oldVal) {\n        // 属性值变化时执行\n      },\n    },\n    lastLeaf: {\n      // 这个属性可以是 Number 、 String 、 Boolean 三种类型中的一种\n      type: Number,\n      optionalTypes: [String, Object],\n      value: 0,\n    },\n  },\n});\n```\n\n:::\n\n属性的类型可以为 `String` `Number` `Boolean` `Object` `Array` 其一，也可以为 `null` 表示不限制类型。\n\n::: tip\n\n多数情况下，属性最好指定一个确切的类型。这样，在 WXML 中以字面量指定属性值时，值可以获得一个确切的类型，如:\n\n```xml\n<custom-comp min=\"1\" max=\"5\" />\n```\n\n此时，由于自定义组件的对应属性被规定为 `Number` 类型， min 和 max 会被赋值为 `1` 和 `5` ，而非 `\"1\"` 和 `\"5\"` ，即:\n\n```js\nthis.data.min === 1; // true\nthis.data.max === 5; // true\n```\n\n:::\n\n::: info\n\n在 `properties` 定义段中，属性名采用驼峰写法(propertyName)；在 wxml 中，指定属性值时则对应使用连字符写法(component-tag-name property-name=\"attr value\")，应用于数据绑定时采用驼峰写法(attr=\"\")。\n\n:::\n\n### Bug & Tips\n\n- 使用 `this.data` 可以获取内部数据和属性值；但直接修改它不会将变更应用到界面上，应使用 setData 修改。\n- 生命周期函数无法在组件方法中通过 `this` 访问到。\n- 属性名应避免以 `data` 开头，即不要命名成 `dataXyz` 这样的形式，因为在 WXML 中， `data-xyz=\"\"` 会被作为节点 dataset 来处理，而不是组件属性。\n- 在一个组件的定义和使用时，组件的属性名和 data 字段相互间都不能冲突(尽管它们位于不同的定义段中)。\n- 从基础库 2.0.9 开始，对象类型的属性和 data 字段中可以包含函数类型的子字段，即可以通过对象类型的属性字段来传递函数。低于这一版本的基础库不支持这一特性。\n- bug : 对于 type 为 Object 或 Array 的属性，如果通过该组件自身的 `this.setData` 来改变属性值的一个子字段，则依旧会触发属性 observer ，且 observer 接收到的 `newVal` 是变化的那个子字段的值，`oldVal` 为空， `changedPath` 包含子字段的字段名相关信息；目前推荐使用 `observers` 定义段代替。\n","excerpt":"","title":"","headers":[{"level":2,"title":"参数","slug":"参数","link":"#参数","children":[]},{"level":2,"title":"properties 定义","slug":"properties-定义","link":"#properties-定义","children":[{"level":3,"title":"Bug & Tips","slug":"bug-tips","link":"#bug-tips","children":[]}]}]}}
