{"content":"<h2 id=\"简介\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#简介\"><span>简介</span></a></h2>\n<p>Bash 内置了 Readline 库，具有这个库提供的很多“行操作”功能，比如命令的自动补全，可以大大加快操作速度。</p>\n<p>这个库默认采用 Emacs 快捷键，也可以改成 Vi 快捷键。</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">set</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> -o</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> vi</span></span></code></pre>\n</div><p>下面的命令可以改回 Emacs 快捷键。</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">set</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> -o</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> emacs</span></span></code></pre>\n</div><p>如果想永久性更改编辑模式(Emacs / Vi)，可以将命令写在 <code v-pre>~/.inputrc</code> 文件，这个文件是 Readline 的配置文件。</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">set</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> editing-mode</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> vi</span></span></code></pre>\n</div><p>本章介绍的快捷键都属于 Emacs 模式。Vi 模式的快捷键，读者可以参考 Vi 编辑器的教程。</p>\n<p>Bash 默认开启这个库，但是允许关闭。</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">bash</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> --noediting</span></span></code></pre>\n</div><p>上面命令中，<code v-pre>--noediting</code> 参数关闭了 Readline 库，启动的 Bash 就不带有行操作功能。</p>\n<h2 id=\"光标移动\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#光标移动\"><span>光标移动</span></a></h2>\n<p>Readline 提供快速移动光标的快捷键。</p>\n<ul>\n<li><code v-pre>Ctrl + a</code>: 移到行首。</li>\n<li><code v-pre>Ctrl + b</code>: 向行首移动一个字符，与左箭头作用相同。</li>\n<li><code v-pre>Ctrl + e</code>: 移到行尾。</li>\n<li><code v-pre>Ctrl + f</code>: 向行尾移动一个字符，与右箭头作用相同。</li>\n<li><code v-pre>Alt + f</code>: 移动到当前单词的词尾。</li>\n<li><code v-pre>Alt + b</code>: 移动到当前单词的词首。</li>\n</ul>\n<p>上面快捷键的 Alt 键，也可以用 ESC 键代替。</p>\n<h2 id=\"清除屏幕\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#清除屏幕\"><span>清除屏幕</span></a></h2>\n<p><code v-pre>Ctrl + l</code> 快捷键可以清除屏幕，即将当前行移到屏幕的第一行，与 <code v-pre>clear</code> 命令作用相同。</p>\n<h2 id=\"编辑操作\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#编辑操作\"><span>编辑操作</span></a></h2>\n<p>下面的快捷键可以编辑命令行内容。</p>\n<ul>\n<li><code v-pre>Ctrl + d</code>: 删除光标位置的字符(delete)。</li>\n<li><code v-pre>Ctrl + w</code>: 删除光标前面的单词。</li>\n<li><code v-pre>Ctrl + t</code>: 光标位置的字符与它前面一位的字符交换位置(transpose)。</li>\n<li><code v-pre>Alt + t</code>: 光标位置的词与它前面一位的词交换位置(transpose)。</li>\n<li><code v-pre>Alt + l</code>: 将光标位置至词尾转为小写(lowercase)。</li>\n<li><code v-pre>Alt + u</code>: 将光标位置至词尾转为大写(uppercase)。</li>\n</ul>\n<p>使用 <code v-pre>Ctrl + d</code> 的时候，如果当前行没有任何字符，会导致退出当前 Shell，所以要小心。</p>\n<p>剪切和粘贴快捷键如下。</p>\n<ul>\n<li><code v-pre>Ctrl + k</code>: 剪切光标位置到行尾的文本。</li>\n<li><code v-pre>Ctrl + u</code>: 剪切光标位置到行首的文本。</li>\n<li><code v-pre>Alt + d</code>: 剪切光标位置到词尾的文本。</li>\n<li><code v-pre>Alt + Backspace</code>: 剪切光标位置到词首的文本。</li>\n<li><code v-pre>Ctrl + y</code>: 在光标位置粘贴文本。</li>\n</ul>\n<p>同样地，Alt 键可以用 Esc 键代替。</p>\n<h2 id=\"自动补全\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#自动补全\"><span>自动补全</span></a></h2>\n<p>命令输入到一半的时候，可以按一下 Tab 键，Readline 会自动补全命令或路径。比如，输入 <code v-pre>cle</code>，再按下 Tab 键，Bash 会自动将这个命令补全为 <code v-pre>clear</code>。</p>\n<p>如果符合条件的命令或路径有多个，就需要连续按两次 Tab 键，Bash 会提示所有符合条件的命令或路径。</p>\n<p>除了命令或路径，Tab 还可以补全其他值。如果一个值以 <code v-pre>$</code> 开头，则按下 Tab 键会补全变量；如果以 <code v-pre>~</code> 开头，则补全用户名；如果以 <code v-pre>@</code> 开头，则补全主机名(hostname)，主机名以列在 <code v-pre>/etc/hosts</code> 文件里面的主机为准。</p>\n<p>自动补全相关的快捷键如下。</p>\n<ul>\n<li>Tab: 完成自动补全。</li>\n<li><code v-pre>Alt + ?</code>: 列出可能的补全，与连按两次 Tab 键作用相同。</li>\n<li><code v-pre>Alt + /</code>: 尝试文件路径补全。</li>\n<li><code v-pre>Ctrl + x /</code>: 先按 <code v-pre>Ctrl + x</code>，再按 <code v-pre>/</code>，等同于 <code v-pre>Alt + ?</code>，列出可能的文件路径补全。</li>\n<li><code v-pre>Alt + !</code>: 命令补全。</li>\n<li><code v-pre>Ctrl + x !</code>: 先按 <code v-pre>Ctrl + x</code>，再按 <code v-pre>!</code>，等同于 <code v-pre>Alt + !</code>，命令补全。</li>\n<li><code v-pre>Alt + ~</code>: 用户名补全。</li>\n<li><code v-pre>Ctrl + x ~</code>: 先按 <code v-pre>Ctrl + x</code>，再按 <code v-pre>~</code>，等同于 <code v-pre>Alt + ~</code>，用户名补全。</li>\n<li><code v-pre>Alt + $</code>: 变量名补全。</li>\n<li><code v-pre>Ctrl + x $</code>: 先按 <code v-pre>Ctrl + x</code>，再按 <code v-pre>$</code>，等同于 <code v-pre>Alt + $</code>，变量名补全。</li>\n<li><code v-pre>Alt + @</code>: 主机名补全。</li>\n<li><code v-pre>Ctrl + x @</code>: 先按 <code v-pre>Ctrl + x</code>，再按 <code v-pre>@</code>，等同于 <code v-pre>Alt + @</code>，主机名补全。</li>\n<li><code v-pre>Alt + *</code>: 在命令行一次性插入所有可能的补全。</li>\n<li><code v-pre>Alt + Tab</code>: 尝试用 <code v-pre>.bash_history</code> 里面以前执行命令，进行补全。</li>\n</ul>\n<p>上面的 <code v-pre>Alt</code> 键也可以用 ESC 键代替。</p>\n<h2 id=\"操作历史\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#操作历史\"><span>操作历史</span></a></h2>\n<h3 id=\"基本用法\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#基本用法\"><span>基本用法</span></a></h3>\n<p>Bash 会保留用户的操作历史，即用户输入的每一条命令都会记录。退出当前 Shell 的时候，Bash 会将用户在当前 Shell 的操作历史写入 <code v-pre>~/.bash_history</code> 文件，该文件默认储存 500 个操作。</p>\n<p>环境变量 <code v-pre>HISTFILE</code> 总是指向这个文件。</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">$</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> echo</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> $HISTFILE</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">/home/me/.bash_history</span></span></code></pre>\n</div><p>有了操作历史以后，就可以使用方向键的 <code v-pre>↑</code> 和 <code v-pre>↓</code>，快速浏览上一条和下一条命令。</p>\n<p>下面的方法可以快速执行以前执行过的命令。</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">$</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> echo</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> Hello</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> World</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">Hello</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> World</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">$</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> echo</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> Goodbye</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">Goodbye</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">$</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> !e</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">echo</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> Goodbye</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">Goodbye</span></span></code></pre>\n</div><p>上面例子中，<code v-pre>!e</code> 表示找出操作历史之中，最近的那一条以 <code v-pre>e</code> 开头的命令并执行。Bash 会先输出那一条命令 <code v-pre>echo Goodbye</code>，然后直接执行。</p>\n<p>同理，<code v-pre>!echo</code> 也会执行最近一条以 <code v-pre>echo</code> 开头的命令。</p>\n<div class=\"language-bash line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">$</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> !echo</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">echo</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> Goodbye</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">Goodbye</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">$</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> !echo</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> H</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">echo</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> Goodbye</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> H</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">Goodbye</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> H</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">$</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> !echo</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> H</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> G</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">echo</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> Goodbye</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> H</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> G</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">Goodbye</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> H</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> G</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>注意，<code v-pre>!string</code> 语法只会匹配命令，不会匹配参数。所以 <code v-pre>!echo H</code> 不会执行 <code v-pre>echo Hello World</code>，而是会执行 <code v-pre>echo Goodbye</code>，并把参数 <code v-pre>H</code> 附加在这条命令之后。同理，<code v-pre>!echo H G</code> 也是等同于 <code v-pre>echo Goodbye</code> 命令之后附加 <code v-pre>H G</code>。</p>\n<p>最后，按下 <code v-pre>Ctrl + r</code> 会显示操作历史，可以用方向键上下移动，选择其中要执行的命令。也可以键入命令的首字母，Shell 就会自动在历史文件中，查询并显示匹配的结果。</p>\n<h3 id=\"history-命令\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#history-命令\"><span>history 命令</span></a></h3>\n<p><code v-pre>history</code> 命令能显示操作历史，即 <code v-pre>.bash_history</code> 文件的内容。</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">$</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> history</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">...</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">498</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> echo</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> Goodbye</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">499</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> ls</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> ~</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">500</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> cd</span></span></code></pre>\n</div><p>使用该命令，而不是直接读取 <code v-pre>.bash_history</code> 文件的好处是，它会在所有的操作前加上行号，最近的操作在最后面，行号最大。</p>\n<p>通过定制环境变量 <code v-pre>HISTTIMEFORMAT</code>，可以显示每个操作的时间。</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">$</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> export</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> HISTTIMEFORMAT='%F %T  '</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">$</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> history</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">1</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">  2013-06-09</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 10:40:12</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">   cat</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> /etc/issue</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">2</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">  2013-06-09</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 10:40:12</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">   clear</span></span></code></pre>\n</div><p>上面代码中，<code v-pre>%F</code> 相当于 <code v-pre>%Y - %m - %d</code>，<code v-pre>%T</code> 相当于 <code v-pre>%H : %M : %S</code>。</p>\n<p>只要设置 <code v-pre>HISTTIMEFORMAT</code> 这个环境变量，就会在 <code v-pre>.bash_history</code> 文件保存命令的执行时间戳。如果不设置，就不会保存时间戳。</p>\n<p>如果不希望保存本次操作的历史，可以设置环境变量 <code v-pre>HISTSIZE</code> 等于 0。</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">export</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> HISTSIZE</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">0</span></span></code></pre>\n</div><p>如果 <code v-pre>HISTSIZE=0</code> 写入用户主目录的 <code v-pre>~/.bashrc</code> 文件，那么就不会保留该用户的操作历史。如果写入 <code v-pre>/etc/profile</code>，整个系统都不会保留操作历史。</p>\n<p>如果想搜索某个以前执行的命令，可以配合 <code v-pre>grep</code> 命令搜索操作历史。</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">history</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> | </span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">grep</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> /usr/bin</span></span></code></pre>\n</div><p>上面命令返回 <code v-pre>.bash_history</code> 文件里面，那些包含 <code v-pre>/usr/bin</code> 的命令。</p>\n<p>操作历史的每一条记录都有编号。知道了命令的编号以后，可以用 <code v-pre>感叹号 + 编号</code> 执行该命令。如果想要执行 <code v-pre>.bash_history</code> 里面的第 8 条命令，可以像下面这样操作。</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">!</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">8</span></span></code></pre>\n</div><p><code v-pre>history</code> 命令的 <code v-pre>-c</code> 参数可以清除操作历史。</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">history</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> -c</span></span></code></pre>\n</div><h3 id=\"相关快捷键\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#相关快捷键\"><span>相关快捷键</span></a></h3>\n<p>下面是一些与操作历史相关的快捷键。</p>\n<ul>\n<li><code v-pre>Ctrl + p</code>: 显示上一个命令，与向上箭头效果相同(previous)。</li>\n<li><code v-pre>Ctrl + n</code>: 显示下一个命令，与向下箭头效果相同(next)。</li>\n<li><code v-pre>Alt + &lt;</code>: 显示第一个命令。</li>\n<li><code v-pre>Alt + &gt;</code>: 显示最后一个命令，即当前的命令。</li>\n<li><code v-pre>Ctrl + o</code>: 执行历史文件里面的当前条目，并自动显示下一条命令。这对重复执行某个序列的命令很有帮助。</li>\n</ul>\n<p>感叹号<code v-pre>!</code>的快捷键如下。</p>\n<ul>\n<li><code v-pre>!!</code>: 执行上一个命令。</li>\n<li><code v-pre>!n</code>: 执行历史文件里面行号为 <code v-pre>n</code> 的命令。</li>\n<li><code v-pre>!-n</code>: 执行当前命令之前 <code v-pre>n</code> 条的命令。</li>\n<li><code v-pre>!string</code>: 执行最近一个以指定字符串 <code v-pre>string</code> 开头的命令。</li>\n<li><code v-pre>!?string</code>: 执行最近一条包含字符串 <code v-pre>string</code> 的命令。</li>\n<li><code v-pre>^string1^string2</code>: 执行最近一条包含 <code v-pre>string1</code> 的命令，将其替换成 <code v-pre>string2</code>。</li>\n</ul>\n<h2 id=\"其他快捷键\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#其他快捷键\"><span>其他快捷键</span></a></h2>\n<ul>\n<li><code v-pre>Ctrl + j</code>: 等同于回车键(LINEFEED)。</li>\n<li><code v-pre>Ctrl + m</code>: 等同于回车键(CARRIAGE RETURN)。</li>\n<li><code v-pre>Ctrl + o</code>: 等同于回车键，并展示操作历史的下一个命令。</li>\n<li><code v-pre>Ctrl + v</code>: 将下一个输入的特殊字符变成字面量，比如回车变成 <code v-pre>^M</code>。</li>\n<li><code v-pre>Ctrl + [</code>: 等同于 ESC。</li>\n<li><code v-pre>Alt + .</code>: 插入上一个命令的最后一个词。</li>\n<li><code v-pre>Alt + _</code>: 等同于 <code v-pre>Alt + .</code>。</li>\n</ul>\n<p>上面的 <code v-pre>Alt + .</code> 快捷键，对于很长的文件路径，有时会非常方便。因为 Unix 命令的最后一个参数通常是文件路径。</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">mkdir</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> foo_bar</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">cd</span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"> #按下 Alt + .</span></span></code></pre>\n</div><p>上面例子中，在 <code v-pre>cd</code> 命令后按下 <code v-pre>Alt + .</code>，就会自动插入 <code v-pre>foo_bar</code>。</p>\n","env":{"base":"/","filePath":"/Users/carson/Desktop/Mister-Hope.github.io-main/src/linux/bash/readline.md","filePathRelative":"linux/bash/readline.md","frontmatter":{"date":"2020-05-04T00:00:00.000Z","title":"Bash 行操作","icon":"line","author":"阮一峰","category":"Linux","tag":["Bash"],"copyright":"本教程采用<a href=\"https://creativecommons.org/licenses/by-sa/3.0/deed.zh\" rel=\"noopener noreferrer\" target=\"_blank\">知识共享 署名-相同方式共享 3.0协议</a>"},"sfcBlocks":{"template":{"type":"template","content":"<template><h2 id=\"简介\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#简介\"><span>简介</span></a></h2>\n<p>Bash 内置了 Readline 库，具有这个库提供的很多“行操作”功能，比如命令的自动补全，可以大大加快操作速度。</p>\n<p>这个库默认采用 Emacs 快捷键，也可以改成 Vi 快捷键。</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">set</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> -o</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> vi</span></span></code></pre>\n</div><p>下面的命令可以改回 Emacs 快捷键。</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">set</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> -o</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> emacs</span></span></code></pre>\n</div><p>如果想永久性更改编辑模式(Emacs / Vi)，可以将命令写在 <code v-pre>~/.inputrc</code> 文件，这个文件是 Readline 的配置文件。</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">set</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> editing-mode</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> vi</span></span></code></pre>\n</div><p>本章介绍的快捷键都属于 Emacs 模式。Vi 模式的快捷键，读者可以参考 Vi 编辑器的教程。</p>\n<p>Bash 默认开启这个库，但是允许关闭。</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">bash</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> --noediting</span></span></code></pre>\n</div><p>上面命令中，<code v-pre>--noediting</code> 参数关闭了 Readline 库，启动的 Bash 就不带有行操作功能。</p>\n<h2 id=\"光标移动\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#光标移动\"><span>光标移动</span></a></h2>\n<p>Readline 提供快速移动光标的快捷键。</p>\n<ul>\n<li><code v-pre>Ctrl + a</code>: 移到行首。</li>\n<li><code v-pre>Ctrl + b</code>: 向行首移动一个字符，与左箭头作用相同。</li>\n<li><code v-pre>Ctrl + e</code>: 移到行尾。</li>\n<li><code v-pre>Ctrl + f</code>: 向行尾移动一个字符，与右箭头作用相同。</li>\n<li><code v-pre>Alt + f</code>: 移动到当前单词的词尾。</li>\n<li><code v-pre>Alt + b</code>: 移动到当前单词的词首。</li>\n</ul>\n<p>上面快捷键的 Alt 键，也可以用 ESC 键代替。</p>\n<h2 id=\"清除屏幕\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#清除屏幕\"><span>清除屏幕</span></a></h2>\n<p><code v-pre>Ctrl + l</code> 快捷键可以清除屏幕，即将当前行移到屏幕的第一行，与 <code v-pre>clear</code> 命令作用相同。</p>\n<h2 id=\"编辑操作\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#编辑操作\"><span>编辑操作</span></a></h2>\n<p>下面的快捷键可以编辑命令行内容。</p>\n<ul>\n<li><code v-pre>Ctrl + d</code>: 删除光标位置的字符(delete)。</li>\n<li><code v-pre>Ctrl + w</code>: 删除光标前面的单词。</li>\n<li><code v-pre>Ctrl + t</code>: 光标位置的字符与它前面一位的字符交换位置(transpose)。</li>\n<li><code v-pre>Alt + t</code>: 光标位置的词与它前面一位的词交换位置(transpose)。</li>\n<li><code v-pre>Alt + l</code>: 将光标位置至词尾转为小写(lowercase)。</li>\n<li><code v-pre>Alt + u</code>: 将光标位置至词尾转为大写(uppercase)。</li>\n</ul>\n<p>使用 <code v-pre>Ctrl + d</code> 的时候，如果当前行没有任何字符，会导致退出当前 Shell，所以要小心。</p>\n<p>剪切和粘贴快捷键如下。</p>\n<ul>\n<li><code v-pre>Ctrl + k</code>: 剪切光标位置到行尾的文本。</li>\n<li><code v-pre>Ctrl + u</code>: 剪切光标位置到行首的文本。</li>\n<li><code v-pre>Alt + d</code>: 剪切光标位置到词尾的文本。</li>\n<li><code v-pre>Alt + Backspace</code>: 剪切光标位置到词首的文本。</li>\n<li><code v-pre>Ctrl + y</code>: 在光标位置粘贴文本。</li>\n</ul>\n<p>同样地，Alt 键可以用 Esc 键代替。</p>\n<h2 id=\"自动补全\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#自动补全\"><span>自动补全</span></a></h2>\n<p>命令输入到一半的时候，可以按一下 Tab 键，Readline 会自动补全命令或路径。比如，输入 <code v-pre>cle</code>，再按下 Tab 键，Bash 会自动将这个命令补全为 <code v-pre>clear</code>。</p>\n<p>如果符合条件的命令或路径有多个，就需要连续按两次 Tab 键，Bash 会提示所有符合条件的命令或路径。</p>\n<p>除了命令或路径，Tab 还可以补全其他值。如果一个值以 <code v-pre>$</code> 开头，则按下 Tab 键会补全变量；如果以 <code v-pre>~</code> 开头，则补全用户名；如果以 <code v-pre>@</code> 开头，则补全主机名(hostname)，主机名以列在 <code v-pre>/etc/hosts</code> 文件里面的主机为准。</p>\n<p>自动补全相关的快捷键如下。</p>\n<ul>\n<li>Tab: 完成自动补全。</li>\n<li><code v-pre>Alt + ?</code>: 列出可能的补全，与连按两次 Tab 键作用相同。</li>\n<li><code v-pre>Alt + /</code>: 尝试文件路径补全。</li>\n<li><code v-pre>Ctrl + x /</code>: 先按 <code v-pre>Ctrl + x</code>，再按 <code v-pre>/</code>，等同于 <code v-pre>Alt + ?</code>，列出可能的文件路径补全。</li>\n<li><code v-pre>Alt + !</code>: 命令补全。</li>\n<li><code v-pre>Ctrl + x !</code>: 先按 <code v-pre>Ctrl + x</code>，再按 <code v-pre>!</code>，等同于 <code v-pre>Alt + !</code>，命令补全。</li>\n<li><code v-pre>Alt + ~</code>: 用户名补全。</li>\n<li><code v-pre>Ctrl + x ~</code>: 先按 <code v-pre>Ctrl + x</code>，再按 <code v-pre>~</code>，等同于 <code v-pre>Alt + ~</code>，用户名补全。</li>\n<li><code v-pre>Alt + $</code>: 变量名补全。</li>\n<li><code v-pre>Ctrl + x $</code>: 先按 <code v-pre>Ctrl + x</code>，再按 <code v-pre>$</code>，等同于 <code v-pre>Alt + $</code>，变量名补全。</li>\n<li><code v-pre>Alt + @</code>: 主机名补全。</li>\n<li><code v-pre>Ctrl + x @</code>: 先按 <code v-pre>Ctrl + x</code>，再按 <code v-pre>@</code>，等同于 <code v-pre>Alt + @</code>，主机名补全。</li>\n<li><code v-pre>Alt + *</code>: 在命令行一次性插入所有可能的补全。</li>\n<li><code v-pre>Alt + Tab</code>: 尝试用 <code v-pre>.bash_history</code> 里面以前执行命令，进行补全。</li>\n</ul>\n<p>上面的 <code v-pre>Alt</code> 键也可以用 ESC 键代替。</p>\n<h2 id=\"操作历史\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#操作历史\"><span>操作历史</span></a></h2>\n<h3 id=\"基本用法\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#基本用法\"><span>基本用法</span></a></h3>\n<p>Bash 会保留用户的操作历史，即用户输入的每一条命令都会记录。退出当前 Shell 的时候，Bash 会将用户在当前 Shell 的操作历史写入 <code v-pre>~/.bash_history</code> 文件，该文件默认储存 500 个操作。</p>\n<p>环境变量 <code v-pre>HISTFILE</code> 总是指向这个文件。</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">$</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> echo</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> $HISTFILE</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">/home/me/.bash_history</span></span></code></pre>\n</div><p>有了操作历史以后，就可以使用方向键的 <code v-pre>↑</code> 和 <code v-pre>↓</code>，快速浏览上一条和下一条命令。</p>\n<p>下面的方法可以快速执行以前执行过的命令。</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">$</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> echo</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> Hello</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> World</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">Hello</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> World</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">$</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> echo</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> Goodbye</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">Goodbye</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">$</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> !e</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">echo</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> Goodbye</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">Goodbye</span></span></code></pre>\n</div><p>上面例子中，<code v-pre>!e</code> 表示找出操作历史之中，最近的那一条以 <code v-pre>e</code> 开头的命令并执行。Bash 会先输出那一条命令 <code v-pre>echo Goodbye</code>，然后直接执行。</p>\n<p>同理，<code v-pre>!echo</code> 也会执行最近一条以 <code v-pre>echo</code> 开头的命令。</p>\n<div class=\"language-bash line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">$</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> !echo</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">echo</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> Goodbye</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">Goodbye</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">$</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> !echo</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> H</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">echo</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> Goodbye</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> H</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">Goodbye</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> H</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">$</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> !echo</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> H</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> G</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">echo</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> Goodbye</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> H</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> G</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">Goodbye</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> H</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> G</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>注意，<code v-pre>!string</code> 语法只会匹配命令，不会匹配参数。所以 <code v-pre>!echo H</code> 不会执行 <code v-pre>echo Hello World</code>，而是会执行 <code v-pre>echo Goodbye</code>，并把参数 <code v-pre>H</code> 附加在这条命令之后。同理，<code v-pre>!echo H G</code> 也是等同于 <code v-pre>echo Goodbye</code> 命令之后附加 <code v-pre>H G</code>。</p>\n<p>最后，按下 <code v-pre>Ctrl + r</code> 会显示操作历史，可以用方向键上下移动，选择其中要执行的命令。也可以键入命令的首字母，Shell 就会自动在历史文件中，查询并显示匹配的结果。</p>\n<h3 id=\"history-命令\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#history-命令\"><span>history 命令</span></a></h3>\n<p><code v-pre>history</code> 命令能显示操作历史，即 <code v-pre>.bash_history</code> 文件的内容。</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">$</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> history</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">...</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">498</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> echo</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> Goodbye</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">499</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> ls</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> ~</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">500</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> cd</span></span></code></pre>\n</div><p>使用该命令，而不是直接读取 <code v-pre>.bash_history</code> 文件的好处是，它会在所有的操作前加上行号，最近的操作在最后面，行号最大。</p>\n<p>通过定制环境变量 <code v-pre>HISTTIMEFORMAT</code>，可以显示每个操作的时间。</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">$</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> export</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> HISTTIMEFORMAT='%F %T  '</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">$</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> history</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">1</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">  2013-06-09</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 10:40:12</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">   cat</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> /etc/issue</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">2</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">  2013-06-09</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 10:40:12</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">   clear</span></span></code></pre>\n</div><p>上面代码中，<code v-pre>%F</code> 相当于 <code v-pre>%Y - %m - %d</code>，<code v-pre>%T</code> 相当于 <code v-pre>%H : %M : %S</code>。</p>\n<p>只要设置 <code v-pre>HISTTIMEFORMAT</code> 这个环境变量，就会在 <code v-pre>.bash_history</code> 文件保存命令的执行时间戳。如果不设置，就不会保存时间戳。</p>\n<p>如果不希望保存本次操作的历史，可以设置环境变量 <code v-pre>HISTSIZE</code> 等于 0。</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">export</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> HISTSIZE</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">0</span></span></code></pre>\n</div><p>如果 <code v-pre>HISTSIZE=0</code> 写入用户主目录的 <code v-pre>~/.bashrc</code> 文件，那么就不会保留该用户的操作历史。如果写入 <code v-pre>/etc/profile</code>，整个系统都不会保留操作历史。</p>\n<p>如果想搜索某个以前执行的命令，可以配合 <code v-pre>grep</code> 命令搜索操作历史。</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">history</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> | </span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">grep</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> /usr/bin</span></span></code></pre>\n</div><p>上面命令返回 <code v-pre>.bash_history</code> 文件里面，那些包含 <code v-pre>/usr/bin</code> 的命令。</p>\n<p>操作历史的每一条记录都有编号。知道了命令的编号以后，可以用 <code v-pre>感叹号 + 编号</code> 执行该命令。如果想要执行 <code v-pre>.bash_history</code> 里面的第 8 条命令，可以像下面这样操作。</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">!</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">8</span></span></code></pre>\n</div><p><code v-pre>history</code> 命令的 <code v-pre>-c</code> 参数可以清除操作历史。</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">history</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> -c</span></span></code></pre>\n</div><h3 id=\"相关快捷键\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#相关快捷键\"><span>相关快捷键</span></a></h3>\n<p>下面是一些与操作历史相关的快捷键。</p>\n<ul>\n<li><code v-pre>Ctrl + p</code>: 显示上一个命令，与向上箭头效果相同(previous)。</li>\n<li><code v-pre>Ctrl + n</code>: 显示下一个命令，与向下箭头效果相同(next)。</li>\n<li><code v-pre>Alt + &lt;</code>: 显示第一个命令。</li>\n<li><code v-pre>Alt + &gt;</code>: 显示最后一个命令，即当前的命令。</li>\n<li><code v-pre>Ctrl + o</code>: 执行历史文件里面的当前条目，并自动显示下一条命令。这对重复执行某个序列的命令很有帮助。</li>\n</ul>\n<p>感叹号<code v-pre>!</code>的快捷键如下。</p>\n<ul>\n<li><code v-pre>!!</code>: 执行上一个命令。</li>\n<li><code v-pre>!n</code>: 执行历史文件里面行号为 <code v-pre>n</code> 的命令。</li>\n<li><code v-pre>!-n</code>: 执行当前命令之前 <code v-pre>n</code> 条的命令。</li>\n<li><code v-pre>!string</code>: 执行最近一个以指定字符串 <code v-pre>string</code> 开头的命令。</li>\n<li><code v-pre>!?string</code>: 执行最近一条包含字符串 <code v-pre>string</code> 的命令。</li>\n<li><code v-pre>^string1^string2</code>: 执行最近一条包含 <code v-pre>string1</code> 的命令，将其替换成 <code v-pre>string2</code>。</li>\n</ul>\n<h2 id=\"其他快捷键\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#其他快捷键\"><span>其他快捷键</span></a></h2>\n<ul>\n<li><code v-pre>Ctrl + j</code>: 等同于回车键(LINEFEED)。</li>\n<li><code v-pre>Ctrl + m</code>: 等同于回车键(CARRIAGE RETURN)。</li>\n<li><code v-pre>Ctrl + o</code>: 等同于回车键，并展示操作历史的下一个命令。</li>\n<li><code v-pre>Ctrl + v</code>: 将下一个输入的特殊字符变成字面量，比如回车变成 <code v-pre>^M</code>。</li>\n<li><code v-pre>Ctrl + [</code>: 等同于 ESC。</li>\n<li><code v-pre>Alt + .</code>: 插入上一个命令的最后一个词。</li>\n<li><code v-pre>Alt + _</code>: 等同于 <code v-pre>Alt + .</code>。</li>\n</ul>\n<p>上面的 <code v-pre>Alt + .</code> 快捷键，对于很长的文件路径，有时会非常方便。因为 Unix 命令的最后一个参数通常是文件路径。</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">mkdir</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> foo_bar</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">cd</span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"> #按下 Alt + .</span></span></code></pre>\n</div><p>上面例子中，在 <code v-pre>cd</code> 命令后按下 <code v-pre>Alt + .</code>，就会自动插入 <code v-pre>foo_bar</code>。</p>\n</template>","contentStripped":"<h2 id=\"简介\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#简介\"><span>简介</span></a></h2>\n<p>Bash 内置了 Readline 库，具有这个库提供的很多“行操作”功能，比如命令的自动补全，可以大大加快操作速度。</p>\n<p>这个库默认采用 Emacs 快捷键，也可以改成 Vi 快捷键。</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">set</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> -o</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> vi</span></span></code></pre>\n</div><p>下面的命令可以改回 Emacs 快捷键。</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">set</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> -o</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> emacs</span></span></code></pre>\n</div><p>如果想永久性更改编辑模式(Emacs / Vi)，可以将命令写在 <code v-pre>~/.inputrc</code> 文件，这个文件是 Readline 的配置文件。</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">set</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> editing-mode</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> vi</span></span></code></pre>\n</div><p>本章介绍的快捷键都属于 Emacs 模式。Vi 模式的快捷键，读者可以参考 Vi 编辑器的教程。</p>\n<p>Bash 默认开启这个库，但是允许关闭。</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">bash</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> --noediting</span></span></code></pre>\n</div><p>上面命令中，<code v-pre>--noediting</code> 参数关闭了 Readline 库，启动的 Bash 就不带有行操作功能。</p>\n<h2 id=\"光标移动\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#光标移动\"><span>光标移动</span></a></h2>\n<p>Readline 提供快速移动光标的快捷键。</p>\n<ul>\n<li><code v-pre>Ctrl + a</code>: 移到行首。</li>\n<li><code v-pre>Ctrl + b</code>: 向行首移动一个字符，与左箭头作用相同。</li>\n<li><code v-pre>Ctrl + e</code>: 移到行尾。</li>\n<li><code v-pre>Ctrl + f</code>: 向行尾移动一个字符，与右箭头作用相同。</li>\n<li><code v-pre>Alt + f</code>: 移动到当前单词的词尾。</li>\n<li><code v-pre>Alt + b</code>: 移动到当前单词的词首。</li>\n</ul>\n<p>上面快捷键的 Alt 键，也可以用 ESC 键代替。</p>\n<h2 id=\"清除屏幕\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#清除屏幕\"><span>清除屏幕</span></a></h2>\n<p><code v-pre>Ctrl + l</code> 快捷键可以清除屏幕，即将当前行移到屏幕的第一行，与 <code v-pre>clear</code> 命令作用相同。</p>\n<h2 id=\"编辑操作\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#编辑操作\"><span>编辑操作</span></a></h2>\n<p>下面的快捷键可以编辑命令行内容。</p>\n<ul>\n<li><code v-pre>Ctrl + d</code>: 删除光标位置的字符(delete)。</li>\n<li><code v-pre>Ctrl + w</code>: 删除光标前面的单词。</li>\n<li><code v-pre>Ctrl + t</code>: 光标位置的字符与它前面一位的字符交换位置(transpose)。</li>\n<li><code v-pre>Alt + t</code>: 光标位置的词与它前面一位的词交换位置(transpose)。</li>\n<li><code v-pre>Alt + l</code>: 将光标位置至词尾转为小写(lowercase)。</li>\n<li><code v-pre>Alt + u</code>: 将光标位置至词尾转为大写(uppercase)。</li>\n</ul>\n<p>使用 <code v-pre>Ctrl + d</code> 的时候，如果当前行没有任何字符，会导致退出当前 Shell，所以要小心。</p>\n<p>剪切和粘贴快捷键如下。</p>\n<ul>\n<li><code v-pre>Ctrl + k</code>: 剪切光标位置到行尾的文本。</li>\n<li><code v-pre>Ctrl + u</code>: 剪切光标位置到行首的文本。</li>\n<li><code v-pre>Alt + d</code>: 剪切光标位置到词尾的文本。</li>\n<li><code v-pre>Alt + Backspace</code>: 剪切光标位置到词首的文本。</li>\n<li><code v-pre>Ctrl + y</code>: 在光标位置粘贴文本。</li>\n</ul>\n<p>同样地，Alt 键可以用 Esc 键代替。</p>\n<h2 id=\"自动补全\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#自动补全\"><span>自动补全</span></a></h2>\n<p>命令输入到一半的时候，可以按一下 Tab 键，Readline 会自动补全命令或路径。比如，输入 <code v-pre>cle</code>，再按下 Tab 键，Bash 会自动将这个命令补全为 <code v-pre>clear</code>。</p>\n<p>如果符合条件的命令或路径有多个，就需要连续按两次 Tab 键，Bash 会提示所有符合条件的命令或路径。</p>\n<p>除了命令或路径，Tab 还可以补全其他值。如果一个值以 <code v-pre>$</code> 开头，则按下 Tab 键会补全变量；如果以 <code v-pre>~</code> 开头，则补全用户名；如果以 <code v-pre>@</code> 开头，则补全主机名(hostname)，主机名以列在 <code v-pre>/etc/hosts</code> 文件里面的主机为准。</p>\n<p>自动补全相关的快捷键如下。</p>\n<ul>\n<li>Tab: 完成自动补全。</li>\n<li><code v-pre>Alt + ?</code>: 列出可能的补全，与连按两次 Tab 键作用相同。</li>\n<li><code v-pre>Alt + /</code>: 尝试文件路径补全。</li>\n<li><code v-pre>Ctrl + x /</code>: 先按 <code v-pre>Ctrl + x</code>，再按 <code v-pre>/</code>，等同于 <code v-pre>Alt + ?</code>，列出可能的文件路径补全。</li>\n<li><code v-pre>Alt + !</code>: 命令补全。</li>\n<li><code v-pre>Ctrl + x !</code>: 先按 <code v-pre>Ctrl + x</code>，再按 <code v-pre>!</code>，等同于 <code v-pre>Alt + !</code>，命令补全。</li>\n<li><code v-pre>Alt + ~</code>: 用户名补全。</li>\n<li><code v-pre>Ctrl + x ~</code>: 先按 <code v-pre>Ctrl + x</code>，再按 <code v-pre>~</code>，等同于 <code v-pre>Alt + ~</code>，用户名补全。</li>\n<li><code v-pre>Alt + $</code>: 变量名补全。</li>\n<li><code v-pre>Ctrl + x $</code>: 先按 <code v-pre>Ctrl + x</code>，再按 <code v-pre>$</code>，等同于 <code v-pre>Alt + $</code>，变量名补全。</li>\n<li><code v-pre>Alt + @</code>: 主机名补全。</li>\n<li><code v-pre>Ctrl + x @</code>: 先按 <code v-pre>Ctrl + x</code>，再按 <code v-pre>@</code>，等同于 <code v-pre>Alt + @</code>，主机名补全。</li>\n<li><code v-pre>Alt + *</code>: 在命令行一次性插入所有可能的补全。</li>\n<li><code v-pre>Alt + Tab</code>: 尝试用 <code v-pre>.bash_history</code> 里面以前执行命令，进行补全。</li>\n</ul>\n<p>上面的 <code v-pre>Alt</code> 键也可以用 ESC 键代替。</p>\n<h2 id=\"操作历史\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#操作历史\"><span>操作历史</span></a></h2>\n<h3 id=\"基本用法\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#基本用法\"><span>基本用法</span></a></h3>\n<p>Bash 会保留用户的操作历史，即用户输入的每一条命令都会记录。退出当前 Shell 的时候，Bash 会将用户在当前 Shell 的操作历史写入 <code v-pre>~/.bash_history</code> 文件，该文件默认储存 500 个操作。</p>\n<p>环境变量 <code v-pre>HISTFILE</code> 总是指向这个文件。</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">$</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> echo</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> $HISTFILE</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">/home/me/.bash_history</span></span></code></pre>\n</div><p>有了操作历史以后，就可以使用方向键的 <code v-pre>↑</code> 和 <code v-pre>↓</code>，快速浏览上一条和下一条命令。</p>\n<p>下面的方法可以快速执行以前执行过的命令。</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">$</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> echo</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> Hello</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> World</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">Hello</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> World</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">$</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> echo</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> Goodbye</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">Goodbye</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">$</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> !e</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">echo</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> Goodbye</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">Goodbye</span></span></code></pre>\n</div><p>上面例子中，<code v-pre>!e</code> 表示找出操作历史之中，最近的那一条以 <code v-pre>e</code> 开头的命令并执行。Bash 会先输出那一条命令 <code v-pre>echo Goodbye</code>，然后直接执行。</p>\n<p>同理，<code v-pre>!echo</code> 也会执行最近一条以 <code v-pre>echo</code> 开头的命令。</p>\n<div class=\"language-bash line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">$</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> !echo</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">echo</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> Goodbye</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">Goodbye</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">$</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> !echo</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> H</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">echo</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> Goodbye</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> H</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">Goodbye</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> H</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">$</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> !echo</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> H</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> G</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">echo</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> Goodbye</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> H</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> G</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">Goodbye</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> H</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> G</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>注意，<code v-pre>!string</code> 语法只会匹配命令，不会匹配参数。所以 <code v-pre>!echo H</code> 不会执行 <code v-pre>echo Hello World</code>，而是会执行 <code v-pre>echo Goodbye</code>，并把参数 <code v-pre>H</code> 附加在这条命令之后。同理，<code v-pre>!echo H G</code> 也是等同于 <code v-pre>echo Goodbye</code> 命令之后附加 <code v-pre>H G</code>。</p>\n<p>最后，按下 <code v-pre>Ctrl + r</code> 会显示操作历史，可以用方向键上下移动，选择其中要执行的命令。也可以键入命令的首字母，Shell 就会自动在历史文件中，查询并显示匹配的结果。</p>\n<h3 id=\"history-命令\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#history-命令\"><span>history 命令</span></a></h3>\n<p><code v-pre>history</code> 命令能显示操作历史，即 <code v-pre>.bash_history</code> 文件的内容。</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">$</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> history</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">...</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">498</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> echo</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> Goodbye</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">499</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> ls</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> ~</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">500</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> cd</span></span></code></pre>\n</div><p>使用该命令，而不是直接读取 <code v-pre>.bash_history</code> 文件的好处是，它会在所有的操作前加上行号，最近的操作在最后面，行号最大。</p>\n<p>通过定制环境变量 <code v-pre>HISTTIMEFORMAT</code>，可以显示每个操作的时间。</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">$</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> export</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> HISTTIMEFORMAT='%F %T  '</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">$</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> history</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">1</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">  2013-06-09</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 10:40:12</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">   cat</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> /etc/issue</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">2</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">  2013-06-09</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 10:40:12</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">   clear</span></span></code></pre>\n</div><p>上面代码中，<code v-pre>%F</code> 相当于 <code v-pre>%Y - %m - %d</code>，<code v-pre>%T</code> 相当于 <code v-pre>%H : %M : %S</code>。</p>\n<p>只要设置 <code v-pre>HISTTIMEFORMAT</code> 这个环境变量，就会在 <code v-pre>.bash_history</code> 文件保存命令的执行时间戳。如果不设置，就不会保存时间戳。</p>\n<p>如果不希望保存本次操作的历史，可以设置环境变量 <code v-pre>HISTSIZE</code> 等于 0。</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">export</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> HISTSIZE</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">0</span></span></code></pre>\n</div><p>如果 <code v-pre>HISTSIZE=0</code> 写入用户主目录的 <code v-pre>~/.bashrc</code> 文件，那么就不会保留该用户的操作历史。如果写入 <code v-pre>/etc/profile</code>，整个系统都不会保留操作历史。</p>\n<p>如果想搜索某个以前执行的命令，可以配合 <code v-pre>grep</code> 命令搜索操作历史。</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">history</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> | </span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">grep</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> /usr/bin</span></span></code></pre>\n</div><p>上面命令返回 <code v-pre>.bash_history</code> 文件里面，那些包含 <code v-pre>/usr/bin</code> 的命令。</p>\n<p>操作历史的每一条记录都有编号。知道了命令的编号以后，可以用 <code v-pre>感叹号 + 编号</code> 执行该命令。如果想要执行 <code v-pre>.bash_history</code> 里面的第 8 条命令，可以像下面这样操作。</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">!</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">8</span></span></code></pre>\n</div><p><code v-pre>history</code> 命令的 <code v-pre>-c</code> 参数可以清除操作历史。</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">history</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> -c</span></span></code></pre>\n</div><h3 id=\"相关快捷键\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#相关快捷键\"><span>相关快捷键</span></a></h3>\n<p>下面是一些与操作历史相关的快捷键。</p>\n<ul>\n<li><code v-pre>Ctrl + p</code>: 显示上一个命令，与向上箭头效果相同(previous)。</li>\n<li><code v-pre>Ctrl + n</code>: 显示下一个命令，与向下箭头效果相同(next)。</li>\n<li><code v-pre>Alt + &lt;</code>: 显示第一个命令。</li>\n<li><code v-pre>Alt + &gt;</code>: 显示最后一个命令，即当前的命令。</li>\n<li><code v-pre>Ctrl + o</code>: 执行历史文件里面的当前条目，并自动显示下一条命令。这对重复执行某个序列的命令很有帮助。</li>\n</ul>\n<p>感叹号<code v-pre>!</code>的快捷键如下。</p>\n<ul>\n<li><code v-pre>!!</code>: 执行上一个命令。</li>\n<li><code v-pre>!n</code>: 执行历史文件里面行号为 <code v-pre>n</code> 的命令。</li>\n<li><code v-pre>!-n</code>: 执行当前命令之前 <code v-pre>n</code> 条的命令。</li>\n<li><code v-pre>!string</code>: 执行最近一个以指定字符串 <code v-pre>string</code> 开头的命令。</li>\n<li><code v-pre>!?string</code>: 执行最近一条包含字符串 <code v-pre>string</code> 的命令。</li>\n<li><code v-pre>^string1^string2</code>: 执行最近一条包含 <code v-pre>string1</code> 的命令，将其替换成 <code v-pre>string2</code>。</li>\n</ul>\n<h2 id=\"其他快捷键\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#其他快捷键\"><span>其他快捷键</span></a></h2>\n<ul>\n<li><code v-pre>Ctrl + j</code>: 等同于回车键(LINEFEED)。</li>\n<li><code v-pre>Ctrl + m</code>: 等同于回车键(CARRIAGE RETURN)。</li>\n<li><code v-pre>Ctrl + o</code>: 等同于回车键，并展示操作历史的下一个命令。</li>\n<li><code v-pre>Ctrl + v</code>: 将下一个输入的特殊字符变成字面量，比如回车变成 <code v-pre>^M</code>。</li>\n<li><code v-pre>Ctrl + [</code>: 等同于 ESC。</li>\n<li><code v-pre>Alt + .</code>: 插入上一个命令的最后一个词。</li>\n<li><code v-pre>Alt + _</code>: 等同于 <code v-pre>Alt + .</code>。</li>\n</ul>\n<p>上面的 <code v-pre>Alt + .</code> 快捷键，对于很长的文件路径，有时会非常方便。因为 Unix 命令的最后一个参数通常是文件路径。</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">mkdir</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> foo_bar</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">cd</span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"> #按下 Alt + .</span></span></code></pre>\n</div><p>上面例子中，在 <code v-pre>cd</code> 命令后按下 <code v-pre>Alt + .</code>，就会自动插入 <code v-pre>foo_bar</code>。</p>\n","tagOpen":"<template>","tagClose":"</template>"},"script":null,"scriptSetup":null,"scripts":[],"styles":[],"customBlocks":[]},"content":"\n## 简介\n\nBash 内置了 Readline 库，具有这个库提供的很多“行操作”功能，比如命令的自动补全，可以大大加快操作速度。\n\n这个库默认采用 Emacs 快捷键，也可以改成 Vi 快捷键。\n\n```bash\nset -o vi\n```\n\n下面的命令可以改回 Emacs 快捷键。\n\n```bash\nset -o emacs\n```\n\n如果想永久性更改编辑模式(Emacs / Vi)，可以将命令写在 `~/.inputrc` 文件，这个文件是 Readline 的配置文件。\n\n```bash\nset editing-mode vi\n```\n\n本章介绍的快捷键都属于 Emacs 模式。Vi 模式的快捷键，读者可以参考 Vi 编辑器的教程。\n\nBash 默认开启这个库，但是允许关闭。\n\n```bash\nbash --noediting\n```\n\n上面命令中，`--noediting` 参数关闭了 Readline 库，启动的 Bash 就不带有行操作功能。\n\n## 光标移动\n\nReadline 提供快速移动光标的快捷键。\n\n- `Ctrl + a`: 移到行首。\n- `Ctrl + b`: 向行首移动一个字符，与左箭头作用相同。\n- `Ctrl + e`: 移到行尾。\n- `Ctrl + f`: 向行尾移动一个字符，与右箭头作用相同。\n- `Alt + f`: 移动到当前单词的词尾。\n- `Alt + b`: 移动到当前单词的词首。\n\n上面快捷键的 Alt 键，也可以用 ESC 键代替。\n\n## 清除屏幕\n\n`Ctrl + l` 快捷键可以清除屏幕，即将当前行移到屏幕的第一行，与 `clear` 命令作用相同。\n\n## 编辑操作\n\n下面的快捷键可以编辑命令行内容。\n\n- `Ctrl + d`: 删除光标位置的字符(delete)。\n- `Ctrl + w`: 删除光标前面的单词。\n- `Ctrl + t`: 光标位置的字符与它前面一位的字符交换位置(transpose)。\n- `Alt + t`: 光标位置的词与它前面一位的词交换位置(transpose)。\n- `Alt + l`: 将光标位置至词尾转为小写(lowercase)。\n- `Alt + u`: 将光标位置至词尾转为大写(uppercase)。\n\n使用 `Ctrl + d` 的时候，如果当前行没有任何字符，会导致退出当前 Shell，所以要小心。\n\n剪切和粘贴快捷键如下。\n\n- `Ctrl + k`: 剪切光标位置到行尾的文本。\n- `Ctrl + u`: 剪切光标位置到行首的文本。\n- `Alt + d`: 剪切光标位置到词尾的文本。\n- `Alt + Backspace`: 剪切光标位置到词首的文本。\n- `Ctrl + y`: 在光标位置粘贴文本。\n\n同样地，Alt 键可以用 Esc 键代替。\n\n## 自动补全\n\n命令输入到一半的时候，可以按一下 Tab 键，Readline 会自动补全命令或路径。比如，输入 `cle`，再按下 Tab 键，Bash 会自动将这个命令补全为 `clear`。\n\n如果符合条件的命令或路径有多个，就需要连续按两次 Tab 键，Bash 会提示所有符合条件的命令或路径。\n\n除了命令或路径，Tab 还可以补全其他值。如果一个值以 `$` 开头，则按下 Tab 键会补全变量；如果以 `~` 开头，则补全用户名；如果以 `@` 开头，则补全主机名(hostname)，主机名以列在 `/etc/hosts` 文件里面的主机为准。\n\n自动补全相关的快捷键如下。\n\n- Tab: 完成自动补全。\n- `Alt + ?`: 列出可能的补全，与连按两次 Tab 键作用相同。\n- `Alt + /`: 尝试文件路径补全。\n- `Ctrl + x /`: 先按 `Ctrl + x`，再按 `/`，等同于 `Alt + ?`，列出可能的文件路径补全。\n- `Alt + !`: 命令补全。\n- `Ctrl + x !`: 先按 `Ctrl + x`，再按 `!`，等同于 `Alt + !`，命令补全。\n- `Alt + ~`: 用户名补全。\n- `Ctrl + x ~`: 先按 `Ctrl + x`，再按 `~`，等同于 `Alt + ~`，用户名补全。\n- `Alt + $`: 变量名补全。\n- `Ctrl + x $`: 先按 `Ctrl + x`，再按 `$`，等同于 `Alt + $`，变量名补全。\n- `Alt + @`: 主机名补全。\n- `Ctrl + x @`: 先按 `Ctrl + x`，再按 `@`，等同于 `Alt + @`，主机名补全。\n- `Alt + *`: 在命令行一次性插入所有可能的补全。\n- `Alt + Tab`: 尝试用 `.bash_history` 里面以前执行命令，进行补全。\n\n上面的 `Alt` 键也可以用 ESC 键代替。\n\n## 操作历史\n\n### 基本用法\n\nBash 会保留用户的操作历史，即用户输入的每一条命令都会记录。退出当前 Shell 的时候，Bash 会将用户在当前 Shell 的操作历史写入 `~/.bash_history` 文件，该文件默认储存 500 个操作。\n\n环境变量 `HISTFILE` 总是指向这个文件。\n\n```bash\n$ echo $HISTFILE\n/home/me/.bash_history\n```\n\n有了操作历史以后，就可以使用方向键的 `↑` 和 `↓`，快速浏览上一条和下一条命令。\n\n下面的方法可以快速执行以前执行过的命令。\n\n```bash\n$ echo Hello World\nHello World\n\n$ echo Goodbye\nGoodbye\n\n$ !e\necho Goodbye\nGoodbye\n```\n\n上面例子中，`!e` 表示找出操作历史之中，最近的那一条以 `e` 开头的命令并执行。Bash 会先输出那一条命令 `echo Goodbye`，然后直接执行。\n\n同理，`!echo` 也会执行最近一条以 `echo` 开头的命令。\n\n```bash\n$ !echo\necho Goodbye\nGoodbye\n\n$ !echo H\necho Goodbye H\nGoodbye H\n\n$ !echo H G\necho Goodbye H G\nGoodbye H G\n```\n\n注意，`!string` 语法只会匹配命令，不会匹配参数。所以 `!echo H` 不会执行 `echo Hello World`，而是会执行 `echo Goodbye`，并把参数 `H` 附加在这条命令之后。同理，`!echo H G` 也是等同于 `echo Goodbye` 命令之后附加 `H G`。\n\n最后，按下 `Ctrl + r` 会显示操作历史，可以用方向键上下移动，选择其中要执行的命令。也可以键入命令的首字母，Shell 就会自动在历史文件中，查询并显示匹配的结果。\n\n### history 命令\n\n`history` 命令能显示操作历史，即 `.bash_history` 文件的内容。\n\n```bash\n$ history\n...\n498 echo Goodbye\n499 ls ~\n500 cd\n```\n\n使用该命令，而不是直接读取 `.bash_history` 文件的好处是，它会在所有的操作前加上行号，最近的操作在最后面，行号最大。\n\n通过定制环境变量 `HISTTIMEFORMAT`，可以显示每个操作的时间。\n\n```bash\n$ export HISTTIMEFORMAT='%F %T  '\n$ history\n1  2013-06-09 10:40:12   cat /etc/issue\n2  2013-06-09 10:40:12   clear\n```\n\n上面代码中，`%F` 相当于 `%Y - %m - %d`，`%T` 相当于 `%H : %M : %S`。\n\n只要设置 `HISTTIMEFORMAT` 这个环境变量，就会在 `.bash_history` 文件保存命令的执行时间戳。如果不设置，就不会保存时间戳。\n\n如果不希望保存本次操作的历史，可以设置环境变量 `HISTSIZE` 等于 0。\n\n```bash\nexport HISTSIZE=0\n```\n\n如果 `HISTSIZE=0` 写入用户主目录的 `~/.bashrc` 文件，那么就不会保留该用户的操作历史。如果写入 `/etc/profile`，整个系统都不会保留操作历史。\n\n如果想搜索某个以前执行的命令，可以配合 `grep` 命令搜索操作历史。\n\n```bash\nhistory | grep /usr/bin\n```\n\n上面命令返回 `.bash_history` 文件里面，那些包含 `/usr/bin` 的命令。\n\n操作历史的每一条记录都有编号。知道了命令的编号以后，可以用 `感叹号 + 编号` 执行该命令。如果想要执行 `.bash_history` 里面的第 8 条命令，可以像下面这样操作。\n\n```bash\n!8\n```\n\n`history` 命令的 `-c` 参数可以清除操作历史。\n\n```bash\nhistory -c\n```\n\n### 相关快捷键\n\n下面是一些与操作历史相关的快捷键。\n\n- `Ctrl + p`: 显示上一个命令，与向上箭头效果相同(previous)。\n- `Ctrl + n`: 显示下一个命令，与向下箭头效果相同(next)。\n- `Alt + <`: 显示第一个命令。\n- `Alt + >`: 显示最后一个命令，即当前的命令。\n- `Ctrl + o`: 执行历史文件里面的当前条目，并自动显示下一条命令。这对重复执行某个序列的命令很有帮助。\n\n感叹号`!`的快捷键如下。\n\n- `!!`: 执行上一个命令。\n- `!n`: 执行历史文件里面行号为 `n` 的命令。\n- `!-n`: 执行当前命令之前 `n` 条的命令。\n- `!string`: 执行最近一个以指定字符串 `string` 开头的命令。\n- `!?string`: 执行最近一条包含字符串 `string` 的命令。\n- `^string1^string2`: 执行最近一条包含 `string1` 的命令，将其替换成 `string2`。\n\n## 其他快捷键\n\n- `Ctrl + j`: 等同于回车键(LINEFEED)。\n- `Ctrl + m`: 等同于回车键(CARRIAGE RETURN)。\n- `Ctrl + o`: 等同于回车键，并展示操作历史的下一个命令。\n- `Ctrl + v`: 将下一个输入的特殊字符变成字面量，比如回车变成 `^M`。\n- `Ctrl + [`: 等同于 ESC。\n- `Alt + .`: 插入上一个命令的最后一个词。\n- `Alt + _`: 等同于 `Alt + .`。\n\n上面的 `Alt + .` 快捷键，对于很长的文件路径，有时会非常方便。因为 Unix 命令的最后一个参数通常是文件路径。\n\n```bash\nmkdir foo_bar\ncd #按下 Alt + .\n```\n\n上面例子中，在 `cd` 命令后按下 `Alt + .`，就会自动插入 `foo_bar`。\n","excerpt":"","title":"","headers":[{"level":2,"title":"简介","slug":"简介","link":"#简介","children":[]},{"level":2,"title":"光标移动","slug":"光标移动","link":"#光标移动","children":[]},{"level":2,"title":"清除屏幕","slug":"清除屏幕","link":"#清除屏幕","children":[]},{"level":2,"title":"编辑操作","slug":"编辑操作","link":"#编辑操作","children":[]},{"level":2,"title":"自动补全","slug":"自动补全","link":"#自动补全","children":[]},{"level":2,"title":"操作历史","slug":"操作历史","link":"#操作历史","children":[{"level":3,"title":"基本用法","slug":"基本用法","link":"#基本用法","children":[]},{"level":3,"title":"history 命令","slug":"history-命令","link":"#history-命令","children":[]},{"level":3,"title":"相关快捷键","slug":"相关快捷键","link":"#相关快捷键","children":[]}]},{"level":2,"title":"其他快捷键","slug":"其他快捷键","link":"#其他快捷键","children":[]}]}}
