{"content":"<h2 id=\"squash-merge\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#squash-merge\"><span>Squash merge</span></a></h2>\n<p>通过使用 <code v-pre>--squash</code> 选项，你可以在合并中将多个 commit 合并为一个。</p>\n<p>也就是对于以下的例子</p>\n<Mermaid id=\"mermaid-9\" code=\"eJxLzyxxL0osyOBSUEjOz83NLFHITLFSyk3MzDNUAoolFSXmJWcopKUmlpQWpaIqggqC1SVnpCZn55eWKIB0YpplhKIGn2moKqGm5aYWpafCtQEAlZs6wQ==\"></Mermaid><p><code v-pre>git merge feature</code> 得到的结果为:</p>\n<Mermaid id=\"mermaid-13\" code=\"eJxLzyxxL0osyOBSUEjOz83NLFHITLFSyk3MzDNUQhVLS00sKS1KRRcGKTXCrhRdODe1KD0VKqDEBQBpQycY\"></Mermaid><p>而如果 <code v-pre>feature</code> 分支意在实现一个完成的特性，两个 commit 只是工作进度实际上并不重要的时候，我们可以通过 <code v-pre>git merge --squash feature</code> 得到:</p>\n<Mermaid id=\"mermaid-17\" code=\"eJxLzyxxL0osyOBSUEjOz83NLFHITLFSyk3MzDNUwhQzQhMrLixNLM5QyE0tSk9VKEotLs0pUeICAGwNGyw=\"></Mermaid><h2 id=\"cherry-pick\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#cherry-pick\"><span>Cherry pick</span></a></h2>\n<p>有些时候，我们可能需要提取其他分支的某个 commit，这个时候我们可以用 cherry pick 进行操作。</p>\n<Mermaid id=\"mermaid-24\" code=\"eJxLzyxxL0osyOBSUEjOz83NLAEykooS85IzFHKLMvILUuESCpkpVkppqYklpUWpjgpGBqpKOKRMMKSSStMV0jIrcGkww22WBVQqIzU5O7+0RCE3MTMPwi8qqtQtyEzOxrAArhSf8w0NsBucm1qUngrTCgDhNlnE\"></Mermaid><p>在这种情况下，我们可以回到 main 分支，执行 <code v-pre>git cherry-pick &lt;commit id&gt;</code> 来挑拣某个提交，当然，你可以一并在命令中提交挑拣多个 commit。</p>\n<Mermaid id=\"mermaid-28\" code=\"eJx9j0sKhDAMQPdziiDMckBlGAZ3rjxHrbENEltCC3p7BT8brbuEx8sjhkIjytsXgHbMFNahFTVqCyzWeTwBUFdlPaoQBWso83eWQN8LaqOBnqYiZfxSRpky/rthUQ8uBmBF47aLzB9PeriG79mWOO88/Vzk91VGMXioC90zaig=\"></Mermaid><ul>\n<li><code v-pre>git cherry-pick &lt;commit id 1&gt; &lt;commit id 2&gt;</code> 表示挑拣 commit id 1 和 commit id 2</li>\n<li><code v-pre>git cherry-pick &lt;commit id 1&gt;...&lt;commit id 2&gt;</code> 表示挑拣 commit id 1 与 commit id 2 之间 (包括两者) 的所有提交</li>\n<li><code v-pre>git cherry-pick &lt;branch&gt;</code> 表示挑拣该分支最新的提交</li>\n</ul>\n","env":{"base":"/","filePath":"/Users/carson/Desktop/Mister-Hope.github.io-main/src/software/git/merge.md","filePathRelative":"software/git/merge.md","frontmatter":{"date":"2022-08-08T00:00:00.000Z","title":"高级合并","icon":"merge","order":17,"category":"Git","tag":["Git","软件"]},"sfcBlocks":{"template":{"type":"template","content":"<template><h2 id=\"squash-merge\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#squash-merge\"><span>Squash merge</span></a></h2>\n<p>通过使用 <code v-pre>--squash</code> 选项，你可以在合并中将多个 commit 合并为一个。</p>\n<p>也就是对于以下的例子</p>\n<Mermaid id=\"mermaid-9\" code=\"eJxLzyxxL0osyOBSUEjOz83NLFHITLFSyk3MzDNUAoolFSXmJWcopKUmlpQWpaIqggqC1SVnpCZn55eWKIB0YpplhKIGn2moKqGm5aYWpafCtQEAlZs6wQ==\"></Mermaid><p><code v-pre>git merge feature</code> 得到的结果为:</p>\n<Mermaid id=\"mermaid-13\" code=\"eJxLzyxxL0osyOBSUEjOz83NLFHITLFSyk3MzDNUQhVLS00sKS1KRRcGKTXCrhRdODe1KD0VKqDEBQBpQycY\"></Mermaid><p>而如果 <code v-pre>feature</code> 分支意在实现一个完成的特性，两个 commit 只是工作进度实际上并不重要的时候，我们可以通过 <code v-pre>git merge --squash feature</code> 得到:</p>\n<Mermaid id=\"mermaid-17\" code=\"eJxLzyxxL0osyOBSUEjOz83NLFHITLFSyk3MzDNUwhQzQhMrLixNLM5QyE0tSk9VKEotLs0pUeICAGwNGyw=\"></Mermaid><h2 id=\"cherry-pick\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#cherry-pick\"><span>Cherry pick</span></a></h2>\n<p>有些时候，我们可能需要提取其他分支的某个 commit，这个时候我们可以用 cherry pick 进行操作。</p>\n<Mermaid id=\"mermaid-24\" code=\"eJxLzyxxL0osyOBSUEjOz83NLAEykooS85IzFHKLMvILUuESCpkpVkppqYklpUWpjgpGBqpKOKRMMKSSStMV0jIrcGkww22WBVQqIzU5O7+0RCE3MTMPwi8qqtQtyEzOxrAArhSf8w0NsBucm1qUngrTCgDhNlnE\"></Mermaid><p>在这种情况下，我们可以回到 main 分支，执行 <code v-pre>git cherry-pick &lt;commit id&gt;</code> 来挑拣某个提交，当然，你可以一并在命令中提交挑拣多个 commit。</p>\n<Mermaid id=\"mermaid-28\" code=\"eJx9j0sKhDAMQPdziiDMckBlGAZ3rjxHrbENEltCC3p7BT8brbuEx8sjhkIjytsXgHbMFNahFTVqCyzWeTwBUFdlPaoQBWso83eWQN8LaqOBnqYiZfxSRpky/rthUQ8uBmBF47aLzB9PeriG79mWOO88/Vzk91VGMXioC90zaig=\"></Mermaid><ul>\n<li><code v-pre>git cherry-pick &lt;commit id 1&gt; &lt;commit id 2&gt;</code> 表示挑拣 commit id 1 和 commit id 2</li>\n<li><code v-pre>git cherry-pick &lt;commit id 1&gt;...&lt;commit id 2&gt;</code> 表示挑拣 commit id 1 与 commit id 2 之间 (包括两者) 的所有提交</li>\n<li><code v-pre>git cherry-pick &lt;branch&gt;</code> 表示挑拣该分支最新的提交</li>\n</ul>\n</template>","contentStripped":"<h2 id=\"squash-merge\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#squash-merge\"><span>Squash merge</span></a></h2>\n<p>通过使用 <code v-pre>--squash</code> 选项，你可以在合并中将多个 commit 合并为一个。</p>\n<p>也就是对于以下的例子</p>\n<Mermaid id=\"mermaid-9\" code=\"eJxLzyxxL0osyOBSUEjOz83NLFHITLFSyk3MzDNUAoolFSXmJWcopKUmlpQWpaIqggqC1SVnpCZn55eWKIB0YpplhKIGn2moKqGm5aYWpafCtQEAlZs6wQ==\"></Mermaid><p><code v-pre>git merge feature</code> 得到的结果为:</p>\n<Mermaid id=\"mermaid-13\" code=\"eJxLzyxxL0osyOBSUEjOz83NLFHITLFSyk3MzDNUQhVLS00sKS1KRRcGKTXCrhRdODe1KD0VKqDEBQBpQycY\"></Mermaid><p>而如果 <code v-pre>feature</code> 分支意在实现一个完成的特性，两个 commit 只是工作进度实际上并不重要的时候，我们可以通过 <code v-pre>git merge --squash feature</code> 得到:</p>\n<Mermaid id=\"mermaid-17\" code=\"eJxLzyxxL0osyOBSUEjOz83NLFHITLFSyk3MzDNUwhQzQhMrLixNLM5QyE0tSk9VKEotLs0pUeICAGwNGyw=\"></Mermaid><h2 id=\"cherry-pick\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#cherry-pick\"><span>Cherry pick</span></a></h2>\n<p>有些时候，我们可能需要提取其他分支的某个 commit，这个时候我们可以用 cherry pick 进行操作。</p>\n<Mermaid id=\"mermaid-24\" code=\"eJxLzyxxL0osyOBSUEjOz83NLAEykooS85IzFHKLMvILUuESCpkpVkppqYklpUWpjgpGBqpKOKRMMKSSStMV0jIrcGkww22WBVQqIzU5O7+0RCE3MTMPwi8qqtQtyEzOxrAArhSf8w0NsBucm1qUngrTCgDhNlnE\"></Mermaid><p>在这种情况下，我们可以回到 main 分支，执行 <code v-pre>git cherry-pick &lt;commit id&gt;</code> 来挑拣某个提交，当然，你可以一并在命令中提交挑拣多个 commit。</p>\n<Mermaid id=\"mermaid-28\" code=\"eJx9j0sKhDAMQPdziiDMckBlGAZ3rjxHrbENEltCC3p7BT8brbuEx8sjhkIjytsXgHbMFNahFTVqCyzWeTwBUFdlPaoQBWso83eWQN8LaqOBnqYiZfxSRpky/rthUQ8uBmBF47aLzB9PeriG79mWOO88/Vzk91VGMXioC90zaig=\"></Mermaid><ul>\n<li><code v-pre>git cherry-pick &lt;commit id 1&gt; &lt;commit id 2&gt;</code> 表示挑拣 commit id 1 和 commit id 2</li>\n<li><code v-pre>git cherry-pick &lt;commit id 1&gt;...&lt;commit id 2&gt;</code> 表示挑拣 commit id 1 与 commit id 2 之间 (包括两者) 的所有提交</li>\n<li><code v-pre>git cherry-pick &lt;branch&gt;</code> 表示挑拣该分支最新的提交</li>\n</ul>\n","tagOpen":"<template>","tagClose":"</template>"},"script":null,"scriptSetup":null,"scripts":[],"styles":[],"customBlocks":[]},"content":"\n## Squash merge\n\n通过使用 `--squash` 选项，你可以在合并中将多个 commit 合并为一个。\n\n也就是对于以下的例子\n\n```git-graph\ncommit id:\"main1\"\nbranch feature\ncommit id:\"feature1\"\ncheckout main\ncommit id:\"main2\"\ncheckout feature\ncommit id:\"feature2\"\ncheckout main\nmerge feature\n```\n\n`git merge feature` 得到的结果为:\n\n```git-graph\ncommit id:\"main1\"\ncommit id:\"feature1\"\ncommit id:\"main2\"\ncommit id:\"feature2\"\ncommit id:\"merge commit\"\n```\n\n而如果 `feature` 分支意在实现一个完成的特性，两个 commit 只是工作进度实际上并不重要的时候，我们可以通过 `git merge --squash feature` 得到:\n\n```git-graph\ncommit id:\"main1\"\ncommit id:\"main2\"\ncommit id:\"squash merge result\"\n```\n\n## Cherry pick\n\n有些时候，我们可能需要提取其他分支的某个 commit，这个时候我们可以用 cherry pick 进行操作。\n\n```git-graph\ncommit\nbranch mrhope\ncommit id:\"featureA 20%\"\ncommit id:\"featureA 40%\"\ncommit id:\"bug fix\"\ncommit id:\"featureA 60%\"\ncommit id:\"featureA 80%\"\ncheckout main\ncherry-pick id:\"bug fix\"\ncheckout mrhope\ncommit id:\"featureA 100%\"\ncheckout main\nmerge mrhope\n```\n\n在这种情况下，我们可以回到 main 分支，执行 `git cherry-pick <commit id>` 来挑拣某个提交，当然，你可以一并在命令中提交挑拣多个 commit。\n\n```git-graph\ncommit\nbranch mrhope\ncommit id:\"featureA 20%\"\ncommit id:\"featureA 40%\"\ncommit id:\"bug fix1\"\ncommit id:\"featureA 60%\"\ncommit id:\"bug fix2\"\ncommit id:\"featureA 80%\"\ncheckout main\ncherry-pick id:\"bug fix1\"\ncherry-pick id:\"bug fix2\"\ncheckout mrhope\ncommit id:\"featureA 100%\"\ncheckout main\nmerge mrhope\n```\n\n- `git cherry-pick <commit id 1> <commit id 2>` 表示挑拣 commit id 1 和 commit id 2\n- `git cherry-pick <commit id 1>...<commit id 2>` 表示挑拣 commit id 1 与 commit id 2 之间 (包括两者) 的所有提交\n- `git cherry-pick <branch>` 表示挑拣该分支最新的提交\n","excerpt":"","title":"","headers":[{"level":2,"title":"Squash merge","slug":"squash-merge","link":"#squash-merge","children":[]},{"level":2,"title":"Cherry pick","slug":"cherry-pick","link":"#cherry-pick","children":[]}]}}
