{"content":"<p>TypeScript 的代码检查应当使用 ESLint + <code v-pre>typescript-eslint-parser</code>。</p>\n<h2 id=\"什么是代码检查\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#什么是代码检查\"><span>什么是代码检查</span></a></h2>\n<p>代码检查主要是用来发现代码错误、统一代码风格。</p>\n<p>在 JavaScript 项目中，我们一般使用 ESLint 来进行代码检查。它通过插件化的特性极大的丰富了适用范围，搭配 <code v-pre>typescript-eslint-parser</code> 之后，甚至可以用来检查 TypeScript 代码。</p>\n<h2 id=\"为什么需要代码检查\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#为什么需要代码检查\"><span>为什么需要代码检查</span></a></h2>\n<p>有人会觉得，JavaScript 非常灵活，所以需要代码检查。而 TypeScript 已经能够在编译阶段检查出很多问题了，为什么还需要代码检查呢?</p>\n<p>因为 TypeScript 关注的重心是类型的匹配，而不是代码风格。当团队的人员越来越多时，同样的逻辑不同的人写出来可能会有很大的区别:</p>\n<ul>\n<li>缩进应该是四个空格还是两个空格?</li>\n<li>是否应该禁用 <code v-pre>var</code>?</li>\n<li>接口名是否应该以 <code v-pre>I</code> 开头?</li>\n<li>是否应该强制使用 <code v-pre>===</code> 而不是 <code v-pre>==</code>?</li>\n</ul>\n<p>这些问题 TypeScript 不会关注，但是却影响到多人协作开发时的效率、代码的可理解性以及可维护性。</p>\n<p>下面来看一个具体的例子:</p>\n<div class=\"language-ts line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"ts\" data-title=\"ts\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">let</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> myName</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"Tom\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">console</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">log</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">`My name is </span><span style=\"--shiki-light:#CA1243;--shiki-dark:#C678DD\">${</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">myNane</span><span style=\"--shiki-light:#CA1243;--shiki-dark:#C678DD\">}</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">`</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">console</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">log</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">`My name is </span><span style=\"--shiki-light:#CA1243;--shiki-dark:#C678DD\">${</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">myName</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">toStrng</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">()</span><span style=\"--shiki-light:#CA1243;--shiki-dark:#C678DD\">}</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">`</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">console</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">log</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">`My name is </span><span style=\"--shiki-light:#CA1243;--shiki-dark:#C678DD\">${</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">myName</span><span style=\"--shiki-light:#CA1243;--shiki-dark:#C678DD\">}</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">`</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// tsc 报错信息:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">//</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// index.ts(3,27): error TS2552: Cannot find name 'myNane'. Did you mean 'myName'?</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// index.ts(4,34): error TS2551: Property 'toStrng' does not exist on type 'string'. Did you mean 'toString'?</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">//</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">//</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">//</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// eslint 报错信息:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">//</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// /path/to/index.ts</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">//   3:27  error  'myNane' is not defined         no-undef</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">//   5:38  error  Missing semicolon               semi</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">//</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// ✖ 2 problems (2 errors, 0 warnings)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">//   1 errors, 0 warnings potentially fixable with the `--fix` option.</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><table>\n<thead>\n<tr>\n<th>存在的问题</th>\n<th><code v-pre>tsc</code> 是否报错</th>\n<th><code v-pre>eslint</code> 是否报错</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code v-pre>myName</code> 被误写成了 <code v-pre>myNane</code></td>\n<td>✅</td>\n<td>✅</td>\n</tr>\n<tr>\n<td><code v-pre>toString</code> 被误写成了 <code v-pre>toStrng</code></td>\n<td>✅️</td>\n<td>❌</td>\n</tr>\n<tr>\n<td>少了一个分号</td>\n<td>❌</td>\n<td>✅</td>\n</tr>\n</tbody>\n</table>\n<p>上例中，由于 <code v-pre>eslint</code> 无法识别 <code v-pre>myName</code> 存在哪些方法，所以对于拼写错误的 <code v-pre>toString</code> 没有检查出来。</p>\n<p>而代码风格的错误不影响编译，故少了一个分号的错误 <code v-pre>tsc</code> 没有检查出来。</p>\n<p>对于未定义的变量 <code v-pre>myNane</code>，<code v-pre>tsc</code> 可以检测出来。<code v-pre>eslint</code> 需要能够独立于某个编译环境运行，所以能检测出此类错误，而对于 TypeScript 代码，这其实是一种冗余的检测了。</p>\n<p>虽然发现代码错误比统一的代码风格更重要，但是当一个项目越来越庞大，开发人员也越来越多的时候，代码风格的约束还是必不可少的。</p>\n<h2 id=\"在-typescript-中使用-eslint\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#在-typescript-中使用-eslint\"><span>在 TypeScript 中使用 ESLint</span></a></h2>\n<h3 id=\"安装-eslint\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#安装-eslint\"><span>安装 ESLint</span></a></h3>\n<p>ESLint 可以安装在当前项目中或全局环境下，因为代码检查是项目的重要组成部分，所以我们一般会将它安装在当前项目中。可以运行下面的脚本来安装:</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">npm</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> install</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> eslint</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> --save-dev</span></span></code></pre>\n</div><p>由于 ESLint 默认使用 <a href=\"https://github.com/eslint/espree\" target=\"_blank\" rel=\"noopener noreferrer\">Espree</a> 进行语法解析，无法识别 TypeScript 的一些语法，故我们需要安装 <code v-pre>typescript-eslint-parser</code>，替代掉默认的解析器，别忘了同时安装 <code v-pre>typescript</code>:</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">npm</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> install</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> typescript</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> typescript-eslint-parser</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> --save-dev</span></span></code></pre>\n</div><p>由于 <code v-pre>typescript-eslint-parser</code> 对一部分 ESLint 规则支持性不好，故我们需要安装 <code v-pre>eslint-plugin-typescript</code>，弥补一些支持性不好的规则。</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">npm</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> install</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> eslint-plugin-typescript</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> --save-dev</span></span></code></pre>\n</div><h3 id=\"创建配置文件\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#创建配置文件\"><span>创建配置文件</span></a></h3>\n<p>ESLint 需要一个配置文件来决定对哪些规则进行检查，配置文件的名称一般是 <code v-pre>.eslintrc.js</code> 或 <code v-pre>.eslintrc.json</code>。</p>\n<p>当运行 ESLint 的时候检查一个文件的时候，它会首先尝试读取该文件的目录下的配置文件，然后再一级一级往上查找，将所找到的配置合并起来，作为当前被检查文件的配置。</p>\n<p>我们在项目的根目录下创建一个 <code v-pre>.eslintrc.js</code>，内容如下:</p>\n<div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">module</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">exports</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  parser</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"typescript-eslint-parser\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  plugins</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> [</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"typescript\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">],</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  rules</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    // @fixable 必须使用 === 或 !==，禁止使用 == 或 !=，与 null 比较时除外</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">    eqeqeq</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> [</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">      \"error\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">      \"always\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">      {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">        null</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"ignore\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">      },</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    ],</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    // 类和接口的命名必须遵守帕斯卡命名法，比如 PersianCat</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">    \"typescript/class-name-casing\"</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"error\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  },</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">};</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>以上配置中，我们指定了两个规则，其中 <code v-pre>eqeqeq</code> 是 ESLint 原生的规则(它要求必须使用 <code v-pre>===</code> 或 <code v-pre>!==</code>，禁止使用 <code v-pre>==</code> 或 <code v-pre>!=</code>，与 <code v-pre>null</code> 比较时除外)，<code v-pre>typescript/class-name-casing</code> 是 <code v-pre>eslint-plugin-typescript</code> 为 ESLint 增加的规则(它要求类和接口的命名必须遵守帕斯卡命名法，比如 <code v-pre>PersianCat</code>)。</p>\n<p>规则的取值一般是一个数组(上例中的 <code v-pre>eqeqeq</code>)，其中第一项是 <code v-pre>off</code>、<code v-pre>warn</code> 或 <code v-pre>error</code> 中的一个，表示关闭、警告和报错。后面的项都是该规则的其他配置。</p>\n<p>如果没有其他配置的话，则可以将规则的取值简写为数组中的第一项(上例中的 <code v-pre>typescript/class-name-casing</code>)。</p>\n<p>关闭、警告和报错的含义如下:</p>\n<ul>\n<li>关闭: 禁用此规则</li>\n<li>警告: 代码检查时输出错误信息，但是不会影响到 exit code</li>\n<li>报错: 发现错误时，不仅会输出错误信息，而且 exit code 将被设为 1(一般 exit code 不为 0 则表示执行出现错误)</li>\n</ul>\n<h3 id=\"检查一个-ts-文件\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#检查一个-ts-文件\"><span>检查一个 ts 文件</span></a></h3>\n<p>创建了配置文件之后，我们来创建一个 ts 文件看看是否能用 ESLint 去检查它了。</p>\n<p>创建一个新文件 <code v-pre>index.ts</code>，将以下内容复制进去:</p>\n<div class=\"language-ts line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"ts\" data-title=\"ts\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">interface</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> person</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">  name</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E5C07B\"> string</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">  age</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E5C07B\"> number</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">let</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> tom</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> person</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  name</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"Tom\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  age</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 25</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">if</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">tom</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">age</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> ==</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 25</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">  console</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">log</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">tom</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">name</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> +</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"is 25 years old.\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>然后执行以下命令:</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">./node_modules/.bin/eslint</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> index.ts</span></span></code></pre>\n</div><p>则会得到如下报错信息:</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">/path/to/index.ts</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">   1:11</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">  error</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">  Interface</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 'person'</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> must</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> be</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> PascalCased</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">  typescript/class-name-casing</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">  11:13</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">  error</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">  Expected</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> '==='</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> and</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> instead</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> saw</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> '=='</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">     eqeqeq</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">✖</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 2</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> problems</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (2 </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">errors,</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 0</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> warnings</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span></code></pre>\n</div><p>上面的结果显示，刚刚配置的两个规则都生效了: 接口 <code v-pre>person</code> 必须写成帕斯卡命名规范，<code v-pre>==</code> 必须写成 <code v-pre>===</code>。</p>\n<p>需要注意的是，我们使用的是 <code v-pre>./node_modules/.bin/eslint</code>，而不是全局的 <code v-pre>eslint</code> 脚本，这是因为代码检查是项目的重要组成部分，所以我们一般会将它安装在当前项目中。</p>\n<p>可是每次执行这么长一段脚本颇有不便，我们可以通过在 <code v-pre>package.json</code> 中添加一个 <code v-pre>script</code> 来创建一个 npm script 来简化这个步骤:</p>\n<div class=\"language-json\" data-highlighter=\"shiki\" data-ext=\"json\" data-title=\"json\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">{</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  \"scripts\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">    \"eslint\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"eslint index.ts\"</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n</div><p>这时只需执行 <code v-pre>npm run eslint</code> 即可。</p>\n<h3 id=\"检查整个项目的-ts-文件\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#检查整个项目的-ts-文件\"><span>检查整个项目的 ts 文件</span></a></h3>\n<p>我们的项目源文件一般是放在 <code v-pre>src</code> 目录下，所以需要将 <code v-pre>package.json</code> 中的 <code v-pre>eslint</code> 脚本改为对一个目录进行检查。由于 <code v-pre>eslint</code> 默认不会检查 <code v-pre>.ts</code> 后缀的文件，所以需要加上参数 <code v-pre>--ext .ts</code>:</p>\n<div class=\"language-json\" data-highlighter=\"shiki\" data-ext=\"json\" data-title=\"json\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">{</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  \"scripts\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">    \"eslint\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"eslint src --ext .ts\"</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n</div><p>此时执行 <code v-pre>npm run eslint</code> 即会检查 <code v-pre>src</code> 目录下的所有 <code v-pre>.ts</code> 后缀的文件。</p>\n<h3 id=\"在-vs-code-中集成-eslint-检查\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#在-vs-code-中集成-eslint-检查\"><span>在 VS Code 中集成 ESLint 检查</span></a></h3>\n<p>在编辑器中集成 ESLint 检查，可以在开发过程中就发现错误，极大的增加了开发效率。</p>\n<p>要在 VS Code 中集成 ESLint 检查，我们需要先安装 ESLint 插件，点击「扩展」按钮，搜索 ESLint，然后安装即可。</p>\n<p>VS Code 中的 ESLint 插件默认是不会检查 <code v-pre>.ts</code> 后缀的，需要在「文件 =&gt; 首选项 =&gt; 设置」中，添加以下配置:</p>\n<div class=\"language-json\" data-highlighter=\"shiki\" data-ext=\"json\" data-title=\"json\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">{</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  \"eslint.validate\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: [</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"javascript\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"javascriptreact\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"typescript\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">]</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n</div><p>这时再打开一个 <code v-pre>.ts</code> 文件，将鼠标移到红色提示处，即可看到这样的报错信息了:</p>\n<figure><img src=\"@source/code/language/typescript/assets/vscode-eslint-error.png\" alt=\"VS Code ESLint 错误信息\" tabindex=\"0\" loading=\"lazy\"><figcaption>VS Code ESLint 错误信息</figcaption></figure>\n<h3 id=\"使用-alloyteam-的-eslint-配置\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#使用-alloyteam-的-eslint-配置\"><span>使用 AlloyTeam 的 ESLint 配置</span></a></h3>\n<p>ESLint 原生的规则和 <code v-pre>eslint-plugin-typescript</code> 的规则太多了，而且原生的规则有一些在 TypeScript 中支持的不好，需要禁用掉。</p>\n<p>这里我推荐使用 <a href=\"https://github.com/AlloyTeam/eslint-config-alloy#typescript\" target=\"_blank\" rel=\"noopener noreferrer\">AlloyTeam ESLint 规则中的 TypeScript 版本</a>，它已经为我们提供了一套完善的配置规则。</p>\n<p>安装:</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">npm</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> install</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> --save-dev</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> eslint</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> typescript</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> typescript-eslint-parser</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> eslint-plugin-typescript</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> eslint-config-alloy</span></span></code></pre>\n</div><p>在您的项目根目录下创建 <code v-pre>.eslintrc.js</code>，并将以下内容复制到文件中:</p>\n<div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">module</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">exports</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  extends</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> [</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"eslint-config-alloy/typescript\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">],</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  globals</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    // 这里填入您的项目需要的全局变量</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    // 这里值为 false 表示这个全局变量不允许被重新赋值，比如:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    //</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    // jQuery: false,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    // $: false</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  },</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  rules</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    // 这里填入您的项目需要的个性化配置，比如:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    //</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    // // @fixable 一个缩进必须用两个空格替代</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    // 'indent': [</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    //     'error',</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    //     2,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    //     {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    //         SwitchCase: 1,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    //         flatTernaryExpressions: true</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    //     }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    // ]</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  },</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">};</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3 id=\"使用-eslint-检查-tsx-文件\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#使用-eslint-检查-tsx-文件\"><span>使用 ESLint 检查 tsx 文件</span></a></h3>\n<p>如果需要同时支持对 tsx 文件的检查，则需要对以上步骤做一些调整:</p>\n<h4 id=\"安装-eslint-plugin-react\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#安装-eslint-plugin-react\"><span>安装 <code v-pre>eslint-plugin-react</code></span></a></h4>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">npm</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> install</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> --save-dev</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> eslint-plugin-react</span></span></code></pre>\n</div><h4 id=\"package-json-中的-scripts-eslint-添加-tsx-后缀\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#package-json-中的-scripts-eslint-添加-tsx-后缀\"><span>package.json 中的 <code v-pre>scripts.eslint</code> 添加 <code v-pre>.tsx</code> 后缀</span></a></h4>\n<div class=\"language-json\" data-highlighter=\"shiki\" data-ext=\"json\" data-title=\"json\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">{</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  \"scripts\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">    \"eslint\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"eslint src --ext .ts,.tsx\"</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n</div><h4 id=\"vs-code-的配置中新增-typescriptreact-检查\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#vs-code-的配置中新增-typescriptreact-检查\"><span>VS Code 的配置中新增 typescriptreact 检查</span></a></h4>\n<div class=\"language-json\" data-highlighter=\"shiki\" data-ext=\"json\" data-title=\"json\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">{</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  \"eslint.validate\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: [</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">    \"javascript\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">    \"javascriptreact\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">    \"typescript\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">    \"typescriptreact\"</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  ]</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n</div><h4 id=\"使用-alloyteam-eslint-规则中的-typescript-react-版本\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#使用-alloyteam-eslint-规则中的-typescript-react-版本\"><span>使用 AlloyTeam ESLint 规则中的 TypeScript React 版本</span></a></h4>\n<p><a href=\"https://github.com/AlloyTeam/eslint-config-alloy#typescript-react\" target=\"_blank\" rel=\"noopener noreferrer\">AlloyTeam ESLint 规则中的 TypeScript React 版本</a></p>\n<h2 id=\"troubleshootings\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#troubleshootings\"><span>Troubleshootings</span></a></h2>\n<h3 id=\"cannot-find-module-typescript-eslint-parser\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#cannot-find-module-typescript-eslint-parser\"><span>Cannot find module typescript-eslint-parser</span></a></h3>\n<p>您运行的是全局的 eslint，需要改为运行 <code v-pre>./node_modules/.bin/eslint</code>。</p>\n<h3 id=\"cannot-read-property-type-of-null\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#cannot-read-property-type-of-null\"><span>cannot read property type of null</span></a></h3>\n<p>需要关闭 <code v-pre>eslint-plugin-react</code> 中的规则 <code v-pre>react/jsx-indent</code>。</p>\n<p>如果仍然报错，多半是因为某些规则需要被关闭，可以使用「二分排错法」检查是哪个规则造成了错误。也欢迎<a href=\"https://github.com/AlloyTeam/eslint-config-alloy/issues/new\" target=\"_blank\" rel=\"noopener noreferrer\">给 eslint-config-alloy 提 issue</a>。</p>\n<h3 id=\"vs-code-没有显示出-eslint-的报错\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#vs-code-没有显示出-eslint-的报错\"><span>VS Code 没有显示出 ESLint 的报错</span></a></h3>\n<ol>\n<li>检查「文件 =&gt; 首选项 =&gt; 设置」中有没有配置正确</li>\n<li>检查必要的 npm 包有没有安装</li>\n<li>检查 <code v-pre>.eslintrc.js</code> 有没有配置</li>\n<li>检查文件是不是在 <code v-pre>.eslintignore</code> 中</li>\n</ol>\n<p>如果以上步骤都不奏效，则可以在「文件 =&gt; 首选项 =&gt; 设置」中配置 <code v-pre>&quot;eslint.trace.server&quot;: &quot;messages&quot;</code>，按 <code v-pre>Ctrl</code>+<code v-pre>Shift</code>+<code v-pre>U</code> 打开输出面板，然后选择 ESLint 输出，查看具体错误。</p>\n<figure><img src=\"@source/code/language/typescript/assets/vscode-output-eslint.png\" alt=\"VS Code 的 ESLint 输出\" tabindex=\"0\" loading=\"lazy\"><figcaption>VS Code 的 ESLint 输出</figcaption></figure>\n<h3 id=\"为什么-eslint-无法检查出使用了未定义的变量-no-undef-规则为什么被关闭了\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#为什么-eslint-无法检查出使用了未定义的变量-no-undef-规则为什么被关闭了\"><span>为什么 ESLint 无法检查出使用了未定义的变量(<code v-pre>no-undef</code> 规则为什么被关闭了)</span></a></h3>\n<p>因为 <code v-pre>typescript-eslint-parser</code> <a href=\"https://github.com/eslint/typescript-eslint-parser/issues/416\" target=\"_blank\" rel=\"noopener noreferrer\">无法支持 <code v-pre>no-undef</code> 规则</a>。它针对正确的接口定义会报错。</p>\n<p>所以我们一般会关闭 <code v-pre>no-undef</code> 规则。</p>\n<h3 id=\"为什么有些定义了的变量-比如使用-enum-定义的变量-未使用-eslint-却没有报错\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#为什么有些定义了的变量-比如使用-enum-定义的变量-未使用-eslint-却没有报错\"><span>为什么有些定义了的变量(比如使用 <code v-pre>enum</code> 定义的变量)未使用，ESLint 却没有报错</span></a></h3>\n<p>因为无法支持这种变量定义的检查。建议在 <code v-pre>tsconfig.json</code> 中添加以下配置，使 <code v-pre>tsc</code> 编译过程能够检查出定义了未使用的变量:</p>\n<div class=\"language-json\" data-highlighter=\"shiki\" data-ext=\"json\" data-title=\"json\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">{</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  \"compilerOptions\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">    \"noUnusedLocals\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">true</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">    \"noUnusedParameters\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">true</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n</div><h3 id=\"启用了-nounusedparameters-之后-只使用了第二个参数-但是又必须传入第一个参数-这就会报错了\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#启用了-nounusedparameters-之后-只使用了第二个参数-但是又必须传入第一个参数-这就会报错了\"><span>启用了 noUnusedParameters 之后，只使用了第二个参数，但是又必须传入第一个参数，这就会报错了</span></a></h3>\n<p>第一个参数以下划线开头即可，参考 <a href=\"https://github.com/Microsoft/TypeScript/issues/9458\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/Microsoft/TypeScript/issues/9458</a></p>\n","env":{"base":"/","filePath":"/Users/carson/Desktop/Mister-Hope.github.io-main/src/code/language/typescript/engineering/lint.md","filePathRelative":"code/language/typescript/engineering/lint.md","frontmatter":{"date":"2020-05-04T00:00:00.000Z","title":"代码检查","icon":"style","category":"TypeScript"},"sfcBlocks":{"template":{"type":"template","content":"<template><p>TypeScript 的代码检查应当使用 ESLint + <code v-pre>typescript-eslint-parser</code>。</p>\n<h2 id=\"什么是代码检查\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#什么是代码检查\"><span>什么是代码检查</span></a></h2>\n<p>代码检查主要是用来发现代码错误、统一代码风格。</p>\n<p>在 JavaScript 项目中，我们一般使用 ESLint 来进行代码检查。它通过插件化的特性极大的丰富了适用范围，搭配 <code v-pre>typescript-eslint-parser</code> 之后，甚至可以用来检查 TypeScript 代码。</p>\n<h2 id=\"为什么需要代码检查\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#为什么需要代码检查\"><span>为什么需要代码检查</span></a></h2>\n<p>有人会觉得，JavaScript 非常灵活，所以需要代码检查。而 TypeScript 已经能够在编译阶段检查出很多问题了，为什么还需要代码检查呢?</p>\n<p>因为 TypeScript 关注的重心是类型的匹配，而不是代码风格。当团队的人员越来越多时，同样的逻辑不同的人写出来可能会有很大的区别:</p>\n<ul>\n<li>缩进应该是四个空格还是两个空格?</li>\n<li>是否应该禁用 <code v-pre>var</code>?</li>\n<li>接口名是否应该以 <code v-pre>I</code> 开头?</li>\n<li>是否应该强制使用 <code v-pre>===</code> 而不是 <code v-pre>==</code>?</li>\n</ul>\n<p>这些问题 TypeScript 不会关注，但是却影响到多人协作开发时的效率、代码的可理解性以及可维护性。</p>\n<p>下面来看一个具体的例子:</p>\n<div class=\"language-ts line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"ts\" data-title=\"ts\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">let</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> myName</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"Tom\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">console</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">log</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">`My name is </span><span style=\"--shiki-light:#CA1243;--shiki-dark:#C678DD\">${</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">myNane</span><span style=\"--shiki-light:#CA1243;--shiki-dark:#C678DD\">}</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">`</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">console</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">log</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">`My name is </span><span style=\"--shiki-light:#CA1243;--shiki-dark:#C678DD\">${</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">myName</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">toStrng</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">()</span><span style=\"--shiki-light:#CA1243;--shiki-dark:#C678DD\">}</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">`</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">console</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">log</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">`My name is </span><span style=\"--shiki-light:#CA1243;--shiki-dark:#C678DD\">${</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">myName</span><span style=\"--shiki-light:#CA1243;--shiki-dark:#C678DD\">}</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">`</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// tsc 报错信息:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">//</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// index.ts(3,27): error TS2552: Cannot find name 'myNane'. Did you mean 'myName'?</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// index.ts(4,34): error TS2551: Property 'toStrng' does not exist on type 'string'. Did you mean 'toString'?</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">//</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">//</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">//</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// eslint 报错信息:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">//</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// /path/to/index.ts</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">//   3:27  error  'myNane' is not defined         no-undef</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">//   5:38  error  Missing semicolon               semi</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">//</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// ✖ 2 problems (2 errors, 0 warnings)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">//   1 errors, 0 warnings potentially fixable with the `--fix` option.</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><table>\n<thead>\n<tr>\n<th>存在的问题</th>\n<th><code v-pre>tsc</code> 是否报错</th>\n<th><code v-pre>eslint</code> 是否报错</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code v-pre>myName</code> 被误写成了 <code v-pre>myNane</code></td>\n<td>✅</td>\n<td>✅</td>\n</tr>\n<tr>\n<td><code v-pre>toString</code> 被误写成了 <code v-pre>toStrng</code></td>\n<td>✅️</td>\n<td>❌</td>\n</tr>\n<tr>\n<td>少了一个分号</td>\n<td>❌</td>\n<td>✅</td>\n</tr>\n</tbody>\n</table>\n<p>上例中，由于 <code v-pre>eslint</code> 无法识别 <code v-pre>myName</code> 存在哪些方法，所以对于拼写错误的 <code v-pre>toString</code> 没有检查出来。</p>\n<p>而代码风格的错误不影响编译，故少了一个分号的错误 <code v-pre>tsc</code> 没有检查出来。</p>\n<p>对于未定义的变量 <code v-pre>myNane</code>，<code v-pre>tsc</code> 可以检测出来。<code v-pre>eslint</code> 需要能够独立于某个编译环境运行，所以能检测出此类错误，而对于 TypeScript 代码，这其实是一种冗余的检测了。</p>\n<p>虽然发现代码错误比统一的代码风格更重要，但是当一个项目越来越庞大，开发人员也越来越多的时候，代码风格的约束还是必不可少的。</p>\n<h2 id=\"在-typescript-中使用-eslint\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#在-typescript-中使用-eslint\"><span>在 TypeScript 中使用 ESLint</span></a></h2>\n<h3 id=\"安装-eslint\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#安装-eslint\"><span>安装 ESLint</span></a></h3>\n<p>ESLint 可以安装在当前项目中或全局环境下，因为代码检查是项目的重要组成部分，所以我们一般会将它安装在当前项目中。可以运行下面的脚本来安装:</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">npm</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> install</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> eslint</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> --save-dev</span></span></code></pre>\n</div><p>由于 ESLint 默认使用 <a href=\"https://github.com/eslint/espree\" target=\"_blank\" rel=\"noopener noreferrer\">Espree</a> 进行语法解析，无法识别 TypeScript 的一些语法，故我们需要安装 <code v-pre>typescript-eslint-parser</code>，替代掉默认的解析器，别忘了同时安装 <code v-pre>typescript</code>:</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">npm</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> install</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> typescript</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> typescript-eslint-parser</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> --save-dev</span></span></code></pre>\n</div><p>由于 <code v-pre>typescript-eslint-parser</code> 对一部分 ESLint 规则支持性不好，故我们需要安装 <code v-pre>eslint-plugin-typescript</code>，弥补一些支持性不好的规则。</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">npm</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> install</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> eslint-plugin-typescript</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> --save-dev</span></span></code></pre>\n</div><h3 id=\"创建配置文件\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#创建配置文件\"><span>创建配置文件</span></a></h3>\n<p>ESLint 需要一个配置文件来决定对哪些规则进行检查，配置文件的名称一般是 <code v-pre>.eslintrc.js</code> 或 <code v-pre>.eslintrc.json</code>。</p>\n<p>当运行 ESLint 的时候检查一个文件的时候，它会首先尝试读取该文件的目录下的配置文件，然后再一级一级往上查找，将所找到的配置合并起来，作为当前被检查文件的配置。</p>\n<p>我们在项目的根目录下创建一个 <code v-pre>.eslintrc.js</code>，内容如下:</p>\n<div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">module</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">exports</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  parser</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"typescript-eslint-parser\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  plugins</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> [</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"typescript\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">],</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  rules</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    // @fixable 必须使用 === 或 !==，禁止使用 == 或 !=，与 null 比较时除外</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">    eqeqeq</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> [</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">      \"error\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">      \"always\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">      {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">        null</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"ignore\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">      },</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    ],</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    // 类和接口的命名必须遵守帕斯卡命名法，比如 PersianCat</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">    \"typescript/class-name-casing\"</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"error\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  },</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">};</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>以上配置中，我们指定了两个规则，其中 <code v-pre>eqeqeq</code> 是 ESLint 原生的规则(它要求必须使用 <code v-pre>===</code> 或 <code v-pre>!==</code>，禁止使用 <code v-pre>==</code> 或 <code v-pre>!=</code>，与 <code v-pre>null</code> 比较时除外)，<code v-pre>typescript/class-name-casing</code> 是 <code v-pre>eslint-plugin-typescript</code> 为 ESLint 增加的规则(它要求类和接口的命名必须遵守帕斯卡命名法，比如 <code v-pre>PersianCat</code>)。</p>\n<p>规则的取值一般是一个数组(上例中的 <code v-pre>eqeqeq</code>)，其中第一项是 <code v-pre>off</code>、<code v-pre>warn</code> 或 <code v-pre>error</code> 中的一个，表示关闭、警告和报错。后面的项都是该规则的其他配置。</p>\n<p>如果没有其他配置的话，则可以将规则的取值简写为数组中的第一项(上例中的 <code v-pre>typescript/class-name-casing</code>)。</p>\n<p>关闭、警告和报错的含义如下:</p>\n<ul>\n<li>关闭: 禁用此规则</li>\n<li>警告: 代码检查时输出错误信息，但是不会影响到 exit code</li>\n<li>报错: 发现错误时，不仅会输出错误信息，而且 exit code 将被设为 1(一般 exit code 不为 0 则表示执行出现错误)</li>\n</ul>\n<h3 id=\"检查一个-ts-文件\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#检查一个-ts-文件\"><span>检查一个 ts 文件</span></a></h3>\n<p>创建了配置文件之后，我们来创建一个 ts 文件看看是否能用 ESLint 去检查它了。</p>\n<p>创建一个新文件 <code v-pre>index.ts</code>，将以下内容复制进去:</p>\n<div class=\"language-ts line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"ts\" data-title=\"ts\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">interface</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> person</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">  name</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E5C07B\"> string</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">  age</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E5C07B\"> number</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">let</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> tom</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> person</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  name</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"Tom\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  age</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 25</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">if</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">tom</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">age</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> ==</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 25</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">  console</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">log</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">tom</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">name</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> +</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"is 25 years old.\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>然后执行以下命令:</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">./node_modules/.bin/eslint</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> index.ts</span></span></code></pre>\n</div><p>则会得到如下报错信息:</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">/path/to/index.ts</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">   1:11</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">  error</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">  Interface</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 'person'</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> must</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> be</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> PascalCased</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">  typescript/class-name-casing</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">  11:13</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">  error</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">  Expected</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> '==='</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> and</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> instead</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> saw</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> '=='</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">     eqeqeq</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">✖</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 2</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> problems</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (2 </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">errors,</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 0</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> warnings</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span></code></pre>\n</div><p>上面的结果显示，刚刚配置的两个规则都生效了: 接口 <code v-pre>person</code> 必须写成帕斯卡命名规范，<code v-pre>==</code> 必须写成 <code v-pre>===</code>。</p>\n<p>需要注意的是，我们使用的是 <code v-pre>./node_modules/.bin/eslint</code>，而不是全局的 <code v-pre>eslint</code> 脚本，这是因为代码检查是项目的重要组成部分，所以我们一般会将它安装在当前项目中。</p>\n<p>可是每次执行这么长一段脚本颇有不便，我们可以通过在 <code v-pre>package.json</code> 中添加一个 <code v-pre>script</code> 来创建一个 npm script 来简化这个步骤:</p>\n<div class=\"language-json\" data-highlighter=\"shiki\" data-ext=\"json\" data-title=\"json\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">{</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  \"scripts\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">    \"eslint\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"eslint index.ts\"</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n</div><p>这时只需执行 <code v-pre>npm run eslint</code> 即可。</p>\n<h3 id=\"检查整个项目的-ts-文件\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#检查整个项目的-ts-文件\"><span>检查整个项目的 ts 文件</span></a></h3>\n<p>我们的项目源文件一般是放在 <code v-pre>src</code> 目录下，所以需要将 <code v-pre>package.json</code> 中的 <code v-pre>eslint</code> 脚本改为对一个目录进行检查。由于 <code v-pre>eslint</code> 默认不会检查 <code v-pre>.ts</code> 后缀的文件，所以需要加上参数 <code v-pre>--ext .ts</code>:</p>\n<div class=\"language-json\" data-highlighter=\"shiki\" data-ext=\"json\" data-title=\"json\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">{</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  \"scripts\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">    \"eslint\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"eslint src --ext .ts\"</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n</div><p>此时执行 <code v-pre>npm run eslint</code> 即会检查 <code v-pre>src</code> 目录下的所有 <code v-pre>.ts</code> 后缀的文件。</p>\n<h3 id=\"在-vs-code-中集成-eslint-检查\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#在-vs-code-中集成-eslint-检查\"><span>在 VS Code 中集成 ESLint 检查</span></a></h3>\n<p>在编辑器中集成 ESLint 检查，可以在开发过程中就发现错误，极大的增加了开发效率。</p>\n<p>要在 VS Code 中集成 ESLint 检查，我们需要先安装 ESLint 插件，点击「扩展」按钮，搜索 ESLint，然后安装即可。</p>\n<p>VS Code 中的 ESLint 插件默认是不会检查 <code v-pre>.ts</code> 后缀的，需要在「文件 =&gt; 首选项 =&gt; 设置」中，添加以下配置:</p>\n<div class=\"language-json\" data-highlighter=\"shiki\" data-ext=\"json\" data-title=\"json\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">{</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  \"eslint.validate\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: [</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"javascript\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"javascriptreact\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"typescript\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">]</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n</div><p>这时再打开一个 <code v-pre>.ts</code> 文件，将鼠标移到红色提示处，即可看到这样的报错信息了:</p>\n<figure><img src=\"@source/code/language/typescript/assets/vscode-eslint-error.png\" alt=\"VS Code ESLint 错误信息\" tabindex=\"0\" loading=\"lazy\"><figcaption>VS Code ESLint 错误信息</figcaption></figure>\n<h3 id=\"使用-alloyteam-的-eslint-配置\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#使用-alloyteam-的-eslint-配置\"><span>使用 AlloyTeam 的 ESLint 配置</span></a></h3>\n<p>ESLint 原生的规则和 <code v-pre>eslint-plugin-typescript</code> 的规则太多了，而且原生的规则有一些在 TypeScript 中支持的不好，需要禁用掉。</p>\n<p>这里我推荐使用 <a href=\"https://github.com/AlloyTeam/eslint-config-alloy#typescript\" target=\"_blank\" rel=\"noopener noreferrer\">AlloyTeam ESLint 规则中的 TypeScript 版本</a>，它已经为我们提供了一套完善的配置规则。</p>\n<p>安装:</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">npm</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> install</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> --save-dev</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> eslint</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> typescript</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> typescript-eslint-parser</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> eslint-plugin-typescript</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> eslint-config-alloy</span></span></code></pre>\n</div><p>在您的项目根目录下创建 <code v-pre>.eslintrc.js</code>，并将以下内容复制到文件中:</p>\n<div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">module</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">exports</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  extends</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> [</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"eslint-config-alloy/typescript\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">],</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  globals</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    // 这里填入您的项目需要的全局变量</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    // 这里值为 false 表示这个全局变量不允许被重新赋值，比如:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    //</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    // jQuery: false,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    // $: false</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  },</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  rules</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    // 这里填入您的项目需要的个性化配置，比如:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    //</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    // // @fixable 一个缩进必须用两个空格替代</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    // 'indent': [</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    //     'error',</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    //     2,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    //     {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    //         SwitchCase: 1,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    //         flatTernaryExpressions: true</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    //     }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    // ]</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  },</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">};</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3 id=\"使用-eslint-检查-tsx-文件\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#使用-eslint-检查-tsx-文件\"><span>使用 ESLint 检查 tsx 文件</span></a></h3>\n<p>如果需要同时支持对 tsx 文件的检查，则需要对以上步骤做一些调整:</p>\n<h4 id=\"安装-eslint-plugin-react\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#安装-eslint-plugin-react\"><span>安装 <code v-pre>eslint-plugin-react</code></span></a></h4>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">npm</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> install</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> --save-dev</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> eslint-plugin-react</span></span></code></pre>\n</div><h4 id=\"package-json-中的-scripts-eslint-添加-tsx-后缀\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#package-json-中的-scripts-eslint-添加-tsx-后缀\"><span>package.json 中的 <code v-pre>scripts.eslint</code> 添加 <code v-pre>.tsx</code> 后缀</span></a></h4>\n<div class=\"language-json\" data-highlighter=\"shiki\" data-ext=\"json\" data-title=\"json\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">{</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  \"scripts\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">    \"eslint\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"eslint src --ext .ts,.tsx\"</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n</div><h4 id=\"vs-code-的配置中新增-typescriptreact-检查\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#vs-code-的配置中新增-typescriptreact-检查\"><span>VS Code 的配置中新增 typescriptreact 检查</span></a></h4>\n<div class=\"language-json\" data-highlighter=\"shiki\" data-ext=\"json\" data-title=\"json\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">{</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  \"eslint.validate\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: [</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">    \"javascript\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">    \"javascriptreact\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">    \"typescript\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">    \"typescriptreact\"</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  ]</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n</div><h4 id=\"使用-alloyteam-eslint-规则中的-typescript-react-版本\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#使用-alloyteam-eslint-规则中的-typescript-react-版本\"><span>使用 AlloyTeam ESLint 规则中的 TypeScript React 版本</span></a></h4>\n<p><a href=\"https://github.com/AlloyTeam/eslint-config-alloy#typescript-react\" target=\"_blank\" rel=\"noopener noreferrer\">AlloyTeam ESLint 规则中的 TypeScript React 版本</a></p>\n<h2 id=\"troubleshootings\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#troubleshootings\"><span>Troubleshootings</span></a></h2>\n<h3 id=\"cannot-find-module-typescript-eslint-parser\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#cannot-find-module-typescript-eslint-parser\"><span>Cannot find module typescript-eslint-parser</span></a></h3>\n<p>您运行的是全局的 eslint，需要改为运行 <code v-pre>./node_modules/.bin/eslint</code>。</p>\n<h3 id=\"cannot-read-property-type-of-null\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#cannot-read-property-type-of-null\"><span>cannot read property type of null</span></a></h3>\n<p>需要关闭 <code v-pre>eslint-plugin-react</code> 中的规则 <code v-pre>react/jsx-indent</code>。</p>\n<p>如果仍然报错，多半是因为某些规则需要被关闭，可以使用「二分排错法」检查是哪个规则造成了错误。也欢迎<a href=\"https://github.com/AlloyTeam/eslint-config-alloy/issues/new\" target=\"_blank\" rel=\"noopener noreferrer\">给 eslint-config-alloy 提 issue</a>。</p>\n<h3 id=\"vs-code-没有显示出-eslint-的报错\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#vs-code-没有显示出-eslint-的报错\"><span>VS Code 没有显示出 ESLint 的报错</span></a></h3>\n<ol>\n<li>检查「文件 =&gt; 首选项 =&gt; 设置」中有没有配置正确</li>\n<li>检查必要的 npm 包有没有安装</li>\n<li>检查 <code v-pre>.eslintrc.js</code> 有没有配置</li>\n<li>检查文件是不是在 <code v-pre>.eslintignore</code> 中</li>\n</ol>\n<p>如果以上步骤都不奏效，则可以在「文件 =&gt; 首选项 =&gt; 设置」中配置 <code v-pre>&quot;eslint.trace.server&quot;: &quot;messages&quot;</code>，按 <code v-pre>Ctrl</code>+<code v-pre>Shift</code>+<code v-pre>U</code> 打开输出面板，然后选择 ESLint 输出，查看具体错误。</p>\n<figure><img src=\"@source/code/language/typescript/assets/vscode-output-eslint.png\" alt=\"VS Code 的 ESLint 输出\" tabindex=\"0\" loading=\"lazy\"><figcaption>VS Code 的 ESLint 输出</figcaption></figure>\n<h3 id=\"为什么-eslint-无法检查出使用了未定义的变量-no-undef-规则为什么被关闭了\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#为什么-eslint-无法检查出使用了未定义的变量-no-undef-规则为什么被关闭了\"><span>为什么 ESLint 无法检查出使用了未定义的变量(<code v-pre>no-undef</code> 规则为什么被关闭了)</span></a></h3>\n<p>因为 <code v-pre>typescript-eslint-parser</code> <a href=\"https://github.com/eslint/typescript-eslint-parser/issues/416\" target=\"_blank\" rel=\"noopener noreferrer\">无法支持 <code v-pre>no-undef</code> 规则</a>。它针对正确的接口定义会报错。</p>\n<p>所以我们一般会关闭 <code v-pre>no-undef</code> 规则。</p>\n<h3 id=\"为什么有些定义了的变量-比如使用-enum-定义的变量-未使用-eslint-却没有报错\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#为什么有些定义了的变量-比如使用-enum-定义的变量-未使用-eslint-却没有报错\"><span>为什么有些定义了的变量(比如使用 <code v-pre>enum</code> 定义的变量)未使用，ESLint 却没有报错</span></a></h3>\n<p>因为无法支持这种变量定义的检查。建议在 <code v-pre>tsconfig.json</code> 中添加以下配置，使 <code v-pre>tsc</code> 编译过程能够检查出定义了未使用的变量:</p>\n<div class=\"language-json\" data-highlighter=\"shiki\" data-ext=\"json\" data-title=\"json\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">{</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  \"compilerOptions\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">    \"noUnusedLocals\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">true</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">    \"noUnusedParameters\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">true</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n</div><h3 id=\"启用了-nounusedparameters-之后-只使用了第二个参数-但是又必须传入第一个参数-这就会报错了\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#启用了-nounusedparameters-之后-只使用了第二个参数-但是又必须传入第一个参数-这就会报错了\"><span>启用了 noUnusedParameters 之后，只使用了第二个参数，但是又必须传入第一个参数，这就会报错了</span></a></h3>\n<p>第一个参数以下划线开头即可，参考 <a href=\"https://github.com/Microsoft/TypeScript/issues/9458\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/Microsoft/TypeScript/issues/9458</a></p>\n</template>","contentStripped":"<p>TypeScript 的代码检查应当使用 ESLint + <code v-pre>typescript-eslint-parser</code>。</p>\n<h2 id=\"什么是代码检查\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#什么是代码检查\"><span>什么是代码检查</span></a></h2>\n<p>代码检查主要是用来发现代码错误、统一代码风格。</p>\n<p>在 JavaScript 项目中，我们一般使用 ESLint 来进行代码检查。它通过插件化的特性极大的丰富了适用范围，搭配 <code v-pre>typescript-eslint-parser</code> 之后，甚至可以用来检查 TypeScript 代码。</p>\n<h2 id=\"为什么需要代码检查\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#为什么需要代码检查\"><span>为什么需要代码检查</span></a></h2>\n<p>有人会觉得，JavaScript 非常灵活，所以需要代码检查。而 TypeScript 已经能够在编译阶段检查出很多问题了，为什么还需要代码检查呢?</p>\n<p>因为 TypeScript 关注的重心是类型的匹配，而不是代码风格。当团队的人员越来越多时，同样的逻辑不同的人写出来可能会有很大的区别:</p>\n<ul>\n<li>缩进应该是四个空格还是两个空格?</li>\n<li>是否应该禁用 <code v-pre>var</code>?</li>\n<li>接口名是否应该以 <code v-pre>I</code> 开头?</li>\n<li>是否应该强制使用 <code v-pre>===</code> 而不是 <code v-pre>==</code>?</li>\n</ul>\n<p>这些问题 TypeScript 不会关注，但是却影响到多人协作开发时的效率、代码的可理解性以及可维护性。</p>\n<p>下面来看一个具体的例子:</p>\n<div class=\"language-ts line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"ts\" data-title=\"ts\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">let</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> myName</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"Tom\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">console</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">log</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">`My name is </span><span style=\"--shiki-light:#CA1243;--shiki-dark:#C678DD\">${</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">myNane</span><span style=\"--shiki-light:#CA1243;--shiki-dark:#C678DD\">}</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">`</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">console</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">log</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">`My name is </span><span style=\"--shiki-light:#CA1243;--shiki-dark:#C678DD\">${</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">myName</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">toStrng</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">()</span><span style=\"--shiki-light:#CA1243;--shiki-dark:#C678DD\">}</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">`</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">console</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">log</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">`My name is </span><span style=\"--shiki-light:#CA1243;--shiki-dark:#C678DD\">${</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">myName</span><span style=\"--shiki-light:#CA1243;--shiki-dark:#C678DD\">}</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">`</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// tsc 报错信息:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">//</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// index.ts(3,27): error TS2552: Cannot find name 'myNane'. Did you mean 'myName'?</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// index.ts(4,34): error TS2551: Property 'toStrng' does not exist on type 'string'. Did you mean 'toString'?</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">//</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">//</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">//</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// eslint 报错信息:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">//</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// /path/to/index.ts</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">//   3:27  error  'myNane' is not defined         no-undef</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">//   5:38  error  Missing semicolon               semi</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">//</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// ✖ 2 problems (2 errors, 0 warnings)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">//   1 errors, 0 warnings potentially fixable with the `--fix` option.</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><table>\n<thead>\n<tr>\n<th>存在的问题</th>\n<th><code v-pre>tsc</code> 是否报错</th>\n<th><code v-pre>eslint</code> 是否报错</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code v-pre>myName</code> 被误写成了 <code v-pre>myNane</code></td>\n<td>✅</td>\n<td>✅</td>\n</tr>\n<tr>\n<td><code v-pre>toString</code> 被误写成了 <code v-pre>toStrng</code></td>\n<td>✅️</td>\n<td>❌</td>\n</tr>\n<tr>\n<td>少了一个分号</td>\n<td>❌</td>\n<td>✅</td>\n</tr>\n</tbody>\n</table>\n<p>上例中，由于 <code v-pre>eslint</code> 无法识别 <code v-pre>myName</code> 存在哪些方法，所以对于拼写错误的 <code v-pre>toString</code> 没有检查出来。</p>\n<p>而代码风格的错误不影响编译，故少了一个分号的错误 <code v-pre>tsc</code> 没有检查出来。</p>\n<p>对于未定义的变量 <code v-pre>myNane</code>，<code v-pre>tsc</code> 可以检测出来。<code v-pre>eslint</code> 需要能够独立于某个编译环境运行，所以能检测出此类错误，而对于 TypeScript 代码，这其实是一种冗余的检测了。</p>\n<p>虽然发现代码错误比统一的代码风格更重要，但是当一个项目越来越庞大，开发人员也越来越多的时候，代码风格的约束还是必不可少的。</p>\n<h2 id=\"在-typescript-中使用-eslint\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#在-typescript-中使用-eslint\"><span>在 TypeScript 中使用 ESLint</span></a></h2>\n<h3 id=\"安装-eslint\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#安装-eslint\"><span>安装 ESLint</span></a></h3>\n<p>ESLint 可以安装在当前项目中或全局环境下，因为代码检查是项目的重要组成部分，所以我们一般会将它安装在当前项目中。可以运行下面的脚本来安装:</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">npm</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> install</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> eslint</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> --save-dev</span></span></code></pre>\n</div><p>由于 ESLint 默认使用 <a href=\"https://github.com/eslint/espree\" target=\"_blank\" rel=\"noopener noreferrer\">Espree</a> 进行语法解析，无法识别 TypeScript 的一些语法，故我们需要安装 <code v-pre>typescript-eslint-parser</code>，替代掉默认的解析器，别忘了同时安装 <code v-pre>typescript</code>:</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">npm</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> install</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> typescript</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> typescript-eslint-parser</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> --save-dev</span></span></code></pre>\n</div><p>由于 <code v-pre>typescript-eslint-parser</code> 对一部分 ESLint 规则支持性不好，故我们需要安装 <code v-pre>eslint-plugin-typescript</code>，弥补一些支持性不好的规则。</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">npm</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> install</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> eslint-plugin-typescript</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> --save-dev</span></span></code></pre>\n</div><h3 id=\"创建配置文件\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#创建配置文件\"><span>创建配置文件</span></a></h3>\n<p>ESLint 需要一个配置文件来决定对哪些规则进行检查，配置文件的名称一般是 <code v-pre>.eslintrc.js</code> 或 <code v-pre>.eslintrc.json</code>。</p>\n<p>当运行 ESLint 的时候检查一个文件的时候，它会首先尝试读取该文件的目录下的配置文件，然后再一级一级往上查找，将所找到的配置合并起来，作为当前被检查文件的配置。</p>\n<p>我们在项目的根目录下创建一个 <code v-pre>.eslintrc.js</code>，内容如下:</p>\n<div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">module</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">exports</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  parser</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"typescript-eslint-parser\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  plugins</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> [</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"typescript\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">],</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  rules</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    // @fixable 必须使用 === 或 !==，禁止使用 == 或 !=，与 null 比较时除外</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">    eqeqeq</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> [</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">      \"error\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">      \"always\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">      {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">        null</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"ignore\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">      },</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    ],</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    // 类和接口的命名必须遵守帕斯卡命名法，比如 PersianCat</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">    \"typescript/class-name-casing\"</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"error\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  },</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">};</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>以上配置中，我们指定了两个规则，其中 <code v-pre>eqeqeq</code> 是 ESLint 原生的规则(它要求必须使用 <code v-pre>===</code> 或 <code v-pre>!==</code>，禁止使用 <code v-pre>==</code> 或 <code v-pre>!=</code>，与 <code v-pre>null</code> 比较时除外)，<code v-pre>typescript/class-name-casing</code> 是 <code v-pre>eslint-plugin-typescript</code> 为 ESLint 增加的规则(它要求类和接口的命名必须遵守帕斯卡命名法，比如 <code v-pre>PersianCat</code>)。</p>\n<p>规则的取值一般是一个数组(上例中的 <code v-pre>eqeqeq</code>)，其中第一项是 <code v-pre>off</code>、<code v-pre>warn</code> 或 <code v-pre>error</code> 中的一个，表示关闭、警告和报错。后面的项都是该规则的其他配置。</p>\n<p>如果没有其他配置的话，则可以将规则的取值简写为数组中的第一项(上例中的 <code v-pre>typescript/class-name-casing</code>)。</p>\n<p>关闭、警告和报错的含义如下:</p>\n<ul>\n<li>关闭: 禁用此规则</li>\n<li>警告: 代码检查时输出错误信息，但是不会影响到 exit code</li>\n<li>报错: 发现错误时，不仅会输出错误信息，而且 exit code 将被设为 1(一般 exit code 不为 0 则表示执行出现错误)</li>\n</ul>\n<h3 id=\"检查一个-ts-文件\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#检查一个-ts-文件\"><span>检查一个 ts 文件</span></a></h3>\n<p>创建了配置文件之后，我们来创建一个 ts 文件看看是否能用 ESLint 去检查它了。</p>\n<p>创建一个新文件 <code v-pre>index.ts</code>，将以下内容复制进去:</p>\n<div class=\"language-ts line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"ts\" data-title=\"ts\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">interface</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> person</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">  name</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E5C07B\"> string</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">  age</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E5C07B\"> number</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">let</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> tom</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> person</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  name</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"Tom\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  age</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 25</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">if</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">tom</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">age</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> ==</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 25</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">  console</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">log</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">tom</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">name</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> +</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"is 25 years old.\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>然后执行以下命令:</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">./node_modules/.bin/eslint</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> index.ts</span></span></code></pre>\n</div><p>则会得到如下报错信息:</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">/path/to/index.ts</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">   1:11</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">  error</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">  Interface</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 'person'</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> must</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> be</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> PascalCased</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">  typescript/class-name-casing</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">  11:13</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">  error</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">  Expected</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> '==='</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> and</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> instead</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> saw</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> '=='</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">     eqeqeq</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">✖</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 2</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> problems</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (2 </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">errors,</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 0</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> warnings</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span></code></pre>\n</div><p>上面的结果显示，刚刚配置的两个规则都生效了: 接口 <code v-pre>person</code> 必须写成帕斯卡命名规范，<code v-pre>==</code> 必须写成 <code v-pre>===</code>。</p>\n<p>需要注意的是，我们使用的是 <code v-pre>./node_modules/.bin/eslint</code>，而不是全局的 <code v-pre>eslint</code> 脚本，这是因为代码检查是项目的重要组成部分，所以我们一般会将它安装在当前项目中。</p>\n<p>可是每次执行这么长一段脚本颇有不便，我们可以通过在 <code v-pre>package.json</code> 中添加一个 <code v-pre>script</code> 来创建一个 npm script 来简化这个步骤:</p>\n<div class=\"language-json\" data-highlighter=\"shiki\" data-ext=\"json\" data-title=\"json\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">{</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  \"scripts\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">    \"eslint\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"eslint index.ts\"</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n</div><p>这时只需执行 <code v-pre>npm run eslint</code> 即可。</p>\n<h3 id=\"检查整个项目的-ts-文件\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#检查整个项目的-ts-文件\"><span>检查整个项目的 ts 文件</span></a></h3>\n<p>我们的项目源文件一般是放在 <code v-pre>src</code> 目录下，所以需要将 <code v-pre>package.json</code> 中的 <code v-pre>eslint</code> 脚本改为对一个目录进行检查。由于 <code v-pre>eslint</code> 默认不会检查 <code v-pre>.ts</code> 后缀的文件，所以需要加上参数 <code v-pre>--ext .ts</code>:</p>\n<div class=\"language-json\" data-highlighter=\"shiki\" data-ext=\"json\" data-title=\"json\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">{</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  \"scripts\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">    \"eslint\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"eslint src --ext .ts\"</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n</div><p>此时执行 <code v-pre>npm run eslint</code> 即会检查 <code v-pre>src</code> 目录下的所有 <code v-pre>.ts</code> 后缀的文件。</p>\n<h3 id=\"在-vs-code-中集成-eslint-检查\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#在-vs-code-中集成-eslint-检查\"><span>在 VS Code 中集成 ESLint 检查</span></a></h3>\n<p>在编辑器中集成 ESLint 检查，可以在开发过程中就发现错误，极大的增加了开发效率。</p>\n<p>要在 VS Code 中集成 ESLint 检查，我们需要先安装 ESLint 插件，点击「扩展」按钮，搜索 ESLint，然后安装即可。</p>\n<p>VS Code 中的 ESLint 插件默认是不会检查 <code v-pre>.ts</code> 后缀的，需要在「文件 =&gt; 首选项 =&gt; 设置」中，添加以下配置:</p>\n<div class=\"language-json\" data-highlighter=\"shiki\" data-ext=\"json\" data-title=\"json\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">{</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  \"eslint.validate\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: [</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"javascript\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"javascriptreact\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"typescript\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">]</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n</div><p>这时再打开一个 <code v-pre>.ts</code> 文件，将鼠标移到红色提示处，即可看到这样的报错信息了:</p>\n<figure><img src=\"@source/code/language/typescript/assets/vscode-eslint-error.png\" alt=\"VS Code ESLint 错误信息\" tabindex=\"0\" loading=\"lazy\"><figcaption>VS Code ESLint 错误信息</figcaption></figure>\n<h3 id=\"使用-alloyteam-的-eslint-配置\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#使用-alloyteam-的-eslint-配置\"><span>使用 AlloyTeam 的 ESLint 配置</span></a></h3>\n<p>ESLint 原生的规则和 <code v-pre>eslint-plugin-typescript</code> 的规则太多了，而且原生的规则有一些在 TypeScript 中支持的不好，需要禁用掉。</p>\n<p>这里我推荐使用 <a href=\"https://github.com/AlloyTeam/eslint-config-alloy#typescript\" target=\"_blank\" rel=\"noopener noreferrer\">AlloyTeam ESLint 规则中的 TypeScript 版本</a>，它已经为我们提供了一套完善的配置规则。</p>\n<p>安装:</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">npm</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> install</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> --save-dev</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> eslint</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> typescript</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> typescript-eslint-parser</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> eslint-plugin-typescript</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> eslint-config-alloy</span></span></code></pre>\n</div><p>在您的项目根目录下创建 <code v-pre>.eslintrc.js</code>，并将以下内容复制到文件中:</p>\n<div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">module</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">exports</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  extends</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> [</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"eslint-config-alloy/typescript\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">],</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  globals</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    // 这里填入您的项目需要的全局变量</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    // 这里值为 false 表示这个全局变量不允许被重新赋值，比如:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    //</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    // jQuery: false,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    // $: false</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  },</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  rules</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    // 这里填入您的项目需要的个性化配置，比如:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    //</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    // // @fixable 一个缩进必须用两个空格替代</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    // 'indent': [</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    //     'error',</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    //     2,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    //     {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    //         SwitchCase: 1,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    //         flatTernaryExpressions: true</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    //     }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    // ]</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  },</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">};</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3 id=\"使用-eslint-检查-tsx-文件\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#使用-eslint-检查-tsx-文件\"><span>使用 ESLint 检查 tsx 文件</span></a></h3>\n<p>如果需要同时支持对 tsx 文件的检查，则需要对以上步骤做一些调整:</p>\n<h4 id=\"安装-eslint-plugin-react\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#安装-eslint-plugin-react\"><span>安装 <code v-pre>eslint-plugin-react</code></span></a></h4>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">npm</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> install</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> --save-dev</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> eslint-plugin-react</span></span></code></pre>\n</div><h4 id=\"package-json-中的-scripts-eslint-添加-tsx-后缀\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#package-json-中的-scripts-eslint-添加-tsx-后缀\"><span>package.json 中的 <code v-pre>scripts.eslint</code> 添加 <code v-pre>.tsx</code> 后缀</span></a></h4>\n<div class=\"language-json\" data-highlighter=\"shiki\" data-ext=\"json\" data-title=\"json\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">{</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  \"scripts\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">    \"eslint\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"eslint src --ext .ts,.tsx\"</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n</div><h4 id=\"vs-code-的配置中新增-typescriptreact-检查\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#vs-code-的配置中新增-typescriptreact-检查\"><span>VS Code 的配置中新增 typescriptreact 检查</span></a></h4>\n<div class=\"language-json\" data-highlighter=\"shiki\" data-ext=\"json\" data-title=\"json\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">{</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  \"eslint.validate\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: [</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">    \"javascript\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">    \"javascriptreact\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">    \"typescript\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">    \"typescriptreact\"</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  ]</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n</div><h4 id=\"使用-alloyteam-eslint-规则中的-typescript-react-版本\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#使用-alloyteam-eslint-规则中的-typescript-react-版本\"><span>使用 AlloyTeam ESLint 规则中的 TypeScript React 版本</span></a></h4>\n<p><a href=\"https://github.com/AlloyTeam/eslint-config-alloy#typescript-react\" target=\"_blank\" rel=\"noopener noreferrer\">AlloyTeam ESLint 规则中的 TypeScript React 版本</a></p>\n<h2 id=\"troubleshootings\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#troubleshootings\"><span>Troubleshootings</span></a></h2>\n<h3 id=\"cannot-find-module-typescript-eslint-parser\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#cannot-find-module-typescript-eslint-parser\"><span>Cannot find module typescript-eslint-parser</span></a></h3>\n<p>您运行的是全局的 eslint，需要改为运行 <code v-pre>./node_modules/.bin/eslint</code>。</p>\n<h3 id=\"cannot-read-property-type-of-null\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#cannot-read-property-type-of-null\"><span>cannot read property type of null</span></a></h3>\n<p>需要关闭 <code v-pre>eslint-plugin-react</code> 中的规则 <code v-pre>react/jsx-indent</code>。</p>\n<p>如果仍然报错，多半是因为某些规则需要被关闭，可以使用「二分排错法」检查是哪个规则造成了错误。也欢迎<a href=\"https://github.com/AlloyTeam/eslint-config-alloy/issues/new\" target=\"_blank\" rel=\"noopener noreferrer\">给 eslint-config-alloy 提 issue</a>。</p>\n<h3 id=\"vs-code-没有显示出-eslint-的报错\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#vs-code-没有显示出-eslint-的报错\"><span>VS Code 没有显示出 ESLint 的报错</span></a></h3>\n<ol>\n<li>检查「文件 =&gt; 首选项 =&gt; 设置」中有没有配置正确</li>\n<li>检查必要的 npm 包有没有安装</li>\n<li>检查 <code v-pre>.eslintrc.js</code> 有没有配置</li>\n<li>检查文件是不是在 <code v-pre>.eslintignore</code> 中</li>\n</ol>\n<p>如果以上步骤都不奏效，则可以在「文件 =&gt; 首选项 =&gt; 设置」中配置 <code v-pre>&quot;eslint.trace.server&quot;: &quot;messages&quot;</code>，按 <code v-pre>Ctrl</code>+<code v-pre>Shift</code>+<code v-pre>U</code> 打开输出面板，然后选择 ESLint 输出，查看具体错误。</p>\n<figure><img src=\"@source/code/language/typescript/assets/vscode-output-eslint.png\" alt=\"VS Code 的 ESLint 输出\" tabindex=\"0\" loading=\"lazy\"><figcaption>VS Code 的 ESLint 输出</figcaption></figure>\n<h3 id=\"为什么-eslint-无法检查出使用了未定义的变量-no-undef-规则为什么被关闭了\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#为什么-eslint-无法检查出使用了未定义的变量-no-undef-规则为什么被关闭了\"><span>为什么 ESLint 无法检查出使用了未定义的变量(<code v-pre>no-undef</code> 规则为什么被关闭了)</span></a></h3>\n<p>因为 <code v-pre>typescript-eslint-parser</code> <a href=\"https://github.com/eslint/typescript-eslint-parser/issues/416\" target=\"_blank\" rel=\"noopener noreferrer\">无法支持 <code v-pre>no-undef</code> 规则</a>。它针对正确的接口定义会报错。</p>\n<p>所以我们一般会关闭 <code v-pre>no-undef</code> 规则。</p>\n<h3 id=\"为什么有些定义了的变量-比如使用-enum-定义的变量-未使用-eslint-却没有报错\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#为什么有些定义了的变量-比如使用-enum-定义的变量-未使用-eslint-却没有报错\"><span>为什么有些定义了的变量(比如使用 <code v-pre>enum</code> 定义的变量)未使用，ESLint 却没有报错</span></a></h3>\n<p>因为无法支持这种变量定义的检查。建议在 <code v-pre>tsconfig.json</code> 中添加以下配置，使 <code v-pre>tsc</code> 编译过程能够检查出定义了未使用的变量:</p>\n<div class=\"language-json\" data-highlighter=\"shiki\" data-ext=\"json\" data-title=\"json\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">{</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  \"compilerOptions\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">    \"noUnusedLocals\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">true</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">    \"noUnusedParameters\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">true</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n</div><h3 id=\"启用了-nounusedparameters-之后-只使用了第二个参数-但是又必须传入第一个参数-这就会报错了\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#启用了-nounusedparameters-之后-只使用了第二个参数-但是又必须传入第一个参数-这就会报错了\"><span>启用了 noUnusedParameters 之后，只使用了第二个参数，但是又必须传入第一个参数，这就会报错了</span></a></h3>\n<p>第一个参数以下划线开头即可，参考 <a href=\"https://github.com/Microsoft/TypeScript/issues/9458\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/Microsoft/TypeScript/issues/9458</a></p>\n","tagOpen":"<template>","tagClose":"</template>"},"script":null,"scriptSetup":null,"scripts":[],"styles":[],"customBlocks":[]},"content":"\nTypeScript 的代码检查应当使用 ESLint + `typescript-eslint-parser`。\n\n## 什么是代码检查\n\n代码检查主要是用来发现代码错误、统一代码风格。\n\n在 JavaScript 项目中，我们一般使用 ESLint 来进行代码检查。它通过插件化的特性极大的丰富了适用范围，搭配 `typescript-eslint-parser` 之后，甚至可以用来检查 TypeScript 代码。\n\n## 为什么需要代码检查\n\n有人会觉得，JavaScript 非常灵活，所以需要代码检查。而 TypeScript 已经能够在编译阶段检查出很多问题了，为什么还需要代码检查呢?\n\n因为 TypeScript 关注的重心是类型的匹配，而不是代码风格。当团队的人员越来越多时，同样的逻辑不同的人写出来可能会有很大的区别:\n\n- 缩进应该是四个空格还是两个空格?\n- 是否应该禁用 `var`?\n- 接口名是否应该以 `I` 开头?\n- 是否应该强制使用 `===` 而不是 `==`?\n\n这些问题 TypeScript 不会关注，但是却影响到多人协作开发时的效率、代码的可理解性以及可维护性。\n\n下面来看一个具体的例子:\n\n```ts\nlet myName = \"Tom\";\n\nconsole.log(`My name is ${myNane}`);\nconsole.log(`My name is ${myName.toStrng()}`);\nconsole.log(`My name is ${myName}`);\n\n// tsc 报错信息:\n//\n// index.ts(3,27): error TS2552: Cannot find name 'myNane'. Did you mean 'myName'?\n// index.ts(4,34): error TS2551: Property 'toStrng' does not exist on type 'string'. Did you mean 'toString'?\n//\n//\n//\n// eslint 报错信息:\n//\n// /path/to/index.ts\n//   3:27  error  'myNane' is not defined         no-undef\n//   5:38  error  Missing semicolon               semi\n//\n// ✖ 2 problems (2 errors, 0 warnings)\n//   1 errors, 0 warnings potentially fixable with the `--fix` option.\n```\n\n| 存在的问题                      | `tsc` 是否报错 | `eslint` 是否报错 |\n| ------------------------------- | -------------- | ----------------- |\n| `myName` 被误写成了 `myNane`    | ✅             | ✅                |\n| `toString` 被误写成了 `toStrng` | ✅️            | ❌                |\n| 少了一个分号                    | ❌             | ✅                |\n\n上例中，由于 `eslint` 无法识别 `myName` 存在哪些方法，所以对于拼写错误的 `toString` 没有检查出来。\n\n而代码风格的错误不影响编译，故少了一个分号的错误 `tsc` 没有检查出来。\n\n对于未定义的变量 `myNane`，`tsc` 可以检测出来。`eslint` 需要能够独立于某个编译环境运行，所以能检测出此类错误，而对于 TypeScript 代码，这其实是一种冗余的检测了。\n\n虽然发现代码错误比统一的代码风格更重要，但是当一个项目越来越庞大，开发人员也越来越多的时候，代码风格的约束还是必不可少的。\n\n## 在 TypeScript 中使用 ESLint\n\n### 安装 ESLint\n\nESLint 可以安装在当前项目中或全局环境下，因为代码检查是项目的重要组成部分，所以我们一般会将它安装在当前项目中。可以运行下面的脚本来安装:\n\n```bash\nnpm install eslint --save-dev\n```\n\n由于 ESLint 默认使用 [Espree](https://github.com/eslint/espree) 进行语法解析，无法识别 TypeScript 的一些语法，故我们需要安装 `typescript-eslint-parser`，替代掉默认的解析器，别忘了同时安装 `typescript`:\n\n```bash\nnpm install typescript typescript-eslint-parser --save-dev\n```\n\n由于 `typescript-eslint-parser` 对一部分 ESLint 规则支持性不好，故我们需要安装 `eslint-plugin-typescript`，弥补一些支持性不好的规则。\n\n```bash\nnpm install eslint-plugin-typescript --save-dev\n```\n\n### 创建配置文件\n\nESLint 需要一个配置文件来决定对哪些规则进行检查，配置文件的名称一般是 `.eslintrc.js` 或 `.eslintrc.json`。\n\n当运行 ESLint 的时候检查一个文件的时候，它会首先尝试读取该文件的目录下的配置文件，然后再一级一级往上查找，将所找到的配置合并起来，作为当前被检查文件的配置。\n\n我们在项目的根目录下创建一个 `.eslintrc.js`，内容如下:\n\n```js\nmodule.exports = {\n  parser: \"typescript-eslint-parser\",\n  plugins: [\"typescript\"],\n  rules: {\n    // @fixable 必须使用 === 或 !==，禁止使用 == 或 !=，与 null 比较时除外\n    eqeqeq: [\n      \"error\",\n      \"always\",\n      {\n        null: \"ignore\",\n      },\n    ],\n    // 类和接口的命名必须遵守帕斯卡命名法，比如 PersianCat\n    \"typescript/class-name-casing\": \"error\",\n  },\n};\n```\n\n以上配置中，我们指定了两个规则，其中 `eqeqeq` 是 ESLint 原生的规则(它要求必须使用 `===` 或 `!==`，禁止使用 `==` 或 `!=`，与 `null` 比较时除外)，`typescript/class-name-casing` 是 `eslint-plugin-typescript` 为 ESLint 增加的规则(它要求类和接口的命名必须遵守帕斯卡命名法，比如 `PersianCat`)。\n\n规则的取值一般是一个数组(上例中的 `eqeqeq`)，其中第一项是 `off`、`warn` 或 `error` 中的一个，表示关闭、警告和报错。后面的项都是该规则的其他配置。\n\n如果没有其他配置的话，则可以将规则的取值简写为数组中的第一项(上例中的 `typescript/class-name-casing`)。\n\n关闭、警告和报错的含义如下:\n\n- 关闭: 禁用此规则\n- 警告: 代码检查时输出错误信息，但是不会影响到 exit code\n- 报错: 发现错误时，不仅会输出错误信息，而且 exit code 将被设为 1(一般 exit code 不为 0 则表示执行出现错误)\n\n### 检查一个 ts 文件\n\n创建了配置文件之后，我们来创建一个 ts 文件看看是否能用 ESLint 去检查它了。\n\n创建一个新文件 `index.ts`，将以下内容复制进去:\n\n```ts\ninterface person {\n  name: string;\n  age: number;\n}\n\nlet tom: person = {\n  name: \"Tom\",\n  age: 25,\n};\n\nif (tom.age == 25) {\n  console.log(tom.name + \"is 25 years old.\");\n}\n```\n\n然后执行以下命令:\n\n```bash\n./node_modules/.bin/eslint index.ts\n```\n\n则会得到如下报错信息:\n\n```bash\n/path/to/index.ts\n   1:11  error  Interface 'person' must be PascalCased  typescript/class-name-casing\n  11:13  error  Expected '===' and instead saw '=='     eqeqeq\n\n✖ 2 problems (2 errors, 0 warnings)\n```\n\n上面的结果显示，刚刚配置的两个规则都生效了: 接口 `person` 必须写成帕斯卡命名规范，`==` 必须写成 `===`。\n\n需要注意的是，我们使用的是 `./node_modules/.bin/eslint`，而不是全局的 `eslint` 脚本，这是因为代码检查是项目的重要组成部分，所以我们一般会将它安装在当前项目中。\n\n可是每次执行这么长一段脚本颇有不便，我们可以通过在 `package.json` 中添加一个 `script` 来创建一个 npm script 来简化这个步骤:\n\n```json\n{\n  \"scripts\": {\n    \"eslint\": \"eslint index.ts\"\n  }\n}\n```\n\n这时只需执行 `npm run eslint` 即可。\n\n### 检查整个项目的 ts 文件\n\n我们的项目源文件一般是放在 `src` 目录下，所以需要将 `package.json` 中的 `eslint` 脚本改为对一个目录进行检查。由于 `eslint` 默认不会检查 `.ts` 后缀的文件，所以需要加上参数 `--ext .ts`:\n\n```json\n{\n  \"scripts\": {\n    \"eslint\": \"eslint src --ext .ts\"\n  }\n}\n```\n\n此时执行 `npm run eslint` 即会检查 `src` 目录下的所有 `.ts` 后缀的文件。\n\n### 在 VS Code 中集成 ESLint 检查\n\n在编辑器中集成 ESLint 检查，可以在开发过程中就发现错误，极大的增加了开发效率。\n\n要在 VS Code 中集成 ESLint 检查，我们需要先安装 ESLint 插件，点击「扩展」按钮，搜索 ESLint，然后安装即可。\n\nVS Code 中的 ESLint 插件默认是不会检查 `.ts` 后缀的，需要在「文件 => 首选项 => 设置」中，添加以下配置:\n\n```json\n{\n  \"eslint.validate\": [\"javascript\", \"javascriptreact\", \"typescript\"]\n}\n```\n\n这时再打开一个 `.ts` 文件，将鼠标移到红色提示处，即可看到这样的报错信息了:\n\n![VS Code ESLint 错误信息](../assets/vscode-eslint-error.png)\n\n### 使用 AlloyTeam 的 ESLint 配置\n\nESLint 原生的规则和 `eslint-plugin-typescript` 的规则太多了，而且原生的规则有一些在 TypeScript 中支持的不好，需要禁用掉。\n\n这里我推荐使用 [AlloyTeam ESLint 规则中的 TypeScript 版本](https://github.com/AlloyTeam/eslint-config-alloy#typescript)，它已经为我们提供了一套完善的配置规则。\n\n安装:\n\n```bash\nnpm install --save-dev eslint typescript typescript-eslint-parser eslint-plugin-typescript eslint-config-alloy\n```\n\n在您的项目根目录下创建 `.eslintrc.js`，并将以下内容复制到文件中:\n\n```js\nmodule.exports = {\n  extends: [\"eslint-config-alloy/typescript\"],\n  globals: {\n    // 这里填入您的项目需要的全局变量\n    // 这里值为 false 表示这个全局变量不允许被重新赋值，比如:\n    //\n    // jQuery: false,\n    // $: false\n  },\n  rules: {\n    // 这里填入您的项目需要的个性化配置，比如:\n    //\n    // // @fixable 一个缩进必须用两个空格替代\n    // 'indent': [\n    //     'error',\n    //     2,\n    //     {\n    //         SwitchCase: 1,\n    //         flatTernaryExpressions: true\n    //     }\n    // ]\n  },\n};\n```\n\n### 使用 ESLint 检查 tsx 文件\n\n如果需要同时支持对 tsx 文件的检查，则需要对以上步骤做一些调整:\n\n#### 安装 `eslint-plugin-react`\n\n```bash\nnpm install --save-dev eslint-plugin-react\n```\n\n#### package.json 中的 `scripts.eslint` 添加 `.tsx` 后缀\n\n```json\n{\n  \"scripts\": {\n    \"eslint\": \"eslint src --ext .ts,.tsx\"\n  }\n}\n```\n\n#### VS Code 的配置中新增 typescriptreact 检查\n\n```json\n{\n  \"eslint.validate\": [\n    \"javascript\",\n    \"javascriptreact\",\n    \"typescript\",\n    \"typescriptreact\"\n  ]\n}\n```\n\n#### 使用 AlloyTeam ESLint 规则中的 TypeScript React 版本\n\n[AlloyTeam ESLint 规则中的 TypeScript React 版本](https://github.com/AlloyTeam/eslint-config-alloy#typescript-react)\n\n## Troubleshootings\n\n### Cannot find module typescript-eslint-parser\n\n您运行的是全局的 eslint，需要改为运行 `./node_modules/.bin/eslint`。\n\n### cannot read property type of null\n\n需要关闭 `eslint-plugin-react` 中的规则 `react/jsx-indent`。\n\n如果仍然报错，多半是因为某些规则需要被关闭，可以使用「二分排错法」检查是哪个规则造成了错误。也欢迎[给 eslint-config-alloy 提 issue](https://github.com/AlloyTeam/eslint-config-alloy/issues/new)。\n\n### VS Code 没有显示出 ESLint 的报错\n\n1. 检查「文件 => 首选项 => 设置」中有没有配置正确\n1. 检查必要的 npm 包有没有安装\n1. 检查 `.eslintrc.js` 有没有配置\n1. 检查文件是不是在 `.eslintignore` 中\n\n如果以上步骤都不奏效，则可以在「文件 => 首选项 => 设置」中配置 `\"eslint.trace.server\": \"messages\"`，按 `Ctrl`+`Shift`+`U` 打开输出面板，然后选择 ESLint 输出，查看具体错误。\n\n![VS Code 的 ESLint 输出](../assets/vscode-output-eslint.png)\n\n### 为什么 ESLint 无法检查出使用了未定义的变量(`no-undef` 规则为什么被关闭了)\n\n因为 `typescript-eslint-parser` [无法支持 `no-undef` 规则](https://github.com/eslint/typescript-eslint-parser/issues/416)。它针对正确的接口定义会报错。\n\n所以我们一般会关闭 `no-undef` 规则。\n\n### 为什么有些定义了的变量(比如使用 `enum` 定义的变量)未使用，ESLint 却没有报错\n\n因为无法支持这种变量定义的检查。建议在 `tsconfig.json` 中添加以下配置，使 `tsc` 编译过程能够检查出定义了未使用的变量:\n\n```json\n{\n  \"compilerOptions\": {\n    \"noUnusedLocals\": true,\n    \"noUnusedParameters\": true\n  }\n}\n```\n\n### 启用了 noUnusedParameters 之后，只使用了第二个参数，但是又必须传入第一个参数，这就会报错了\n\n第一个参数以下划线开头即可，参考 <https://github.com/Microsoft/TypeScript/issues/9458>\n","excerpt":"","title":"","headers":[{"level":2,"title":"什么是代码检查","slug":"什么是代码检查","link":"#什么是代码检查","children":[]},{"level":2,"title":"为什么需要代码检查","slug":"为什么需要代码检查","link":"#为什么需要代码检查","children":[]},{"level":2,"title":"在 TypeScript 中使用 ESLint","slug":"在-typescript-中使用-eslint","link":"#在-typescript-中使用-eslint","children":[{"level":3,"title":"安装 ESLint","slug":"安装-eslint","link":"#安装-eslint","children":[]},{"level":3,"title":"创建配置文件","slug":"创建配置文件","link":"#创建配置文件","children":[]},{"level":3,"title":"检查一个 ts 文件","slug":"检查一个-ts-文件","link":"#检查一个-ts-文件","children":[]},{"level":3,"title":"检查整个项目的 ts 文件","slug":"检查整个项目的-ts-文件","link":"#检查整个项目的-ts-文件","children":[]},{"level":3,"title":"在 VS Code 中集成 ESLint 检查","slug":"在-vs-code-中集成-eslint-检查","link":"#在-vs-code-中集成-eslint-检查","children":[]},{"level":3,"title":"使用 AlloyTeam 的 ESLint 配置","slug":"使用-alloyteam-的-eslint-配置","link":"#使用-alloyteam-的-eslint-配置","children":[]},{"level":3,"title":"使用 ESLint 检查 tsx 文件","slug":"使用-eslint-检查-tsx-文件","link":"#使用-eslint-检查-tsx-文件","children":[]}]},{"level":2,"title":"Troubleshootings","slug":"troubleshootings","link":"#troubleshootings","children":[{"level":3,"title":"Cannot find module typescript-eslint-parser","slug":"cannot-find-module-typescript-eslint-parser","link":"#cannot-find-module-typescript-eslint-parser","children":[]},{"level":3,"title":"cannot read property type of null","slug":"cannot-read-property-type-of-null","link":"#cannot-read-property-type-of-null","children":[]},{"level":3,"title":"VS Code 没有显示出 ESLint 的报错","slug":"vs-code-没有显示出-eslint-的报错","link":"#vs-code-没有显示出-eslint-的报错","children":[]},{"level":3,"title":"为什么 ESLint 无法检查出使用了未定义的变量(no-undef 规则为什么被关闭了)","slug":"为什么-eslint-无法检查出使用了未定义的变量-no-undef-规则为什么被关闭了","link":"#为什么-eslint-无法检查出使用了未定义的变量-no-undef-规则为什么被关闭了","children":[]},{"level":3,"title":"为什么有些定义了的变量(比如使用 enum 定义的变量)未使用，ESLint 却没有报错","slug":"为什么有些定义了的变量-比如使用-enum-定义的变量-未使用-eslint-却没有报错","link":"#为什么有些定义了的变量-比如使用-enum-定义的变量-未使用-eslint-却没有报错","children":[]},{"level":3,"title":"启用了 noUnusedParameters 之后，只使用了第二个参数，但是又必须传入第一个参数，这就会报错了","slug":"启用了-nounusedparameters-之后-只使用了第二个参数-但是又必须传入第一个参数-这就会报错了","link":"#启用了-nounusedparameters-之后-只使用了第二个参数-但是又必须传入第一个参数-这就会报错了","children":[]}]}]}}
