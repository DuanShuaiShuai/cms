{"content":"<p>高阶函数英文叫 Higher-order function。什么是高阶函数? 把函数作为参数传入，这样的函数称为高阶函数。</p>\n<!-- more -->\n<p>我们以实际代码为例子，一步一步深入概念。</p>\n<h2 id=\"变量可以指向函数\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#变量可以指向函数\"><span>变量可以指向函数</span></a></h2>\n<p>以 Python 内置的求绝对值的函数 <code v-pre>abs()</code> 为例，调用该函数用以下代码:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" data-title=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">>>></span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> abs</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">-</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">10</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">10</span></span></code></pre>\n</div><p>但是，如果只写 <code v-pre>abs</code> 呢?</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" data-title=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">>>></span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> abs</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&#x3C;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">built</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">-</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">in</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> function </span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">abs</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">></span></span></code></pre>\n</div><p>可见，<code v-pre>abs(-10)</code> 是函数调用，而 <code v-pre>abs</code> 是函数本身。</p>\n<p>要获得函数调用结果，我们可以把结果赋值给变量:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" data-title=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">>>></span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> x </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> abs</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">-</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">10</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">>>></span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> x</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">10</span></span></code></pre>\n</div><p>但是，如果把函数本身赋值给变量呢?</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" data-title=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">>>></span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> f </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> abs</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">>>></span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> f</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&#x3C;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">built</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">-</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">in</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> function </span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">abs</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">></span></span></code></pre>\n</div><p>结论: 函数本身也可以赋值给变量，即: 变量可以指向函数。</p>\n<p>如果一个变量指向了一个函数，那么，可否通过该变量来调用这个函数? 用代码验证一下:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" data-title=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">>>></span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> f </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> abs</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">>>></span><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\"> f</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">-</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">10</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">10</span></span></code></pre>\n</div><p>成功! 说明变量 f 现在已经指向了 <code v-pre>abs</code> 函数本身。直接调用 <code v-pre>abs()</code> 函数和调用变量 <code v-pre>f()</code> 完全相同。</p>\n<h2 id=\"函数名也是变量\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#函数名也是变量\"><span>函数名也是变量</span></a></h2>\n<p>那么函数名是什么呢? 函数名其实就是指向函数的变量! 对于 <code v-pre>abs()</code> 这个函数，完全可以把函数名 <code v-pre>abs</code> 看成变量，它指向一个可以计算绝对值的函数!</p>\n<p>如果把 <code v-pre>abs</code> 指向其他对象，会有什么情况发生?</p>\n<div class=\"language-sh\" data-highlighter=\"shiki\" data-ext=\"sh\" data-title=\"sh\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">>>> </span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">abs</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> =</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 10</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">>>> </span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">abs(-10</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">Traceback</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (most </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">recent</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> call</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> last</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">  File</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"&#x3C;stdin>\",</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> line</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 1,</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> in</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> &#x3C;</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">modul</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">e></span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">TypeError:</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 'int'</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> object</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> is</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> not</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> callable</span></span></code></pre>\n</div><p>把 <code v-pre>abs</code> 指向 <code v-pre>10</code> 后，就无法通过 <code v-pre>abs(-10)</code> 调用该函数了! 因为 <code v-pre>abs</code> 这个变量已经不指向求绝对值函数而是指向一个整数 10!</p>\n<p>当然实际代码绝对不能这么写，这里是为了说明函数名也是变量。要恢复 <code v-pre>abs</code> 函数，请重启 Python 交互环境。</p>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">提示</p>\n<p>由于 abs 函数实际上是定义在 <code v-pre>import builtins</code> 模块中的，所以要让修改 <code v-pre>abs</code> 变量的指向在其它模块也生效，要用 <code v-pre>import builtins; builtins.abs = 10</code>。</p>\n</div>\n<h2 id=\"传入函数\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#传入函数\"><span>传入函数</span></a></h2>\n<p>既然变量可以指向函数，函数的参数能接收变量，那么一个函数就可以接收另一个函数作为参数，这种函数就称之为高阶函数。</p>\n<p>一个最简单的高阶函数:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" data-title=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">def</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> add</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic\">x</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic\"> y</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic\"> f</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    return</span><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\"> f</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(x) </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">+</span><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\"> f</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(y)</span></span></code></pre>\n</div><p>当我们调用 <code v-pre>add(-5, 6, abs)</code> 时，参数 <code v-pre>x</code>，<code v-pre>y</code> 和 <code v-pre>f</code> 分别接收 <code v-pre>-5</code>，<code v-pre>6</code> 和 <code v-pre>abs</code>，根据函数定义，我们可以推导计算过程为:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" data-title=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">x </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> -</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">5</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">y </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 6</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">f </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> abs</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\">f</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(x) </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">+</span><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\"> f</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(y) </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">==></span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> abs</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">-</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">5</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">+</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> abs</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">6</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">==></span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 11</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">return</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 11</span></span></code></pre>\n</div><p>编写高阶函数，就是让函数的参数能够接收别的函数。</p>\n<h2 id=\"小结\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#小结\"><span>小结</span></a></h2>\n<p>把函数作为参数传入，这样的函数称为高阶函数，函数式编程就是指这种高度抽象的编程范式</p>\n","env":{"base":"/","filePath":"/Users/carson/Desktop/Mister-Hope.github.io-main/src/code/language/python/functional-programming/high-order-function/intro.md","filePathRelative":"code/language/python/functional-programming/high-order-function/intro.md","frontmatter":{"title":"介绍","icon":"info","author":"廖雪峰","date":"2020-05-31T00:00:00.000Z","category":"Python"},"sfcBlocks":{"template":{"type":"template","content":"<template><p>高阶函数英文叫 Higher-order function。什么是高阶函数? 把函数作为参数传入，这样的函数称为高阶函数。</p>\n<!-- more -->\n<p>我们以实际代码为例子，一步一步深入概念。</p>\n<h2 id=\"变量可以指向函数\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#变量可以指向函数\"><span>变量可以指向函数</span></a></h2>\n<p>以 Python 内置的求绝对值的函数 <code v-pre>abs()</code> 为例，调用该函数用以下代码:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" data-title=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">>>></span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> abs</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">-</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">10</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">10</span></span></code></pre>\n</div><p>但是，如果只写 <code v-pre>abs</code> 呢?</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" data-title=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">>>></span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> abs</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&#x3C;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">built</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">-</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">in</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> function </span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">abs</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">></span></span></code></pre>\n</div><p>可见，<code v-pre>abs(-10)</code> 是函数调用，而 <code v-pre>abs</code> 是函数本身。</p>\n<p>要获得函数调用结果，我们可以把结果赋值给变量:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" data-title=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">>>></span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> x </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> abs</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">-</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">10</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">>>></span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> x</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">10</span></span></code></pre>\n</div><p>但是，如果把函数本身赋值给变量呢?</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" data-title=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">>>></span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> f </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> abs</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">>>></span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> f</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&#x3C;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">built</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">-</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">in</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> function </span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">abs</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">></span></span></code></pre>\n</div><p>结论: 函数本身也可以赋值给变量，即: 变量可以指向函数。</p>\n<p>如果一个变量指向了一个函数，那么，可否通过该变量来调用这个函数? 用代码验证一下:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" data-title=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">>>></span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> f </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> abs</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">>>></span><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\"> f</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">-</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">10</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">10</span></span></code></pre>\n</div><p>成功! 说明变量 f 现在已经指向了 <code v-pre>abs</code> 函数本身。直接调用 <code v-pre>abs()</code> 函数和调用变量 <code v-pre>f()</code> 完全相同。</p>\n<h2 id=\"函数名也是变量\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#函数名也是变量\"><span>函数名也是变量</span></a></h2>\n<p>那么函数名是什么呢? 函数名其实就是指向函数的变量! 对于 <code v-pre>abs()</code> 这个函数，完全可以把函数名 <code v-pre>abs</code> 看成变量，它指向一个可以计算绝对值的函数!</p>\n<p>如果把 <code v-pre>abs</code> 指向其他对象，会有什么情况发生?</p>\n<div class=\"language-sh\" data-highlighter=\"shiki\" data-ext=\"sh\" data-title=\"sh\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">>>> </span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">abs</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> =</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 10</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">>>> </span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">abs(-10</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">Traceback</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (most </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">recent</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> call</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> last</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">  File</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"&#x3C;stdin>\",</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> line</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 1,</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> in</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> &#x3C;</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">modul</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">e></span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">TypeError:</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 'int'</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> object</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> is</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> not</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> callable</span></span></code></pre>\n</div><p>把 <code v-pre>abs</code> 指向 <code v-pre>10</code> 后，就无法通过 <code v-pre>abs(-10)</code> 调用该函数了! 因为 <code v-pre>abs</code> 这个变量已经不指向求绝对值函数而是指向一个整数 10!</p>\n<p>当然实际代码绝对不能这么写，这里是为了说明函数名也是变量。要恢复 <code v-pre>abs</code> 函数，请重启 Python 交互环境。</p>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">提示</p>\n<p>由于 abs 函数实际上是定义在 <code v-pre>import builtins</code> 模块中的，所以要让修改 <code v-pre>abs</code> 变量的指向在其它模块也生效，要用 <code v-pre>import builtins; builtins.abs = 10</code>。</p>\n</div>\n<h2 id=\"传入函数\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#传入函数\"><span>传入函数</span></a></h2>\n<p>既然变量可以指向函数，函数的参数能接收变量，那么一个函数就可以接收另一个函数作为参数，这种函数就称之为高阶函数。</p>\n<p>一个最简单的高阶函数:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" data-title=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">def</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> add</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic\">x</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic\"> y</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic\"> f</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    return</span><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\"> f</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(x) </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">+</span><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\"> f</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(y)</span></span></code></pre>\n</div><p>当我们调用 <code v-pre>add(-5, 6, abs)</code> 时，参数 <code v-pre>x</code>，<code v-pre>y</code> 和 <code v-pre>f</code> 分别接收 <code v-pre>-5</code>，<code v-pre>6</code> 和 <code v-pre>abs</code>，根据函数定义，我们可以推导计算过程为:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" data-title=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">x </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> -</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">5</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">y </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 6</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">f </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> abs</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\">f</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(x) </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">+</span><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\"> f</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(y) </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">==></span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> abs</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">-</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">5</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">+</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> abs</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">6</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">==></span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 11</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">return</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 11</span></span></code></pre>\n</div><p>编写高阶函数，就是让函数的参数能够接收别的函数。</p>\n<h2 id=\"小结\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#小结\"><span>小结</span></a></h2>\n<p>把函数作为参数传入，这样的函数称为高阶函数，函数式编程就是指这种高度抽象的编程范式</p>\n</template>","contentStripped":"<p>高阶函数英文叫 Higher-order function。什么是高阶函数? 把函数作为参数传入，这样的函数称为高阶函数。</p>\n<!-- more -->\n<p>我们以实际代码为例子，一步一步深入概念。</p>\n<h2 id=\"变量可以指向函数\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#变量可以指向函数\"><span>变量可以指向函数</span></a></h2>\n<p>以 Python 内置的求绝对值的函数 <code v-pre>abs()</code> 为例，调用该函数用以下代码:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" data-title=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">>>></span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> abs</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">-</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">10</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">10</span></span></code></pre>\n</div><p>但是，如果只写 <code v-pre>abs</code> 呢?</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" data-title=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">>>></span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> abs</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&#x3C;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">built</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">-</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">in</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> function </span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">abs</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">></span></span></code></pre>\n</div><p>可见，<code v-pre>abs(-10)</code> 是函数调用，而 <code v-pre>abs</code> 是函数本身。</p>\n<p>要获得函数调用结果，我们可以把结果赋值给变量:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" data-title=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">>>></span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> x </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> abs</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">-</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">10</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">>>></span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> x</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">10</span></span></code></pre>\n</div><p>但是，如果把函数本身赋值给变量呢?</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" data-title=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">>>></span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> f </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> abs</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">>>></span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> f</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&#x3C;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">built</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">-</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">in</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> function </span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">abs</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">></span></span></code></pre>\n</div><p>结论: 函数本身也可以赋值给变量，即: 变量可以指向函数。</p>\n<p>如果一个变量指向了一个函数，那么，可否通过该变量来调用这个函数? 用代码验证一下:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" data-title=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">>>></span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> f </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> abs</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">>>></span><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\"> f</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">-</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">10</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">10</span></span></code></pre>\n</div><p>成功! 说明变量 f 现在已经指向了 <code v-pre>abs</code> 函数本身。直接调用 <code v-pre>abs()</code> 函数和调用变量 <code v-pre>f()</code> 完全相同。</p>\n<h2 id=\"函数名也是变量\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#函数名也是变量\"><span>函数名也是变量</span></a></h2>\n<p>那么函数名是什么呢? 函数名其实就是指向函数的变量! 对于 <code v-pre>abs()</code> 这个函数，完全可以把函数名 <code v-pre>abs</code> 看成变量，它指向一个可以计算绝对值的函数!</p>\n<p>如果把 <code v-pre>abs</code> 指向其他对象，会有什么情况发生?</p>\n<div class=\"language-sh\" data-highlighter=\"shiki\" data-ext=\"sh\" data-title=\"sh\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">>>> </span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">abs</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> =</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 10</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">>>> </span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">abs(-10</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">Traceback</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (most </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">recent</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> call</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> last</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">  File</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"&#x3C;stdin>\",</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> line</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 1,</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> in</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> &#x3C;</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">modul</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">e></span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">TypeError:</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 'int'</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> object</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> is</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> not</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> callable</span></span></code></pre>\n</div><p>把 <code v-pre>abs</code> 指向 <code v-pre>10</code> 后，就无法通过 <code v-pre>abs(-10)</code> 调用该函数了! 因为 <code v-pre>abs</code> 这个变量已经不指向求绝对值函数而是指向一个整数 10!</p>\n<p>当然实际代码绝对不能这么写，这里是为了说明函数名也是变量。要恢复 <code v-pre>abs</code> 函数，请重启 Python 交互环境。</p>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">提示</p>\n<p>由于 abs 函数实际上是定义在 <code v-pre>import builtins</code> 模块中的，所以要让修改 <code v-pre>abs</code> 变量的指向在其它模块也生效，要用 <code v-pre>import builtins; builtins.abs = 10</code>。</p>\n</div>\n<h2 id=\"传入函数\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#传入函数\"><span>传入函数</span></a></h2>\n<p>既然变量可以指向函数，函数的参数能接收变量，那么一个函数就可以接收另一个函数作为参数，这种函数就称之为高阶函数。</p>\n<p>一个最简单的高阶函数:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" data-title=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">def</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> add</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic\">x</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic\"> y</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic\"> f</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    return</span><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\"> f</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(x) </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">+</span><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\"> f</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(y)</span></span></code></pre>\n</div><p>当我们调用 <code v-pre>add(-5, 6, abs)</code> 时，参数 <code v-pre>x</code>，<code v-pre>y</code> 和 <code v-pre>f</code> 分别接收 <code v-pre>-5</code>，<code v-pre>6</code> 和 <code v-pre>abs</code>，根据函数定义，我们可以推导计算过程为:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" data-title=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">x </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> -</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">5</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">y </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 6</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">f </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> abs</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\">f</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(x) </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">+</span><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\"> f</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(y) </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">==></span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> abs</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">-</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">5</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">+</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> abs</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">6</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">==></span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 11</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">return</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 11</span></span></code></pre>\n</div><p>编写高阶函数，就是让函数的参数能够接收别的函数。</p>\n<h2 id=\"小结\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#小结\"><span>小结</span></a></h2>\n<p>把函数作为参数传入，这样的函数称为高阶函数，函数式编程就是指这种高度抽象的编程范式</p>\n","tagOpen":"<template>","tagClose":"</template>"},"script":null,"scriptSetup":null,"scripts":[],"styles":[],"customBlocks":[]},"content":"\n高阶函数英文叫 Higher-order function。什么是高阶函数? 把函数作为参数传入，这样的函数称为高阶函数。\n\n<!-- more -->\n\n我们以实际代码为例子，一步一步深入概念。\n\n## 变量可以指向函数\n\n以 Python 内置的求绝对值的函数 `abs()` 为例，调用该函数用以下代码:\n\n```py\n>>> abs(-10)\n10\n```\n\n但是，如果只写 `abs` 呢?\n\n```py\n>>> abs\n<built-in function abs>\n```\n\n可见，`abs(-10)` 是函数调用，而 `abs` 是函数本身。\n\n要获得函数调用结果，我们可以把结果赋值给变量:\n\n```py\n>>> x = abs(-10)\n>>> x\n10\n```\n\n但是，如果把函数本身赋值给变量呢?\n\n```py\n>>> f = abs\n>>> f\n<built-in function abs>\n```\n\n结论: 函数本身也可以赋值给变量，即: 变量可以指向函数。\n\n如果一个变量指向了一个函数，那么，可否通过该变量来调用这个函数? 用代码验证一下:\n\n```py\n>>> f = abs\n>>> f(-10)\n10\n```\n\n成功! 说明变量 f 现在已经指向了 `abs` 函数本身。直接调用 `abs()` 函数和调用变量 `f()` 完全相同。\n\n## 函数名也是变量\n\n那么函数名是什么呢? 函数名其实就是指向函数的变量! 对于 `abs()` 这个函数，完全可以把函数名 `abs` 看成变量，它指向一个可以计算绝对值的函数!\n\n如果把 `abs` 指向其他对象，会有什么情况发生?\n\n```sh\n>>> abs = 10\n>>> abs(-10)\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nTypeError: 'int' object is not callable\n```\n\n把 `abs` 指向 `10` 后，就无法通过 `abs(-10)` 调用该函数了! 因为 `abs` 这个变量已经不指向求绝对值函数而是指向一个整数 10!\n\n当然实际代码绝对不能这么写，这里是为了说明函数名也是变量。要恢复 `abs` 函数，请重启 Python 交互环境。\n\n::: tip\n\n由于 abs 函数实际上是定义在 `import builtins` 模块中的，所以要让修改 `abs` 变量的指向在其它模块也生效，要用 `import builtins; builtins.abs = 10`。\n\n:::\n\n## 传入函数\n\n既然变量可以指向函数，函数的参数能接收变量，那么一个函数就可以接收另一个函数作为参数，这种函数就称之为高阶函数。\n\n一个最简单的高阶函数:\n\n```py\ndef add(x, y, f):\n    return f(x) + f(y)\n```\n\n当我们调用 `add(-5, 6, abs)` 时，参数 `x`，`y` 和 `f` 分别接收 `-5`，`6` 和 `abs`，根据函数定义，我们可以推导计算过程为:\n\n```py\nx = -5\ny = 6\nf = abs\nf(x) + f(y) ==> abs(-5) + abs(6) ==> 11\nreturn 11\n```\n\n编写高阶函数，就是让函数的参数能够接收别的函数。\n\n## 小结\n\n把函数作为参数传入，这样的函数称为高阶函数，函数式编程就是指这种高度抽象的编程范式\n","excerpt":"","title":"","headers":[{"level":2,"title":"变量可以指向函数","slug":"变量可以指向函数","link":"#变量可以指向函数","children":[]},{"level":2,"title":"函数名也是变量","slug":"函数名也是变量","link":"#函数名也是变量","children":[]},{"level":2,"title":"传入函数","slug":"传入函数","link":"#传入函数","children":[]},{"level":2,"title":"小结","slug":"小结","link":"#小结","children":[]}]}}
