{"content":"<p>本节教您如何使用实现 <a href=\"https://api.dart.dev/stable/dart-core/Iterable-class.html\" target=\"_blank\" rel=\"noopener noreferrer\">Iterable</a> 类的集合 - 例如 <a href=\"https://api.dart.dev/stable/dart-core/List-class.html\" target=\"_blank\" rel=\"noopener noreferrer\">List</a> 和 <a href=\"https://api.dart.dev/stable/dart-core/Set-class.html\" target=\"_blank\" rel=\"noopener noreferrer\">Set</a>。可迭代对象是各种 Dart 应用程序的基本构建块，即使您没有注意到，您可能已经在使用它们。</p>\n<p>本节包含以下内容:</p>\n<ul>\n<li>如何读取 Iterable 的元素。</li>\n<li>如何检查 Iterable 的元素是否满足条件。</li>\n<li>如何过滤 Iterable 的内容。</li>\n<li>如何将 Iterable 的内容映射到其他值。</li>\n</ul>\n<!-- more -->\n<h2 id=\"什么是集合\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#什么是集合\"><span>什么是集合</span></a></h2>\n<p>集合是代表一组对象(称为元素)的对象。可迭代对象是一种集合。</p>\n<p>集合可以为空，也可以包含许多元素。根据目的，集合可以具有不同的结构和实现。这些是一些最常见的集合类型:</p>\n<ul>\n<li><a href=\"https://api.dart.dev/stable/dart-core/List-class.html\" target=\"_blank\" rel=\"noopener noreferrer\">List</a>: 用于按元素索引读取元素。</li>\n<li><a href=\"https://api.dart.dev/stable/dart-core/Set-class.html\" target=\"_blank\" rel=\"noopener noreferrer\">Set</a>: 用于包含只能出现一次的元素。</li>\n<li><a href=\"https://api.dart.dev/stable/dart-core/Map-class.html\" target=\"_blank\" rel=\"noopener noreferrer\">Map</a>: 用于使用键读取元素。</li>\n</ul>\n<h2 id=\"什么是可迭代的\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#什么是可迭代的\"><span>什么是可迭代的</span></a></h2>\n<p>一个 <code v-pre>Iterable</code> 是可以顺序访问的元素的集合。</p>\n<p>在 Dart 中，一个 <code v-pre>Iterable</code> 是一个抽象类，这意味着您不能直接实例化它。但是，您可以 <code v-pre>Iterable</code> 通过创建新的 <code v-pre>List</code> 或来创建新的 <code v-pre>Set</code>。</p>\n<p><code v-pre>List</code> 和 <code v-pre>Set</code> 都是 <code v-pre>Iterable</code>，所以它们具有和 <code v-pre>Iterable</code> 类相同的方法和属性。</p>\n<p>一个 <code v-pre>Map</code> 在其内部使用不同的数据结构，这取决于它的实现。例如，<a href=\"https://api.dart.dev/stable/dart-collection/HashMap-class.html\" target=\"_blank\" rel=\"noopener noreferrer\">HashMap</a> 使用一个哈希表，其中的元素(也称为 values)是使用键获得的。<code v-pre>Map</code> 也可以使用 <code v-pre>Iterable</code> 上的 <code v-pre>entries</code> 或 <code v-pre>values</code> 属性读取他的元素。</p>\n<p>此示例显示 <code v-pre>List</code> 的 <code v-pre>int</code>，也为 <code v-pre>Iterable</code> 的 <code v-pre>int</code>:</p>\n<div class=\"language-dart\" data-highlighter=\"shiki\" data-ext=\"dart\" data-title=\"dart\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">Iterable</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&#x3C;</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">int</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">> iterable </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> [</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">2</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">3</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">];</span></span></code></pre>\n</div><p>一个 List 的不同之处 在于，使用 <code v-pre>Iterable</code>，您不能保证按索引读取元素将是有效的。<code v-pre>Iterable</code> 相对 <code v-pre>List</code>，没有 <code v-pre>[]</code> 运算符。</p>\n<p>例如，考虑以下代码，该代码无效:</p>\n<div class=\"language-dart\" data-highlighter=\"shiki\" data-ext=\"dart\" data-title=\"dart\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">Iterable</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&#x3C;</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">int</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">> iterable </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> [</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">2</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">3</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">];</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">int</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> value </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> iterable[</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">];</span></span></code></pre>\n</div><p>如果您使用 <code v-pre>[]</code> 读取元素，则编译器会告诉您 <code v-pre>Iterable</code> 类上未定义运算符 '<code v-pre>[]</code>'，这意味着您不能在这种情况下使用 <code v-pre>[index]</code>。</p>\n<p>您可以改为使用读取元素 <code v-pre>elementAt()</code>，该元素将逐步浏览可迭代的元素，直到到达该位置为止。</p>\n<div class=\"language-dart\" data-highlighter=\"shiki\" data-ext=\"dart\" data-title=\"dart\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">Iterable</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&#x3C;</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">int</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">> iterable </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> [</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">2</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">3</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">];</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">int</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> value </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> iterable.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">elementAt</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span></code></pre>\n</div><h2 id=\"读取元素\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#读取元素\"><span>读取元素</span></a></h2>\n<p>您可以使用 <code v-pre>for-in</code> 循环依次读取可迭代的元素。</p>\n<div class=\"language-dart\" data-highlighter=\"shiki\" data-ext=\"dart\" data-title=\"dart\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">void</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> main</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">() {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  var</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> iterable </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> [</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'Salad'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'Popcorn'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'Toast'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">];</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  for</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">var</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> element </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">in</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> iterable) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">    print</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(element);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n</div><div class=\"hint-container tip\">\n<p class=\"hint-container-title\">提示</p>\n<p>在后台，<code v-pre>for-in</code> 循环使用迭代器。但是，您很少看到直接使用 <code v-pre>Iterator</code> API 的情况，因为 <code v-pre>for-in</code> 它更易于阅读和理解，并且不易出错。</p>\n</div>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">关键词</p>\n<ul>\n<li>Iterable: Dart Iterable 类。</li>\n<li>Iterator: 用于使用 for-in 从 Iterable 对象读取元素的对象。</li>\n<li><code v-pre>for-in</code> 循环: 一种简单的按顺序读取 <code v-pre>Iterable</code> 元素的方法。</li>\n</ul>\n</div>\n<h3 id=\"使用-fist-和-last\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#使用-fist-和-last\"><span>使用 <code v-pre>fist</code> 和 <code v-pre>last</code></span></a></h3>\n<p>在某些情况下，您只想访问 <code v-pre>Iterable</code> 的第一个或最后一个元素。</p>\n<p>使用 <code v-pre>Iterable</code> 类，您无法直接访问元素，因此无法调用 <code v-pre>iterable[0]</code> 来访问第一个元素。相反，您可以使用 <code v-pre>first</code> 获取第一个元素的。</p>\n<p>同样，对于 Iterable 类，您不能使用运算符 <code v-pre>[]</code> 来访问最后一个元素，但是可以使用该 <code v-pre>last</code> 属性。</p>\n<div class=\"language-dart\" data-highlighter=\"shiki\" data-ext=\"dart\" data-title=\"dart\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">void</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> main</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">() {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  var</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> iterable </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> [</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'Salad'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'Popcorn'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'Toast'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">];</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">  print</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'The first element is </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#ABB2BF\">${</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">iterable</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">first</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#ABB2BF\">}</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">  print</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'The last element is </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#ABB2BF\">${</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">iterable</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">last</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#ABB2BF\">}</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n</div><div class=\"hint-container warning\">\n<p class=\"hint-container-title\">注意</p>\n<p>因为访问 <code v-pre>Iterable</code> 的最后一个元素需要逐步浏览所有其他元素， 所以 <code v-pre>last</code> 可能很慢。使用 <code v-pre>first</code> 或 <code v-pre>last</code> 在一个空 <code v-pre>Iterable</code> 会产生 <code v-pre>StateError</code>。</p>\n</div>\n<h3 id=\"使用-firstwhere\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#使用-firstwhere\"><span>使用 <code v-pre>firstWhere()</code></span></a></h3>\n<p>您已经看到您可以按顺序访问 <code v-pre>Iterable</code> 元素，并且可以轻松获取第一个或最后一个元素。</p>\n<p>现在，您将学习如何使用 <code v-pre>firstWhere()</code> 来找到满足某些条件的第一个元素。此方法要求您传递一个谓词(predicate)，该谓词是一个在输入满足特定条件时返回 true 的函数。</p>\n<div class=\"language-dart\" data-highlighter=\"shiki\" data-ext=\"dart\" data-title=\"dart\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">String</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> element </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> iterable.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">firstWhere</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">((element) => element.length </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">></span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 5</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span></code></pre>\n</div><p>例如，如果要查找第一个字符数超过 5 个的 String，则必须传递一个在元素大小大于 5 时返回 true 的谓词。</p>\n<div class=\"language-dart line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"dart\" data-title=\"dart\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">bool</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> predicate</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">String</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> element) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  return</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> element.length </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">></span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 5</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">main</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">() {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  var</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> items </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> [</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'Salad'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'Popcorn'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'Toast'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'Lasagne'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">];</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">  // You can find with a simple expression:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  var</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> element1 </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> items.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">firstWhere</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">((element) => element.length </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">></span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 5</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">  print</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(element1);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">  // Or try using a function block:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  var</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> element2 </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> items.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">firstWhere</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">((element) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    return</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> element.length </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">></span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 5</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  });</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">  print</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(element2);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">  // Or even pass in a function reference:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  var</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> element3 </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> items.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">firstWhere</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(predicate);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">  print</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(element3);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">  // You can also use an `orElse` function in case no value is found!</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  var</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> element4 </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> items.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">firstWhere</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    (element) => element.length </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">></span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 10</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    orElse</span><span style=\"--shiki-light:#383A42;--shiki-dark:#C678DD\">:</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> () => </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'None!'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  );</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">  print</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(element4);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>在此示例中，您可以看到三种不同的方式来编写谓词:</p>\n<ul>\n<li>作为表达式: 测试代码的一行使用箭头语法(<code v-pre>=&gt;</code>)。</li>\n<li>作为一个块: 测试代码在方括号和 <code v-pre>return</code> 语句之间有多行。</li>\n<li>作为函数: 测试代码位于 <code v-pre>firstWhere()</code> 作为参数传递给方法的外部函数中。</li>\n</ul>\n<p>没有正确或错误的方法。使用最适合您的方式，使您的代码更易于阅读和理解。</p>\n<p>在示例中，<code v-pre>firstWhereWithOrElse()</code> 使用可选的 named 参数 <code v-pre>orElse</code> 调用了 <code v-pre>firstWhere()</code>。当找不到元素时，该参数提供了替代方法。在这种情况下，由于没有元素满足提供的条件，因此返回了文本 <code v-pre>'None!'</code>。</p>\n<div class=\"hint-container warning\">\n<p class=\"hint-container-title\">注意</p>\n<p>如果没有元素满足测试谓词，并且 <code v-pre>orElse</code> 未提供参数，则 <code v-pre>firstWhere()</code> 抛出 <code v-pre>StateError</code>。</p>\n</div>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">快速回顾</p>\n<ul>\n<li>Iterable 中的元素必须被依次访问。</li>\n<li>遍历所有元素的最简单方法是使用 <code v-pre>for-in</code> 循环。</li>\n<li>您可以使用 <code v-pre>first</code> 和 <code v-pre>last</code> getter 获取第一个和最后一个元素。</li>\n<li>您还可以通过找到第一个满足条件的元素 <code v-pre>firstWhere()</code>。</li>\n<li>您可以将测试谓词编写为表达式，块或函数。</li>\n</ul>\n<p>关键词:</p>\n<ul>\n<li>谓词(Predicate): 满足特定条件时返回 true 的函数。</li>\n</ul>\n</div>\n<h3 id=\"singlewhere\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#singlewhere\"><span>singleWhere</span></a></h3>\n<p><code v-pre>singleWhere()</code> 工作方式与 <code v-pre>firstWhere()</code> 相似，但是在这种情况下，它只期望 Iterable 的一个元素满足谓词。如果 Iterable 满足谓词条件的元素超过一个或全部不满足，则该方法将引发 <code v-pre>StateError</code> 异常。</p>\n<div class=\"hint-container warning\">\n<p class=\"hint-container-title\">注意</p>\n<p><code v-pre>singleWhere()</code> 依次执行直到 Iterable 的最后一个元素，如果 Iterable 数量为无限或包含大量元素，可能会导致问题。</p>\n</div>\n<h2 id=\"条件检查\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#条件检查\"><span>条件检查</span></a></h2>\n<p>使用 Iterable 时，有时您需要验证集合的所有元素都满足某些条件。</p>\n<p>您可能很想使用这样的 <code v-pre>for-in</code> 循环来编写解决方案:</p>\n<div class=\"language-dart\" data-highlighter=\"shiki\" data-ext=\"dart\" data-title=\"dart\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">for</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">var</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> item </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">in</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> items) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  if</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (item.length </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&#x3C;</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 5</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    return</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> false</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">return</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> true</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span></code></pre>\n</div><p>但是，您可以使用 <code v-pre>every()</code> 方法完成相同操作:</p>\n<div class=\"language-dart\" data-highlighter=\"shiki\" data-ext=\"dart\" data-title=\"dart\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">return</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> items.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">every</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">((element) => element.length </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">>=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 5</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span></code></pre>\n</div><p>使用 <code v-pre>every()</code> 方法可以使代码更易读，更紧凑且更不易出错。</p>\n<h3 id=\"使用-any-和-every\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#使用-any-和-every\"><span>使用 any() 和 every()</span></a></h3>\n<p>Iterable 类提供了两个方法，您可以用它来验证条件:</p>\n<ul>\n<li>any(): 如果至少一个元素满足条件，则返回 true。</li>\n<li>every(): 如果所有元素都满足条件，则返回 true。</li>\n</ul>\n<div class=\"language-dart line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"dart\" data-title=\"dart\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">void</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> main</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">() {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  var</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> items </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> [</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'Salad'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'Popcorn'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'Toast'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">];</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  if</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (items.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">any</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">((element) => element.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">contains</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'a'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">))) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">    print</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'At least one element contains \"a\"'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  if</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (items.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">every</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">((element) => element.length </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">>=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 5</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">    print</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'All elements have length >= 5'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>在示例中，<code v-pre>any()</code> 验证至少一个元素包含字符 <code v-pre>a</code>，<code v-pre>every()</code> 验证所有元素的长度等于或大于 5。</p>\n<p>运行代码后，尝试更改 <code v-pre>any()</code> 的谓词，使其返回 false:</p>\n<div class=\"language-dart\" data-highlighter=\"shiki\" data-ext=\"dart\" data-title=\"dart\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">if</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (items.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">any</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">((element) => element.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">contains</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'Z'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">))) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">  print</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'At least one element contains \"Z\"'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">} </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">else</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">  print</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'No element contains \"Z\"'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n</div><p>您还可以 <code v-pre>any()</code> 用来验证 Iterable 中没有任何元素满足特定条件。</p>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">快速回顾</p>\n<ul>\n<li>尽管可以使用 <code v-pre>for-in</code> 循环来检查条件，但是有更好的方法可以执行此操作。</li>\n<li>any() 允许您检查是否有任何元素满足条件。</li>\n<li>every() 允许您检查所有元素均满足条件。</li>\n</ul>\n</div>\n<h2 id=\"筛选\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#筛选\"><span>筛选</span></a></h2>\n<p>前面的部分介绍了 <code v-pre>firstWhere()</code> 与 <code v-pre>singleWhere()</code> 这些可以帮助您找到满足特定谓词的元素的方法。</p>\n<p>但是，如果要查找满足特定条件的所有元素怎么办? 您可以使用 <code v-pre>where()</code> 方法来完成。</p>\n<div class=\"language-dart\" data-highlighter=\"shiki\" data-ext=\"dart\" data-title=\"dart\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">var</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> evenNumbers </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> numbers.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">where</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">((number) => number.isEven);</span></span></code></pre>\n</div><p>在此示例中， numbers 是包含多个 int 值的 Iterable，<code v-pre>where()</code> 会查找所有偶数。</p>\n<p><code v-pre>where()</code> 的输出是另一个 Iterable，您可以使用它来对其进行迭代或应用其他 Iterable 方法。在下一个示例中，where() 的输出直接在 <code v-pre>for-in</code> 循环内部使用。</p>\n<div class=\"language-dart\" data-highlighter=\"shiki\" data-ext=\"dart\" data-title=\"dart\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">var</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> evenNumbers </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> numbers.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">where</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">((number) => number.isEven);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">for</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">var</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> number </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">in</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> evenNumbers) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">  print</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#ABB2BF\">$</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">number</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> is even'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n</div><h3 id=\"使用-where\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#使用-where\"><span>使用 where()</span></a></h3>\n<p>此示例真是如何将 <code v-pre>where()</code> 与其他方法(例如 <code v-pre>any()</code>)一起使用。</p>\n<p>在此示例中，<code v-pre>where()</code> 用于查找所有偶数，然后 <code v-pre>any()</code> 用于检查结果是否包含负数。</p>\n<p>在示例的后面，<code v-pre>where()</code> 再次用于查找所有大于 1000 的数字。由于没有数字，结果为空 Iterable。</p>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">提示</p>\n<p>如果没有元素满足 <code v-pre>where()</code> 中的谓词 ，则该方法返回 null Iterable。不同于 <code v-pre>singleWhere()</code> 或 <code v-pre>firstWhere()</code>， <code v-pre>where()</code> 不会引发 StateError 异常。</p>\n</div>\n<h3 id=\"使用-takewhile\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#使用-takewhile\"><span>使用 takeWhile</span></a></h3>\n<p>方法 <code v-pre>takeWhile()</code> 和 <code v-pre>skipWhile()</code> 还可以帮助您从 Iterable 中过滤元素。</p>\n<p>这个例子展示了 <code v-pre>takeWhile()</code> 和 <code v-pre>skipWhile()</code> 是如何拆分包含数字的 Iterable。</p>\n<div class=\"language-dart\" data-highlighter=\"shiki\" data-ext=\"dart\" data-title=\"dart\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">main</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">() {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  var</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> numbers </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> [</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">3</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">-</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">2</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">4</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">5</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">];</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  var</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> numbersUntilZero </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> numbers.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">takeWhile</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">((number) => number </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">!=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">  print</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'Numbers until 0: </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#ABB2BF\">$</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">numbersUntilZero</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  var</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> numbersAfterZero </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> numbers.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">skipWhile</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">((number) => number </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">!=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">  print</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'Numbers after 0: </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#ABB2BF\">$</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">numbersAfterZero</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n</div><p>在此示例中，<code v-pre>takeWhile()</code> 返回一个 Iterable，其中包含所有导致满足谓词的元素的元素。另一方面，<code v-pre>skipWhile()</code> 返回一个移除了满足谓词的元素及它之前的所有元素的 Iterable。注意，包括满足谓词的元素。</p>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">快速回顾</p>\n<ul>\n<li>使用 <code v-pre>where()</code> 过滤 Iterable 的元素。</li>\n<li><code v-pre>where()</code> 的输出是另一个 Iterable。</li>\n<li>使用 <code v-pre>takeWhile()</code> 和 <code v-pre>skipWhile()</code> 获取元素，直到满足条件为止。</li>\n<li>这些方法的输出可以为空 Iterable。</li>\n</ul>\n</div>\n<h2 id=\"映射\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#映射\"><span>映射</span></a></h2>\n<p>Iterables 使用 <code v-pre>map()</code> 方法进行映射。您可以在每个元素上应用功能，并用新元素替换每个元素。</p>\n<div class=\"language-dart\" data-highlighter=\"shiki\" data-ext=\"dart\" data-title=\"dart\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">Iterable</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&#x3C;</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">int</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">> output </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> numbers.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">map</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">((number) => number </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">*</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 10</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span></code></pre>\n</div><p>在此示例中，Iterable 数字的每个元素都乘以 10。</p>\n<p>您还可以使用 <code v-pre>map()</code> 将元素转换为其他对象，例如，将 int 全部转换为 String，如下面的示例所示。</p>\n<div class=\"language-dart\" data-highlighter=\"shiki\" data-ext=\"dart\" data-title=\"dart\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">Iterable</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&#x3C;</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">String</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">> output </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> numbers.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">map</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">((number) => number.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">toString</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">());</span></span></code></pre>\n</div><div class=\"hint-container tip\">\n<p class=\"hint-container-title\">提示</p>\n<p><code v-pre>map()</code> 返回一个惰性的 Iterable，这意味着仅在迭代元素时才调用提供的函数。</p>\n</div>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">快速回顾</p>\n<ul>\n<li><code v-pre>map()</code> 将对应函数应用于 Iterable 的所有元素。</li>\n<li><code v-pre>map()</code> 的输出是另一个 Iterable。</li>\n<li>在 Iterable 迭代之前，不会调用该函数。</li>\n</ul>\n</div>\n","env":{"base":"/","filePath":"/Users/carson/Desktop/work/cms/src/code/language/dart/samples/iterable.md","filePathRelative":"code/language/dart/samples/iterable.md","frontmatter":{"title":"可迭代的集合","icon":"refresh","date":"2020-05-30T00:00:00.000Z","category":"dart"},"sfcBlocks":{"template":{"type":"template","content":"<template><p>本节教您如何使用实现 <a href=\"https://api.dart.dev/stable/dart-core/Iterable-class.html\" target=\"_blank\" rel=\"noopener noreferrer\">Iterable</a> 类的集合 - 例如 <a href=\"https://api.dart.dev/stable/dart-core/List-class.html\" target=\"_blank\" rel=\"noopener noreferrer\">List</a> 和 <a href=\"https://api.dart.dev/stable/dart-core/Set-class.html\" target=\"_blank\" rel=\"noopener noreferrer\">Set</a>。可迭代对象是各种 Dart 应用程序的基本构建块，即使您没有注意到，您可能已经在使用它们。</p>\n<p>本节包含以下内容:</p>\n<ul>\n<li>如何读取 Iterable 的元素。</li>\n<li>如何检查 Iterable 的元素是否满足条件。</li>\n<li>如何过滤 Iterable 的内容。</li>\n<li>如何将 Iterable 的内容映射到其他值。</li>\n</ul>\n<!-- more -->\n<h2 id=\"什么是集合\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#什么是集合\"><span>什么是集合</span></a></h2>\n<p>集合是代表一组对象(称为元素)的对象。可迭代对象是一种集合。</p>\n<p>集合可以为空，也可以包含许多元素。根据目的，集合可以具有不同的结构和实现。这些是一些最常见的集合类型:</p>\n<ul>\n<li><a href=\"https://api.dart.dev/stable/dart-core/List-class.html\" target=\"_blank\" rel=\"noopener noreferrer\">List</a>: 用于按元素索引读取元素。</li>\n<li><a href=\"https://api.dart.dev/stable/dart-core/Set-class.html\" target=\"_blank\" rel=\"noopener noreferrer\">Set</a>: 用于包含只能出现一次的元素。</li>\n<li><a href=\"https://api.dart.dev/stable/dart-core/Map-class.html\" target=\"_blank\" rel=\"noopener noreferrer\">Map</a>: 用于使用键读取元素。</li>\n</ul>\n<h2 id=\"什么是可迭代的\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#什么是可迭代的\"><span>什么是可迭代的</span></a></h2>\n<p>一个 <code v-pre>Iterable</code> 是可以顺序访问的元素的集合。</p>\n<p>在 Dart 中，一个 <code v-pre>Iterable</code> 是一个抽象类，这意味着您不能直接实例化它。但是，您可以 <code v-pre>Iterable</code> 通过创建新的 <code v-pre>List</code> 或来创建新的 <code v-pre>Set</code>。</p>\n<p><code v-pre>List</code> 和 <code v-pre>Set</code> 都是 <code v-pre>Iterable</code>，所以它们具有和 <code v-pre>Iterable</code> 类相同的方法和属性。</p>\n<p>一个 <code v-pre>Map</code> 在其内部使用不同的数据结构，这取决于它的实现。例如，<a href=\"https://api.dart.dev/stable/dart-collection/HashMap-class.html\" target=\"_blank\" rel=\"noopener noreferrer\">HashMap</a> 使用一个哈希表，其中的元素(也称为 values)是使用键获得的。<code v-pre>Map</code> 也可以使用 <code v-pre>Iterable</code> 上的 <code v-pre>entries</code> 或 <code v-pre>values</code> 属性读取他的元素。</p>\n<p>此示例显示 <code v-pre>List</code> 的 <code v-pre>int</code>，也为 <code v-pre>Iterable</code> 的 <code v-pre>int</code>:</p>\n<div class=\"language-dart\" data-highlighter=\"shiki\" data-ext=\"dart\" data-title=\"dart\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">Iterable</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&#x3C;</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">int</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">> iterable </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> [</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">2</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">3</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">];</span></span></code></pre>\n</div><p>一个 List 的不同之处 在于，使用 <code v-pre>Iterable</code>，您不能保证按索引读取元素将是有效的。<code v-pre>Iterable</code> 相对 <code v-pre>List</code>，没有 <code v-pre>[]</code> 运算符。</p>\n<p>例如，考虑以下代码，该代码无效:</p>\n<div class=\"language-dart\" data-highlighter=\"shiki\" data-ext=\"dart\" data-title=\"dart\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">Iterable</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&#x3C;</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">int</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">> iterable </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> [</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">2</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">3</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">];</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">int</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> value </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> iterable[</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">];</span></span></code></pre>\n</div><p>如果您使用 <code v-pre>[]</code> 读取元素，则编译器会告诉您 <code v-pre>Iterable</code> 类上未定义运算符 '<code v-pre>[]</code>'，这意味着您不能在这种情况下使用 <code v-pre>[index]</code>。</p>\n<p>您可以改为使用读取元素 <code v-pre>elementAt()</code>，该元素将逐步浏览可迭代的元素，直到到达该位置为止。</p>\n<div class=\"language-dart\" data-highlighter=\"shiki\" data-ext=\"dart\" data-title=\"dart\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">Iterable</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&#x3C;</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">int</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">> iterable </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> [</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">2</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">3</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">];</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">int</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> value </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> iterable.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">elementAt</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span></code></pre>\n</div><h2 id=\"读取元素\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#读取元素\"><span>读取元素</span></a></h2>\n<p>您可以使用 <code v-pre>for-in</code> 循环依次读取可迭代的元素。</p>\n<div class=\"language-dart\" data-highlighter=\"shiki\" data-ext=\"dart\" data-title=\"dart\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">void</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> main</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">() {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  var</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> iterable </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> [</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'Salad'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'Popcorn'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'Toast'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">];</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  for</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">var</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> element </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">in</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> iterable) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">    print</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(element);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n</div><div class=\"hint-container tip\">\n<p class=\"hint-container-title\">提示</p>\n<p>在后台，<code v-pre>for-in</code> 循环使用迭代器。但是，您很少看到直接使用 <code v-pre>Iterator</code> API 的情况，因为 <code v-pre>for-in</code> 它更易于阅读和理解，并且不易出错。</p>\n</div>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">关键词</p>\n<ul>\n<li>Iterable: Dart Iterable 类。</li>\n<li>Iterator: 用于使用 for-in 从 Iterable 对象读取元素的对象。</li>\n<li><code v-pre>for-in</code> 循环: 一种简单的按顺序读取 <code v-pre>Iterable</code> 元素的方法。</li>\n</ul>\n</div>\n<h3 id=\"使用-fist-和-last\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#使用-fist-和-last\"><span>使用 <code v-pre>fist</code> 和 <code v-pre>last</code></span></a></h3>\n<p>在某些情况下，您只想访问 <code v-pre>Iterable</code> 的第一个或最后一个元素。</p>\n<p>使用 <code v-pre>Iterable</code> 类，您无法直接访问元素，因此无法调用 <code v-pre>iterable[0]</code> 来访问第一个元素。相反，您可以使用 <code v-pre>first</code> 获取第一个元素的。</p>\n<p>同样，对于 Iterable 类，您不能使用运算符 <code v-pre>[]</code> 来访问最后一个元素，但是可以使用该 <code v-pre>last</code> 属性。</p>\n<div class=\"language-dart\" data-highlighter=\"shiki\" data-ext=\"dart\" data-title=\"dart\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">void</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> main</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">() {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  var</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> iterable </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> [</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'Salad'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'Popcorn'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'Toast'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">];</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">  print</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'The first element is </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#ABB2BF\">${</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">iterable</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">first</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#ABB2BF\">}</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">  print</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'The last element is </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#ABB2BF\">${</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">iterable</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">last</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#ABB2BF\">}</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n</div><div class=\"hint-container warning\">\n<p class=\"hint-container-title\">注意</p>\n<p>因为访问 <code v-pre>Iterable</code> 的最后一个元素需要逐步浏览所有其他元素， 所以 <code v-pre>last</code> 可能很慢。使用 <code v-pre>first</code> 或 <code v-pre>last</code> 在一个空 <code v-pre>Iterable</code> 会产生 <code v-pre>StateError</code>。</p>\n</div>\n<h3 id=\"使用-firstwhere\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#使用-firstwhere\"><span>使用 <code v-pre>firstWhere()</code></span></a></h3>\n<p>您已经看到您可以按顺序访问 <code v-pre>Iterable</code> 元素，并且可以轻松获取第一个或最后一个元素。</p>\n<p>现在，您将学习如何使用 <code v-pre>firstWhere()</code> 来找到满足某些条件的第一个元素。此方法要求您传递一个谓词(predicate)，该谓词是一个在输入满足特定条件时返回 true 的函数。</p>\n<div class=\"language-dart\" data-highlighter=\"shiki\" data-ext=\"dart\" data-title=\"dart\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">String</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> element </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> iterable.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">firstWhere</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">((element) => element.length </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">></span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 5</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span></code></pre>\n</div><p>例如，如果要查找第一个字符数超过 5 个的 String，则必须传递一个在元素大小大于 5 时返回 true 的谓词。</p>\n<div class=\"language-dart line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"dart\" data-title=\"dart\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">bool</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> predicate</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">String</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> element) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  return</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> element.length </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">></span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 5</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">main</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">() {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  var</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> items </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> [</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'Salad'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'Popcorn'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'Toast'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'Lasagne'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">];</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">  // You can find with a simple expression:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  var</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> element1 </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> items.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">firstWhere</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">((element) => element.length </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">></span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 5</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">  print</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(element1);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">  // Or try using a function block:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  var</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> element2 </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> items.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">firstWhere</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">((element) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    return</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> element.length </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">></span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 5</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  });</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">  print</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(element2);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">  // Or even pass in a function reference:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  var</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> element3 </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> items.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">firstWhere</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(predicate);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">  print</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(element3);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">  // You can also use an `orElse` function in case no value is found!</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  var</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> element4 </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> items.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">firstWhere</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    (element) => element.length </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">></span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 10</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    orElse</span><span style=\"--shiki-light:#383A42;--shiki-dark:#C678DD\">:</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> () => </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'None!'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  );</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">  print</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(element4);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>在此示例中，您可以看到三种不同的方式来编写谓词:</p>\n<ul>\n<li>作为表达式: 测试代码的一行使用箭头语法(<code v-pre>=&gt;</code>)。</li>\n<li>作为一个块: 测试代码在方括号和 <code v-pre>return</code> 语句之间有多行。</li>\n<li>作为函数: 测试代码位于 <code v-pre>firstWhere()</code> 作为参数传递给方法的外部函数中。</li>\n</ul>\n<p>没有正确或错误的方法。使用最适合您的方式，使您的代码更易于阅读和理解。</p>\n<p>在示例中，<code v-pre>firstWhereWithOrElse()</code> 使用可选的 named 参数 <code v-pre>orElse</code> 调用了 <code v-pre>firstWhere()</code>。当找不到元素时，该参数提供了替代方法。在这种情况下，由于没有元素满足提供的条件，因此返回了文本 <code v-pre>'None!'</code>。</p>\n<div class=\"hint-container warning\">\n<p class=\"hint-container-title\">注意</p>\n<p>如果没有元素满足测试谓词，并且 <code v-pre>orElse</code> 未提供参数，则 <code v-pre>firstWhere()</code> 抛出 <code v-pre>StateError</code>。</p>\n</div>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">快速回顾</p>\n<ul>\n<li>Iterable 中的元素必须被依次访问。</li>\n<li>遍历所有元素的最简单方法是使用 <code v-pre>for-in</code> 循环。</li>\n<li>您可以使用 <code v-pre>first</code> 和 <code v-pre>last</code> getter 获取第一个和最后一个元素。</li>\n<li>您还可以通过找到第一个满足条件的元素 <code v-pre>firstWhere()</code>。</li>\n<li>您可以将测试谓词编写为表达式，块或函数。</li>\n</ul>\n<p>关键词:</p>\n<ul>\n<li>谓词(Predicate): 满足特定条件时返回 true 的函数。</li>\n</ul>\n</div>\n<h3 id=\"singlewhere\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#singlewhere\"><span>singleWhere</span></a></h3>\n<p><code v-pre>singleWhere()</code> 工作方式与 <code v-pre>firstWhere()</code> 相似，但是在这种情况下，它只期望 Iterable 的一个元素满足谓词。如果 Iterable 满足谓词条件的元素超过一个或全部不满足，则该方法将引发 <code v-pre>StateError</code> 异常。</p>\n<div class=\"hint-container warning\">\n<p class=\"hint-container-title\">注意</p>\n<p><code v-pre>singleWhere()</code> 依次执行直到 Iterable 的最后一个元素，如果 Iterable 数量为无限或包含大量元素，可能会导致问题。</p>\n</div>\n<h2 id=\"条件检查\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#条件检查\"><span>条件检查</span></a></h2>\n<p>使用 Iterable 时，有时您需要验证集合的所有元素都满足某些条件。</p>\n<p>您可能很想使用这样的 <code v-pre>for-in</code> 循环来编写解决方案:</p>\n<div class=\"language-dart\" data-highlighter=\"shiki\" data-ext=\"dart\" data-title=\"dart\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">for</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">var</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> item </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">in</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> items) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  if</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (item.length </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&#x3C;</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 5</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    return</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> false</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">return</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> true</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span></code></pre>\n</div><p>但是，您可以使用 <code v-pre>every()</code> 方法完成相同操作:</p>\n<div class=\"language-dart\" data-highlighter=\"shiki\" data-ext=\"dart\" data-title=\"dart\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">return</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> items.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">every</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">((element) => element.length </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">>=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 5</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span></code></pre>\n</div><p>使用 <code v-pre>every()</code> 方法可以使代码更易读，更紧凑且更不易出错。</p>\n<h3 id=\"使用-any-和-every\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#使用-any-和-every\"><span>使用 any() 和 every()</span></a></h3>\n<p>Iterable 类提供了两个方法，您可以用它来验证条件:</p>\n<ul>\n<li>any(): 如果至少一个元素满足条件，则返回 true。</li>\n<li>every(): 如果所有元素都满足条件，则返回 true。</li>\n</ul>\n<div class=\"language-dart line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"dart\" data-title=\"dart\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">void</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> main</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">() {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  var</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> items </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> [</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'Salad'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'Popcorn'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'Toast'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">];</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  if</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (items.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">any</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">((element) => element.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">contains</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'a'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">))) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">    print</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'At least one element contains \"a\"'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  if</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (items.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">every</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">((element) => element.length </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">>=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 5</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">    print</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'All elements have length >= 5'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>在示例中，<code v-pre>any()</code> 验证至少一个元素包含字符 <code v-pre>a</code>，<code v-pre>every()</code> 验证所有元素的长度等于或大于 5。</p>\n<p>运行代码后，尝试更改 <code v-pre>any()</code> 的谓词，使其返回 false:</p>\n<div class=\"language-dart\" data-highlighter=\"shiki\" data-ext=\"dart\" data-title=\"dart\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">if</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (items.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">any</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">((element) => element.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">contains</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'Z'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">))) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">  print</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'At least one element contains \"Z\"'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">} </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">else</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">  print</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'No element contains \"Z\"'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n</div><p>您还可以 <code v-pre>any()</code> 用来验证 Iterable 中没有任何元素满足特定条件。</p>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">快速回顾</p>\n<ul>\n<li>尽管可以使用 <code v-pre>for-in</code> 循环来检查条件，但是有更好的方法可以执行此操作。</li>\n<li>any() 允许您检查是否有任何元素满足条件。</li>\n<li>every() 允许您检查所有元素均满足条件。</li>\n</ul>\n</div>\n<h2 id=\"筛选\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#筛选\"><span>筛选</span></a></h2>\n<p>前面的部分介绍了 <code v-pre>firstWhere()</code> 与 <code v-pre>singleWhere()</code> 这些可以帮助您找到满足特定谓词的元素的方法。</p>\n<p>但是，如果要查找满足特定条件的所有元素怎么办? 您可以使用 <code v-pre>where()</code> 方法来完成。</p>\n<div class=\"language-dart\" data-highlighter=\"shiki\" data-ext=\"dart\" data-title=\"dart\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">var</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> evenNumbers </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> numbers.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">where</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">((number) => number.isEven);</span></span></code></pre>\n</div><p>在此示例中， numbers 是包含多个 int 值的 Iterable，<code v-pre>where()</code> 会查找所有偶数。</p>\n<p><code v-pre>where()</code> 的输出是另一个 Iterable，您可以使用它来对其进行迭代或应用其他 Iterable 方法。在下一个示例中，where() 的输出直接在 <code v-pre>for-in</code> 循环内部使用。</p>\n<div class=\"language-dart\" data-highlighter=\"shiki\" data-ext=\"dart\" data-title=\"dart\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">var</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> evenNumbers </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> numbers.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">where</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">((number) => number.isEven);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">for</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">var</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> number </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">in</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> evenNumbers) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">  print</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#ABB2BF\">$</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">number</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> is even'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n</div><h3 id=\"使用-where\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#使用-where\"><span>使用 where()</span></a></h3>\n<p>此示例真是如何将 <code v-pre>where()</code> 与其他方法(例如 <code v-pre>any()</code>)一起使用。</p>\n<p>在此示例中，<code v-pre>where()</code> 用于查找所有偶数，然后 <code v-pre>any()</code> 用于检查结果是否包含负数。</p>\n<p>在示例的后面，<code v-pre>where()</code> 再次用于查找所有大于 1000 的数字。由于没有数字，结果为空 Iterable。</p>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">提示</p>\n<p>如果没有元素满足 <code v-pre>where()</code> 中的谓词 ，则该方法返回 null Iterable。不同于 <code v-pre>singleWhere()</code> 或 <code v-pre>firstWhere()</code>， <code v-pre>where()</code> 不会引发 StateError 异常。</p>\n</div>\n<h3 id=\"使用-takewhile\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#使用-takewhile\"><span>使用 takeWhile</span></a></h3>\n<p>方法 <code v-pre>takeWhile()</code> 和 <code v-pre>skipWhile()</code> 还可以帮助您从 Iterable 中过滤元素。</p>\n<p>这个例子展示了 <code v-pre>takeWhile()</code> 和 <code v-pre>skipWhile()</code> 是如何拆分包含数字的 Iterable。</p>\n<div class=\"language-dart\" data-highlighter=\"shiki\" data-ext=\"dart\" data-title=\"dart\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">main</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">() {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  var</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> numbers </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> [</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">3</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">-</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">2</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">4</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">5</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">];</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  var</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> numbersUntilZero </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> numbers.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">takeWhile</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">((number) => number </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">!=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">  print</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'Numbers until 0: </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#ABB2BF\">$</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">numbersUntilZero</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  var</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> numbersAfterZero </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> numbers.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">skipWhile</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">((number) => number </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">!=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">  print</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'Numbers after 0: </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#ABB2BF\">$</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">numbersAfterZero</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n</div><p>在此示例中，<code v-pre>takeWhile()</code> 返回一个 Iterable，其中包含所有导致满足谓词的元素的元素。另一方面，<code v-pre>skipWhile()</code> 返回一个移除了满足谓词的元素及它之前的所有元素的 Iterable。注意，包括满足谓词的元素。</p>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">快速回顾</p>\n<ul>\n<li>使用 <code v-pre>where()</code> 过滤 Iterable 的元素。</li>\n<li><code v-pre>where()</code> 的输出是另一个 Iterable。</li>\n<li>使用 <code v-pre>takeWhile()</code> 和 <code v-pre>skipWhile()</code> 获取元素，直到满足条件为止。</li>\n<li>这些方法的输出可以为空 Iterable。</li>\n</ul>\n</div>\n<h2 id=\"映射\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#映射\"><span>映射</span></a></h2>\n<p>Iterables 使用 <code v-pre>map()</code> 方法进行映射。您可以在每个元素上应用功能，并用新元素替换每个元素。</p>\n<div class=\"language-dart\" data-highlighter=\"shiki\" data-ext=\"dart\" data-title=\"dart\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">Iterable</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&#x3C;</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">int</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">> output </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> numbers.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">map</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">((number) => number </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">*</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 10</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span></code></pre>\n</div><p>在此示例中，Iterable 数字的每个元素都乘以 10。</p>\n<p>您还可以使用 <code v-pre>map()</code> 将元素转换为其他对象，例如，将 int 全部转换为 String，如下面的示例所示。</p>\n<div class=\"language-dart\" data-highlighter=\"shiki\" data-ext=\"dart\" data-title=\"dart\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">Iterable</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&#x3C;</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">String</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">> output </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> numbers.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">map</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">((number) => number.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">toString</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">());</span></span></code></pre>\n</div><div class=\"hint-container tip\">\n<p class=\"hint-container-title\">提示</p>\n<p><code v-pre>map()</code> 返回一个惰性的 Iterable，这意味着仅在迭代元素时才调用提供的函数。</p>\n</div>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">快速回顾</p>\n<ul>\n<li><code v-pre>map()</code> 将对应函数应用于 Iterable 的所有元素。</li>\n<li><code v-pre>map()</code> 的输出是另一个 Iterable。</li>\n<li>在 Iterable 迭代之前，不会调用该函数。</li>\n</ul>\n</div>\n</template>","contentStripped":"<p>本节教您如何使用实现 <a href=\"https://api.dart.dev/stable/dart-core/Iterable-class.html\" target=\"_blank\" rel=\"noopener noreferrer\">Iterable</a> 类的集合 - 例如 <a href=\"https://api.dart.dev/stable/dart-core/List-class.html\" target=\"_blank\" rel=\"noopener noreferrer\">List</a> 和 <a href=\"https://api.dart.dev/stable/dart-core/Set-class.html\" target=\"_blank\" rel=\"noopener noreferrer\">Set</a>。可迭代对象是各种 Dart 应用程序的基本构建块，即使您没有注意到，您可能已经在使用它们。</p>\n<p>本节包含以下内容:</p>\n<ul>\n<li>如何读取 Iterable 的元素。</li>\n<li>如何检查 Iterable 的元素是否满足条件。</li>\n<li>如何过滤 Iterable 的内容。</li>\n<li>如何将 Iterable 的内容映射到其他值。</li>\n</ul>\n<!-- more -->\n<h2 id=\"什么是集合\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#什么是集合\"><span>什么是集合</span></a></h2>\n<p>集合是代表一组对象(称为元素)的对象。可迭代对象是一种集合。</p>\n<p>集合可以为空，也可以包含许多元素。根据目的，集合可以具有不同的结构和实现。这些是一些最常见的集合类型:</p>\n<ul>\n<li><a href=\"https://api.dart.dev/stable/dart-core/List-class.html\" target=\"_blank\" rel=\"noopener noreferrer\">List</a>: 用于按元素索引读取元素。</li>\n<li><a href=\"https://api.dart.dev/stable/dart-core/Set-class.html\" target=\"_blank\" rel=\"noopener noreferrer\">Set</a>: 用于包含只能出现一次的元素。</li>\n<li><a href=\"https://api.dart.dev/stable/dart-core/Map-class.html\" target=\"_blank\" rel=\"noopener noreferrer\">Map</a>: 用于使用键读取元素。</li>\n</ul>\n<h2 id=\"什么是可迭代的\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#什么是可迭代的\"><span>什么是可迭代的</span></a></h2>\n<p>一个 <code v-pre>Iterable</code> 是可以顺序访问的元素的集合。</p>\n<p>在 Dart 中，一个 <code v-pre>Iterable</code> 是一个抽象类，这意味着您不能直接实例化它。但是，您可以 <code v-pre>Iterable</code> 通过创建新的 <code v-pre>List</code> 或来创建新的 <code v-pre>Set</code>。</p>\n<p><code v-pre>List</code> 和 <code v-pre>Set</code> 都是 <code v-pre>Iterable</code>，所以它们具有和 <code v-pre>Iterable</code> 类相同的方法和属性。</p>\n<p>一个 <code v-pre>Map</code> 在其内部使用不同的数据结构，这取决于它的实现。例如，<a href=\"https://api.dart.dev/stable/dart-collection/HashMap-class.html\" target=\"_blank\" rel=\"noopener noreferrer\">HashMap</a> 使用一个哈希表，其中的元素(也称为 values)是使用键获得的。<code v-pre>Map</code> 也可以使用 <code v-pre>Iterable</code> 上的 <code v-pre>entries</code> 或 <code v-pre>values</code> 属性读取他的元素。</p>\n<p>此示例显示 <code v-pre>List</code> 的 <code v-pre>int</code>，也为 <code v-pre>Iterable</code> 的 <code v-pre>int</code>:</p>\n<div class=\"language-dart\" data-highlighter=\"shiki\" data-ext=\"dart\" data-title=\"dart\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">Iterable</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&#x3C;</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">int</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">> iterable </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> [</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">2</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">3</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">];</span></span></code></pre>\n</div><p>一个 List 的不同之处 在于，使用 <code v-pre>Iterable</code>，您不能保证按索引读取元素将是有效的。<code v-pre>Iterable</code> 相对 <code v-pre>List</code>，没有 <code v-pre>[]</code> 运算符。</p>\n<p>例如，考虑以下代码，该代码无效:</p>\n<div class=\"language-dart\" data-highlighter=\"shiki\" data-ext=\"dart\" data-title=\"dart\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">Iterable</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&#x3C;</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">int</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">> iterable </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> [</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">2</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">3</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">];</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">int</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> value </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> iterable[</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">];</span></span></code></pre>\n</div><p>如果您使用 <code v-pre>[]</code> 读取元素，则编译器会告诉您 <code v-pre>Iterable</code> 类上未定义运算符 '<code v-pre>[]</code>'，这意味着您不能在这种情况下使用 <code v-pre>[index]</code>。</p>\n<p>您可以改为使用读取元素 <code v-pre>elementAt()</code>，该元素将逐步浏览可迭代的元素，直到到达该位置为止。</p>\n<div class=\"language-dart\" data-highlighter=\"shiki\" data-ext=\"dart\" data-title=\"dart\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">Iterable</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&#x3C;</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">int</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">> iterable </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> [</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">2</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">3</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">];</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">int</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> value </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> iterable.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">elementAt</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span></code></pre>\n</div><h2 id=\"读取元素\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#读取元素\"><span>读取元素</span></a></h2>\n<p>您可以使用 <code v-pre>for-in</code> 循环依次读取可迭代的元素。</p>\n<div class=\"language-dart\" data-highlighter=\"shiki\" data-ext=\"dart\" data-title=\"dart\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">void</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> main</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">() {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  var</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> iterable </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> [</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'Salad'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'Popcorn'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'Toast'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">];</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  for</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">var</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> element </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">in</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> iterable) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">    print</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(element);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n</div><div class=\"hint-container tip\">\n<p class=\"hint-container-title\">提示</p>\n<p>在后台，<code v-pre>for-in</code> 循环使用迭代器。但是，您很少看到直接使用 <code v-pre>Iterator</code> API 的情况，因为 <code v-pre>for-in</code> 它更易于阅读和理解，并且不易出错。</p>\n</div>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">关键词</p>\n<ul>\n<li>Iterable: Dart Iterable 类。</li>\n<li>Iterator: 用于使用 for-in 从 Iterable 对象读取元素的对象。</li>\n<li><code v-pre>for-in</code> 循环: 一种简单的按顺序读取 <code v-pre>Iterable</code> 元素的方法。</li>\n</ul>\n</div>\n<h3 id=\"使用-fist-和-last\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#使用-fist-和-last\"><span>使用 <code v-pre>fist</code> 和 <code v-pre>last</code></span></a></h3>\n<p>在某些情况下，您只想访问 <code v-pre>Iterable</code> 的第一个或最后一个元素。</p>\n<p>使用 <code v-pre>Iterable</code> 类，您无法直接访问元素，因此无法调用 <code v-pre>iterable[0]</code> 来访问第一个元素。相反，您可以使用 <code v-pre>first</code> 获取第一个元素的。</p>\n<p>同样，对于 Iterable 类，您不能使用运算符 <code v-pre>[]</code> 来访问最后一个元素，但是可以使用该 <code v-pre>last</code> 属性。</p>\n<div class=\"language-dart\" data-highlighter=\"shiki\" data-ext=\"dart\" data-title=\"dart\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">void</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> main</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">() {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  var</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> iterable </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> [</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'Salad'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'Popcorn'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'Toast'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">];</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">  print</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'The first element is </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#ABB2BF\">${</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">iterable</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">first</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#ABB2BF\">}</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">  print</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'The last element is </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#ABB2BF\">${</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">iterable</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">last</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#ABB2BF\">}</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n</div><div class=\"hint-container warning\">\n<p class=\"hint-container-title\">注意</p>\n<p>因为访问 <code v-pre>Iterable</code> 的最后一个元素需要逐步浏览所有其他元素， 所以 <code v-pre>last</code> 可能很慢。使用 <code v-pre>first</code> 或 <code v-pre>last</code> 在一个空 <code v-pre>Iterable</code> 会产生 <code v-pre>StateError</code>。</p>\n</div>\n<h3 id=\"使用-firstwhere\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#使用-firstwhere\"><span>使用 <code v-pre>firstWhere()</code></span></a></h3>\n<p>您已经看到您可以按顺序访问 <code v-pre>Iterable</code> 元素，并且可以轻松获取第一个或最后一个元素。</p>\n<p>现在，您将学习如何使用 <code v-pre>firstWhere()</code> 来找到满足某些条件的第一个元素。此方法要求您传递一个谓词(predicate)，该谓词是一个在输入满足特定条件时返回 true 的函数。</p>\n<div class=\"language-dart\" data-highlighter=\"shiki\" data-ext=\"dart\" data-title=\"dart\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">String</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> element </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> iterable.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">firstWhere</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">((element) => element.length </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">></span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 5</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span></code></pre>\n</div><p>例如，如果要查找第一个字符数超过 5 个的 String，则必须传递一个在元素大小大于 5 时返回 true 的谓词。</p>\n<div class=\"language-dart line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"dart\" data-title=\"dart\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">bool</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> predicate</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">String</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> element) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  return</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> element.length </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">></span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 5</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">main</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">() {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  var</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> items </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> [</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'Salad'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'Popcorn'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'Toast'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'Lasagne'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">];</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">  // You can find with a simple expression:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  var</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> element1 </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> items.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">firstWhere</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">((element) => element.length </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">></span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 5</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">  print</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(element1);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">  // Or try using a function block:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  var</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> element2 </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> items.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">firstWhere</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">((element) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    return</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> element.length </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">></span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 5</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  });</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">  print</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(element2);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">  // Or even pass in a function reference:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  var</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> element3 </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> items.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">firstWhere</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(predicate);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">  print</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(element3);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">  // You can also use an `orElse` function in case no value is found!</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  var</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> element4 </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> items.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">firstWhere</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    (element) => element.length </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">></span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 10</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    orElse</span><span style=\"--shiki-light:#383A42;--shiki-dark:#C678DD\">:</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> () => </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'None!'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  );</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">  print</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(element4);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>在此示例中，您可以看到三种不同的方式来编写谓词:</p>\n<ul>\n<li>作为表达式: 测试代码的一行使用箭头语法(<code v-pre>=&gt;</code>)。</li>\n<li>作为一个块: 测试代码在方括号和 <code v-pre>return</code> 语句之间有多行。</li>\n<li>作为函数: 测试代码位于 <code v-pre>firstWhere()</code> 作为参数传递给方法的外部函数中。</li>\n</ul>\n<p>没有正确或错误的方法。使用最适合您的方式，使您的代码更易于阅读和理解。</p>\n<p>在示例中，<code v-pre>firstWhereWithOrElse()</code> 使用可选的 named 参数 <code v-pre>orElse</code> 调用了 <code v-pre>firstWhere()</code>。当找不到元素时，该参数提供了替代方法。在这种情况下，由于没有元素满足提供的条件，因此返回了文本 <code v-pre>'None!'</code>。</p>\n<div class=\"hint-container warning\">\n<p class=\"hint-container-title\">注意</p>\n<p>如果没有元素满足测试谓词，并且 <code v-pre>orElse</code> 未提供参数，则 <code v-pre>firstWhere()</code> 抛出 <code v-pre>StateError</code>。</p>\n</div>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">快速回顾</p>\n<ul>\n<li>Iterable 中的元素必须被依次访问。</li>\n<li>遍历所有元素的最简单方法是使用 <code v-pre>for-in</code> 循环。</li>\n<li>您可以使用 <code v-pre>first</code> 和 <code v-pre>last</code> getter 获取第一个和最后一个元素。</li>\n<li>您还可以通过找到第一个满足条件的元素 <code v-pre>firstWhere()</code>。</li>\n<li>您可以将测试谓词编写为表达式，块或函数。</li>\n</ul>\n<p>关键词:</p>\n<ul>\n<li>谓词(Predicate): 满足特定条件时返回 true 的函数。</li>\n</ul>\n</div>\n<h3 id=\"singlewhere\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#singlewhere\"><span>singleWhere</span></a></h3>\n<p><code v-pre>singleWhere()</code> 工作方式与 <code v-pre>firstWhere()</code> 相似，但是在这种情况下，它只期望 Iterable 的一个元素满足谓词。如果 Iterable 满足谓词条件的元素超过一个或全部不满足，则该方法将引发 <code v-pre>StateError</code> 异常。</p>\n<div class=\"hint-container warning\">\n<p class=\"hint-container-title\">注意</p>\n<p><code v-pre>singleWhere()</code> 依次执行直到 Iterable 的最后一个元素，如果 Iterable 数量为无限或包含大量元素，可能会导致问题。</p>\n</div>\n<h2 id=\"条件检查\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#条件检查\"><span>条件检查</span></a></h2>\n<p>使用 Iterable 时，有时您需要验证集合的所有元素都满足某些条件。</p>\n<p>您可能很想使用这样的 <code v-pre>for-in</code> 循环来编写解决方案:</p>\n<div class=\"language-dart\" data-highlighter=\"shiki\" data-ext=\"dart\" data-title=\"dart\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">for</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">var</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> item </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">in</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> items) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  if</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (item.length </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&#x3C;</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 5</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    return</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> false</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">return</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> true</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span></code></pre>\n</div><p>但是，您可以使用 <code v-pre>every()</code> 方法完成相同操作:</p>\n<div class=\"language-dart\" data-highlighter=\"shiki\" data-ext=\"dart\" data-title=\"dart\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">return</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> items.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">every</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">((element) => element.length </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">>=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 5</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span></code></pre>\n</div><p>使用 <code v-pre>every()</code> 方法可以使代码更易读，更紧凑且更不易出错。</p>\n<h3 id=\"使用-any-和-every\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#使用-any-和-every\"><span>使用 any() 和 every()</span></a></h3>\n<p>Iterable 类提供了两个方法，您可以用它来验证条件:</p>\n<ul>\n<li>any(): 如果至少一个元素满足条件，则返回 true。</li>\n<li>every(): 如果所有元素都满足条件，则返回 true。</li>\n</ul>\n<div class=\"language-dart line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"dart\" data-title=\"dart\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">void</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> main</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">() {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  var</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> items </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> [</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'Salad'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'Popcorn'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'Toast'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">];</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  if</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (items.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">any</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">((element) => element.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">contains</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'a'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">))) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">    print</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'At least one element contains \"a\"'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  if</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (items.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">every</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">((element) => element.length </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">>=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 5</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">    print</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'All elements have length >= 5'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>在示例中，<code v-pre>any()</code> 验证至少一个元素包含字符 <code v-pre>a</code>，<code v-pre>every()</code> 验证所有元素的长度等于或大于 5。</p>\n<p>运行代码后，尝试更改 <code v-pre>any()</code> 的谓词，使其返回 false:</p>\n<div class=\"language-dart\" data-highlighter=\"shiki\" data-ext=\"dart\" data-title=\"dart\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">if</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (items.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">any</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">((element) => element.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">contains</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'Z'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">))) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">  print</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'At least one element contains \"Z\"'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">} </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">else</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">  print</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'No element contains \"Z\"'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n</div><p>您还可以 <code v-pre>any()</code> 用来验证 Iterable 中没有任何元素满足特定条件。</p>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">快速回顾</p>\n<ul>\n<li>尽管可以使用 <code v-pre>for-in</code> 循环来检查条件，但是有更好的方法可以执行此操作。</li>\n<li>any() 允许您检查是否有任何元素满足条件。</li>\n<li>every() 允许您检查所有元素均满足条件。</li>\n</ul>\n</div>\n<h2 id=\"筛选\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#筛选\"><span>筛选</span></a></h2>\n<p>前面的部分介绍了 <code v-pre>firstWhere()</code> 与 <code v-pre>singleWhere()</code> 这些可以帮助您找到满足特定谓词的元素的方法。</p>\n<p>但是，如果要查找满足特定条件的所有元素怎么办? 您可以使用 <code v-pre>where()</code> 方法来完成。</p>\n<div class=\"language-dart\" data-highlighter=\"shiki\" data-ext=\"dart\" data-title=\"dart\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">var</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> evenNumbers </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> numbers.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">where</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">((number) => number.isEven);</span></span></code></pre>\n</div><p>在此示例中， numbers 是包含多个 int 值的 Iterable，<code v-pre>where()</code> 会查找所有偶数。</p>\n<p><code v-pre>where()</code> 的输出是另一个 Iterable，您可以使用它来对其进行迭代或应用其他 Iterable 方法。在下一个示例中，where() 的输出直接在 <code v-pre>for-in</code> 循环内部使用。</p>\n<div class=\"language-dart\" data-highlighter=\"shiki\" data-ext=\"dart\" data-title=\"dart\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">var</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> evenNumbers </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> numbers.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">where</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">((number) => number.isEven);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">for</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">var</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> number </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">in</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> evenNumbers) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">  print</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#ABB2BF\">$</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">number</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> is even'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n</div><h3 id=\"使用-where\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#使用-where\"><span>使用 where()</span></a></h3>\n<p>此示例真是如何将 <code v-pre>where()</code> 与其他方法(例如 <code v-pre>any()</code>)一起使用。</p>\n<p>在此示例中，<code v-pre>where()</code> 用于查找所有偶数，然后 <code v-pre>any()</code> 用于检查结果是否包含负数。</p>\n<p>在示例的后面，<code v-pre>where()</code> 再次用于查找所有大于 1000 的数字。由于没有数字，结果为空 Iterable。</p>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">提示</p>\n<p>如果没有元素满足 <code v-pre>where()</code> 中的谓词 ，则该方法返回 null Iterable。不同于 <code v-pre>singleWhere()</code> 或 <code v-pre>firstWhere()</code>， <code v-pre>where()</code> 不会引发 StateError 异常。</p>\n</div>\n<h3 id=\"使用-takewhile\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#使用-takewhile\"><span>使用 takeWhile</span></a></h3>\n<p>方法 <code v-pre>takeWhile()</code> 和 <code v-pre>skipWhile()</code> 还可以帮助您从 Iterable 中过滤元素。</p>\n<p>这个例子展示了 <code v-pre>takeWhile()</code> 和 <code v-pre>skipWhile()</code> 是如何拆分包含数字的 Iterable。</p>\n<div class=\"language-dart\" data-highlighter=\"shiki\" data-ext=\"dart\" data-title=\"dart\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">main</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">() {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  var</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> numbers </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> [</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">3</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">-</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">2</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">4</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">5</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">];</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  var</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> numbersUntilZero </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> numbers.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">takeWhile</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">((number) => number </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">!=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">  print</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'Numbers until 0: </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#ABB2BF\">$</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">numbersUntilZero</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  var</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> numbersAfterZero </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> numbers.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">skipWhile</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">((number) => number </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">!=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">  print</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'Numbers after 0: </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#ABB2BF\">$</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">numbersAfterZero</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n</div><p>在此示例中，<code v-pre>takeWhile()</code> 返回一个 Iterable，其中包含所有导致满足谓词的元素的元素。另一方面，<code v-pre>skipWhile()</code> 返回一个移除了满足谓词的元素及它之前的所有元素的 Iterable。注意，包括满足谓词的元素。</p>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">快速回顾</p>\n<ul>\n<li>使用 <code v-pre>where()</code> 过滤 Iterable 的元素。</li>\n<li><code v-pre>where()</code> 的输出是另一个 Iterable。</li>\n<li>使用 <code v-pre>takeWhile()</code> 和 <code v-pre>skipWhile()</code> 获取元素，直到满足条件为止。</li>\n<li>这些方法的输出可以为空 Iterable。</li>\n</ul>\n</div>\n<h2 id=\"映射\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#映射\"><span>映射</span></a></h2>\n<p>Iterables 使用 <code v-pre>map()</code> 方法进行映射。您可以在每个元素上应用功能，并用新元素替换每个元素。</p>\n<div class=\"language-dart\" data-highlighter=\"shiki\" data-ext=\"dart\" data-title=\"dart\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">Iterable</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&#x3C;</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">int</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">> output </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> numbers.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">map</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">((number) => number </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">*</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 10</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span></code></pre>\n</div><p>在此示例中，Iterable 数字的每个元素都乘以 10。</p>\n<p>您还可以使用 <code v-pre>map()</code> 将元素转换为其他对象，例如，将 int 全部转换为 String，如下面的示例所示。</p>\n<div class=\"language-dart\" data-highlighter=\"shiki\" data-ext=\"dart\" data-title=\"dart\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">Iterable</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&#x3C;</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">String</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">> output </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> numbers.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">map</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">((number) => number.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">toString</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">());</span></span></code></pre>\n</div><div class=\"hint-container tip\">\n<p class=\"hint-container-title\">提示</p>\n<p><code v-pre>map()</code> 返回一个惰性的 Iterable，这意味着仅在迭代元素时才调用提供的函数。</p>\n</div>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">快速回顾</p>\n<ul>\n<li><code v-pre>map()</code> 将对应函数应用于 Iterable 的所有元素。</li>\n<li><code v-pre>map()</code> 的输出是另一个 Iterable。</li>\n<li>在 Iterable 迭代之前，不会调用该函数。</li>\n</ul>\n</div>\n","tagOpen":"<template>","tagClose":"</template>"},"script":null,"scriptSetup":null,"scripts":[],"styles":[],"customBlocks":[]},"content":"\n本节教您如何使用实现 [Iterable](https://api.dart.dev/stable/dart-core/Iterable-class.html) 类的集合 - 例如 [List](https://api.dart.dev/stable/dart-core/List-class.html) 和 [Set](https://api.dart.dev/stable/dart-core/Set-class.html)。可迭代对象是各种 Dart 应用程序的基本构建块，即使您没有注意到，您可能已经在使用它们。\n\n本节包含以下内容:\n\n- 如何读取 Iterable 的元素。\n- 如何检查 Iterable 的元素是否满足条件。\n- 如何过滤 Iterable 的内容。\n- 如何将 Iterable 的内容映射到其他值。\n\n<!-- more -->\n\n## 什么是集合\n\n集合是代表一组对象(称为元素)的对象。可迭代对象是一种集合。\n\n集合可以为空，也可以包含许多元素。根据目的，集合可以具有不同的结构和实现。这些是一些最常见的集合类型:\n\n- [List](https://api.dart.dev/stable/dart-core/List-class.html): 用于按元素索引读取元素。\n- [Set](https://api.dart.dev/stable/dart-core/Set-class.html): 用于包含只能出现一次的元素。\n- [Map](https://api.dart.dev/stable/dart-core/Map-class.html): 用于使用键读取元素。\n\n## 什么是可迭代的\n\n一个 `Iterable` 是可以顺序访问的元素的集合。\n\n在 Dart 中，一个 `Iterable` 是一个抽象类，这意味着您不能直接实例化它。但是，您可以 `Iterable` 通过创建新的 `List` 或来创建新的 `Set`。\n\n`List` 和 `Set` 都是 `Iterable`，所以它们具有和 `Iterable` 类相同的方法和属性。\n\n一个 `Map` 在其内部使用不同的数据结构，这取决于它的实现。例如，[HashMap](https://api.dart.dev/stable/dart-collection/HashMap-class.html) 使用一个哈希表，其中的元素(也称为 values)是使用键获得的。`Map` 也可以使用 `Iterable` 上的 `entries` 或 `values` 属性读取他的元素。\n\n此示例显示 `List` 的 `int`，也为 `Iterable` 的 `int`:\n\n```dart\nIterable<int> iterable = [1, 2, 3];\n```\n\n一个 List 的不同之处 在于，使用 `Iterable`，您不能保证按索引读取元素将是有效的。`Iterable` 相对 `List`，没有 `[]` 运算符。\n\n例如，考虑以下代码，该代码无效:\n\n```dart\nIterable<int> iterable = [1, 2, 3];\nint value = iterable[1];\n```\n\n如果您使用 `[]` 读取元素，则编译器会告诉您 `Iterable` 类上未定义运算符 '`[]`'，这意味着您不能在这种情况下使用 `[index]`。\n\n您可以改为使用读取元素 `elementAt()`，该元素将逐步浏览可迭代的元素，直到到达该位置为止。\n\n```dart\nIterable<int> iterable = [1, 2, 3];\nint value = iterable.elementAt(1);\n```\n\n## 读取元素\n\n您可以使用 `for-in` 循环依次读取可迭代的元素。\n\n```dart\nvoid main() {\n  var iterable = ['Salad', 'Popcorn', 'Toast'];\n  for (var element in iterable) {\n    print(element);\n  }\n}\n```\n\n::: tip\n\n在后台，`for-in` 循环使用迭代器。但是，您很少看到直接使用 `Iterator` API 的情况，因为 `for-in` 它更易于阅读和理解，并且不易出错。\n\n:::\n\n::: tip 关键词\n\n- Iterable: Dart Iterable 类。\n- Iterator: 用于使用 for-in 从 Iterable 对象读取元素的对象。\n- `for-in` 循环: 一种简单的按顺序读取 `Iterable` 元素的方法。\n\n:::\n\n### 使用 `fist` 和 `last`\n\n在某些情况下，您只想访问 `Iterable` 的第一个或最后一个元素。\n\n使用 `Iterable` 类，您无法直接访问元素，因此无法调用 `iterable[0]` 来访问第一个元素。相反，您可以使用 `first` 获取第一个元素的。\n\n同样，对于 Iterable 类，您不能使用运算符 `[]` 来访问最后一个元素，但是可以使用该 `last` 属性。\n\n```dart\nvoid main() {\n  var iterable = ['Salad', 'Popcorn', 'Toast'];\n  print('The first element is ${iterable.first}');\n  print('The last element is ${iterable.last}');\n}\n```\n\n::: warning\n\n因为访问 `Iterable` 的最后一个元素需要逐步浏览所有其他元素， 所以 `last` 可能很慢。使用 `first` 或 `last` 在一个空 `Iterable` 会产生 `StateError`。\n\n:::\n\n### 使用 `firstWhere()`\n\n您已经看到您可以按顺序访问 `Iterable` 元素，并且可以轻松获取第一个或最后一个元素。\n\n现在，您将学习如何使用 `firstWhere()` 来找到满足某些条件的第一个元素。此方法要求您传递一个谓词(predicate)，该谓词是一个在输入满足特定条件时返回 true 的函数。\n\n```dart\nString element = iterable.firstWhere((element) => element.length > 5);\n```\n\n例如，如果要查找第一个字符数超过 5 个的 String，则必须传递一个在元素大小大于 5 时返回 true 的谓词。\n\n```dart\nbool predicate(String element) {\n  return element.length > 5;\n}\n\nmain() {\n  var items = ['Salad', 'Popcorn', 'Toast', 'Lasagne'];\n\n  // You can find with a simple expression:\n  var element1 = items.firstWhere((element) => element.length > 5);\n  print(element1);\n\n  // Or try using a function block:\n  var element2 = items.firstWhere((element) {\n    return element.length > 5;\n  });\n  print(element2);\n\n  // Or even pass in a function reference:\n  var element3 = items.firstWhere(predicate);\n  print(element3);\n\n  // You can also use an `orElse` function in case no value is found!\n  var element4 = items.firstWhere(\n    (element) => element.length > 10,\n    orElse: () => 'None!',\n  );\n  print(element4);\n}\n```\n\n在此示例中，您可以看到三种不同的方式来编写谓词:\n\n- 作为表达式: 测试代码的一行使用箭头语法(`=>`)。\n- 作为一个块: 测试代码在方括号和 `return` 语句之间有多行。\n- 作为函数: 测试代码位于 `firstWhere()` 作为参数传递给方法的外部函数中。\n\n没有正确或错误的方法。使用最适合您的方式，使您的代码更易于阅读和理解。\n\n在示例中，`firstWhereWithOrElse()` 使用可选的 named 参数 `orElse` 调用了 `firstWhere()`。当找不到元素时，该参数提供了替代方法。在这种情况下，由于没有元素满足提供的条件，因此返回了文本 `'None!'`。\n\n::: warning\n\n如果没有元素满足测试谓词，并且 `orElse` 未提供参数，则 `firstWhere()` 抛出 `StateError`。\n\n:::\n\n::: tip 快速回顾\n\n- Iterable 中的元素必须被依次访问。\n- 遍历所有元素的最简单方法是使用 `for-in` 循环。\n- 您可以使用 `first` 和 `last` getter 获取第一个和最后一个元素。\n- 您还可以通过找到第一个满足条件的元素 `firstWhere()`。\n- 您可以将测试谓词编写为表达式，块或函数。\n\n关键词:\n\n- 谓词(Predicate): 满足特定条件时返回 true 的函数。\n\n:::\n\n### singleWhere\n\n`singleWhere()` 工作方式与 `firstWhere()` 相似，但是在这种情况下，它只期望 Iterable 的一个元素满足谓词。如果 Iterable 满足谓词条件的元素超过一个或全部不满足，则该方法将引发 `StateError` 异常。\n\n::: warning\n\n`singleWhere()` 依次执行直到 Iterable 的最后一个元素，如果 Iterable 数量为无限或包含大量元素，可能会导致问题。\n\n:::\n\n## 条件检查\n\n使用 Iterable 时，有时您需要验证集合的所有元素都满足某些条件。\n\n您可能很想使用这样的 `for-in` 循环来编写解决方案:\n\n```dart\nfor (var item in items) {\n  if (item.length < 5) {\n    return false;\n  }\n}\nreturn true;\n```\n\n但是，您可以使用 `every()` 方法完成相同操作:\n\n```dart\nreturn items.every((element) => element.length >= 5);\n```\n\n使用 `every()` 方法可以使代码更易读，更紧凑且更不易出错。\n\n### 使用 any() 和 every()\n\nIterable 类提供了两个方法，您可以用它来验证条件:\n\n- any(): 如果至少一个元素满足条件，则返回 true。\n- every(): 如果所有元素都满足条件，则返回 true。\n\n```dart\nvoid main() {\n  var items = ['Salad', 'Popcorn', 'Toast'];\n\n  if (items.any((element) => element.contains('a'))) {\n    print('At least one element contains \"a\"');\n  }\n\n  if (items.every((element) => element.length >= 5)) {\n    print('All elements have length >= 5');\n  }\n}\n```\n\n在示例中，`any()` 验证至少一个元素包含字符 `a`，`every()` 验证所有元素的长度等于或大于 5。\n\n运行代码后，尝试更改 `any()` 的谓词，使其返回 false:\n\n```dart\nif (items.any((element) => element.contains('Z'))) {\n  print('At least one element contains \"Z\"');\n} else {\n  print('No element contains \"Z\"');\n}\n```\n\n您还可以 `any()` 用来验证 Iterable 中没有任何元素满足特定条件。\n\n::: tip 快速回顾\n\n- 尽管可以使用 `for-in` 循环来检查条件，但是有更好的方法可以执行此操作。\n- any() 允许您检查是否有任何元素满足条件。\n- every() 允许您检查所有元素均满足条件。\n\n:::\n\n## 筛选\n\n前面的部分介绍了 `firstWhere()` 与 `singleWhere()` 这些可以帮助您找到满足特定谓词的元素的方法。\n\n但是，如果要查找满足特定条件的所有元素怎么办? 您可以使用 `where()` 方法来完成。\n\n```dart\nvar evenNumbers = numbers.where((number) => number.isEven);\n```\n\n在此示例中， numbers 是包含多个 int 值的 Iterable，`where()` 会查找所有偶数。\n\n`where()` 的输出是另一个 Iterable，您可以使用它来对其进行迭代或应用其他 Iterable 方法。在下一个示例中，where() 的输出直接在 `for-in` 循环内部使用。\n\n```dart\nvar evenNumbers = numbers.where((number) => number.isEven);\nfor (var number in evenNumbers) {\n  print('$number is even');\n}\n```\n\n### 使用 where()\n\n此示例真是如何将 `where()` 与其他方法(例如 `any()`)一起使用。\n\n在此示例中，`where()` 用于查找所有偶数，然后 `any()` 用于检查结果是否包含负数。\n\n在示例的后面，`where()` 再次用于查找所有大于 1000 的数字。由于没有数字，结果为空 Iterable。\n\n::: tip\n\n如果没有元素满足 `where()` 中的谓词 ，则该方法返回 null Iterable。不同于 `singleWhere()` 或 `firstWhere()`， `where()` 不会引发 StateError 异常。\n\n:::\n\n### 使用 takeWhile\n\n方法 `takeWhile()` 和 `skipWhile()` 还可以帮助您从 Iterable 中过滤元素。\n\n这个例子展示了 `takeWhile()` 和 `skipWhile()` 是如何拆分包含数字的 Iterable。\n\n```dart\nmain() {\n  var numbers = [1, 3, -2, 0, 4, 5];\n\n  var numbersUntilZero = numbers.takeWhile((number) => number != 0);\n  print('Numbers until 0: $numbersUntilZero');\n\n  var numbersAfterZero = numbers.skipWhile((number) => number != 0);\n  print('Numbers after 0: $numbersAfterZero');\n}\n```\n\n在此示例中，`takeWhile()` 返回一个 Iterable，其中包含所有导致满足谓词的元素的元素。另一方面，`skipWhile()` 返回一个移除了满足谓词的元素及它之前的所有元素的 Iterable。注意，包括满足谓词的元素。\n\n::: tip 快速回顾\n\n- 使用 `where()` 过滤 Iterable 的元素。\n- `where()` 的输出是另一个 Iterable。\n- 使用 `takeWhile()` 和 `skipWhile()` 获取元素，直到满足条件为止。\n- 这些方法的输出可以为空 Iterable。\n\n:::\n\n## 映射\n\nIterables 使用 `map()` 方法进行映射。您可以在每个元素上应用功能，并用新元素替换每个元素。\n\n```dart\nIterable<int> output = numbers.map((number) => number * 10);\n```\n\n在此示例中，Iterable 数字的每个元素都乘以 10。\n\n您还可以使用 `map()` 将元素转换为其他对象，例如，将 int 全部转换为 String，如下面的示例所示。\n\n```dart\nIterable<String> output = numbers.map((number) => number.toString());\n```\n\n::: tip\n\n`map()` 返回一个惰性的 Iterable，这意味着仅在迭代元素时才调用提供的函数。\n\n:::\n\n::: tip 快速回顾\n\n- `map()` 将对应函数应用于 Iterable 的所有元素。\n- `map()` 的输出是另一个 Iterable。\n- 在 Iterable 迭代之前，不会调用该函数。\n\n:::\n","excerpt":"","title":"","headers":[{"level":2,"title":"什么是集合","slug":"什么是集合","link":"#什么是集合","children":[]},{"level":2,"title":"什么是可迭代的","slug":"什么是可迭代的","link":"#什么是可迭代的","children":[]},{"level":2,"title":"读取元素","slug":"读取元素","link":"#读取元素","children":[{"level":3,"title":"使用 fist 和 last","slug":"使用-fist-和-last","link":"#使用-fist-和-last","children":[]},{"level":3,"title":"使用 firstWhere()","slug":"使用-firstwhere","link":"#使用-firstwhere","children":[]},{"level":3,"title":"singleWhere","slug":"singlewhere","link":"#singlewhere","children":[]}]},{"level":2,"title":"条件检查","slug":"条件检查","link":"#条件检查","children":[{"level":3,"title":"使用 any() 和 every()","slug":"使用-any-和-every","link":"#使用-any-和-every","children":[]}]},{"level":2,"title":"筛选","slug":"筛选","link":"#筛选","children":[{"level":3,"title":"使用 where()","slug":"使用-where","link":"#使用-where","children":[]},{"level":3,"title":"使用 takeWhile","slug":"使用-takewhile","link":"#使用-takewhile","children":[]}]},{"level":2,"title":"映射","slug":"映射","link":"#映射","children":[]}]}}
