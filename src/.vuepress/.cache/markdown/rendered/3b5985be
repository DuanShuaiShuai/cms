{"content":"<p>Angular 是 Google 官方在 2016 年 9 月出品的一款框架。</p>\n<p>框架强制 Typescript，更倾向于大型项目。</p>\n<!-- more -->\n<div class=\"hint-container warning\">\n<p class=\"hint-container-title\">注意</p>\n<p>2023 年 Angular 挺凉的了</p>\n</div>\n<div class=\"hint-container info\">\n<p class=\"hint-container-title\">Angular 的优点</p>\n<ol>\n<li>零配置 CLI，享受到 webpack 每次升级的好处，但是不用关心任何 webpack config</li>\n<li>官方提供所有的必须组件(http、router、animation、ssr、e2e 等等)，在 2000+ 内部应用测试之后才会发布，基本零 bug，并且保证在未来很多年内一直保证兼容升级</li>\n<li>提供官方的应用市场和 low code 生成工具，一行命令就可以生成 Dashboard 和各种页面</li>\n<li>框架 100% 由 TypeScript 开发，并且生态内的所有三方库都是(只能用) TypeScript 开发</li>\n<li>内置 RxJS，并且从 View 的操作到 Http 全部都是 Reactive 的，可以随意组合</li>\n<li>每次升级只要运行一行命令就会帮您修复所有的可能的不兼容问题</li>\n<li>通过 Template 隔绝底层的 Compiler 升级成本，Compiler 迭代了三代，性能不断提升，bundle size 不断减少，但是用户代码一行不用改</li>\n</ol>\n</div>\n<p>Angular 写起来其实是有诸多限制的，但是对企业的大型项目来说，这些限制与规范会带来多人协同开发和后期维护上的简便。</p>\n<p>如果您在前端框架上追求的更多是: 升级稳定、标准统一、长期维护成本低、协作方便，不需要频繁重构，Angular 的使用感受应该还是相当不错的，这也是为什么目前大量企业用户会选择 Angular 的原因。</p>\n<h2 id=\"相关链接\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#相关链接\"><span>相关链接</span></a></h2>\n<ul>\n<li><a href=\"https://angular.io/docs\" target=\"_blank\" rel=\"noopener noreferrer\">官方文档</a></li>\n<li><a href=\"https://angular.cn/docs\" target=\"_blank\" rel=\"noopener noreferrer\">中文文档</a></li>\n</ul>\n","env":{"base":"/","filePath":"/Users/carson/Desktop/work/cms/src/code/angular/README.md","filePathRelative":"code/angular/README.md","frontmatter":{"title":"Angular","icon":"angular","date":"2020-05-06T00:00:00.000Z","category":"前端","tag":["Angular"]},"sfcBlocks":{"template":{"type":"template","content":"<template><p>Angular 是 Google 官方在 2016 年 9 月出品的一款框架。</p>\n<p>框架强制 Typescript，更倾向于大型项目。</p>\n<!-- more -->\n<div class=\"hint-container warning\">\n<p class=\"hint-container-title\">注意</p>\n<p>2023 年 Angular 挺凉的了</p>\n</div>\n<div class=\"hint-container info\">\n<p class=\"hint-container-title\">Angular 的优点</p>\n<ol>\n<li>零配置 CLI，享受到 webpack 每次升级的好处，但是不用关心任何 webpack config</li>\n<li>官方提供所有的必须组件(http、router、animation、ssr、e2e 等等)，在 2000+ 内部应用测试之后才会发布，基本零 bug，并且保证在未来很多年内一直保证兼容升级</li>\n<li>提供官方的应用市场和 low code 生成工具，一行命令就可以生成 Dashboard 和各种页面</li>\n<li>框架 100% 由 TypeScript 开发，并且生态内的所有三方库都是(只能用) TypeScript 开发</li>\n<li>内置 RxJS，并且从 View 的操作到 Http 全部都是 Reactive 的，可以随意组合</li>\n<li>每次升级只要运行一行命令就会帮您修复所有的可能的不兼容问题</li>\n<li>通过 Template 隔绝底层的 Compiler 升级成本，Compiler 迭代了三代，性能不断提升，bundle size 不断减少，但是用户代码一行不用改</li>\n</ol>\n</div>\n<p>Angular 写起来其实是有诸多限制的，但是对企业的大型项目来说，这些限制与规范会带来多人协同开发和后期维护上的简便。</p>\n<p>如果您在前端框架上追求的更多是: 升级稳定、标准统一、长期维护成本低、协作方便，不需要频繁重构，Angular 的使用感受应该还是相当不错的，这也是为什么目前大量企业用户会选择 Angular 的原因。</p>\n<h2 id=\"相关链接\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#相关链接\"><span>相关链接</span></a></h2>\n<ul>\n<li><a href=\"https://angular.io/docs\" target=\"_blank\" rel=\"noopener noreferrer\">官方文档</a></li>\n<li><a href=\"https://angular.cn/docs\" target=\"_blank\" rel=\"noopener noreferrer\">中文文档</a></li>\n</ul>\n</template>","contentStripped":"<p>Angular 是 Google 官方在 2016 年 9 月出品的一款框架。</p>\n<p>框架强制 Typescript，更倾向于大型项目。</p>\n<!-- more -->\n<div class=\"hint-container warning\">\n<p class=\"hint-container-title\">注意</p>\n<p>2023 年 Angular 挺凉的了</p>\n</div>\n<div class=\"hint-container info\">\n<p class=\"hint-container-title\">Angular 的优点</p>\n<ol>\n<li>零配置 CLI，享受到 webpack 每次升级的好处，但是不用关心任何 webpack config</li>\n<li>官方提供所有的必须组件(http、router、animation、ssr、e2e 等等)，在 2000+ 内部应用测试之后才会发布，基本零 bug，并且保证在未来很多年内一直保证兼容升级</li>\n<li>提供官方的应用市场和 low code 生成工具，一行命令就可以生成 Dashboard 和各种页面</li>\n<li>框架 100% 由 TypeScript 开发，并且生态内的所有三方库都是(只能用) TypeScript 开发</li>\n<li>内置 RxJS，并且从 View 的操作到 Http 全部都是 Reactive 的，可以随意组合</li>\n<li>每次升级只要运行一行命令就会帮您修复所有的可能的不兼容问题</li>\n<li>通过 Template 隔绝底层的 Compiler 升级成本，Compiler 迭代了三代，性能不断提升，bundle size 不断减少，但是用户代码一行不用改</li>\n</ol>\n</div>\n<p>Angular 写起来其实是有诸多限制的，但是对企业的大型项目来说，这些限制与规范会带来多人协同开发和后期维护上的简便。</p>\n<p>如果您在前端框架上追求的更多是: 升级稳定、标准统一、长期维护成本低、协作方便，不需要频繁重构，Angular 的使用感受应该还是相当不错的，这也是为什么目前大量企业用户会选择 Angular 的原因。</p>\n<h2 id=\"相关链接\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#相关链接\"><span>相关链接</span></a></h2>\n<ul>\n<li><a href=\"https://angular.io/docs\" target=\"_blank\" rel=\"noopener noreferrer\">官方文档</a></li>\n<li><a href=\"https://angular.cn/docs\" target=\"_blank\" rel=\"noopener noreferrer\">中文文档</a></li>\n</ul>\n","tagOpen":"<template>","tagClose":"</template>"},"script":null,"scriptSetup":null,"scripts":[],"styles":[],"customBlocks":[]},"content":"\nAngular 是 Google 官方在 2016 年 9 月出品的一款框架。\n\n框架强制 Typescript，更倾向于大型项目。\n\n<!-- more -->\n\n::: warning\n\n2023 年 Angular 挺凉的了\n\n:::\n\n::: info Angular 的优点\n\n1. 零配置 CLI，享受到 webpack 每次升级的好处，但是不用关心任何 webpack config\n1. 官方提供所有的必须组件(http、router、animation、ssr、e2e 等等)，在 2000+ 内部应用测试之后才会发布，基本零 bug，并且保证在未来很多年内一直保证兼容升级\n1. 提供官方的应用市场和 low code 生成工具，一行命令就可以生成 Dashboard 和各种页面\n1. 框架 100% 由 TypeScript 开发，并且生态内的所有三方库都是(只能用) TypeScript 开发\n1. 内置 RxJS，并且从 View 的操作到 Http 全部都是 Reactive 的，可以随意组合\n1. 每次升级只要运行一行命令就会帮您修复所有的可能的不兼容问题\n1. 通过 Template 隔绝底层的 Compiler 升级成本，Compiler 迭代了三代，性能不断提升，bundle size 不断减少，但是用户代码一行不用改\n\n:::\n\nAngular 写起来其实是有诸多限制的，但是对企业的大型项目来说，这些限制与规范会带来多人协同开发和后期维护上的简便。\n\n如果您在前端框架上追求的更多是: 升级稳定、标准统一、长期维护成本低、协作方便，不需要频繁重构，Angular 的使用感受应该还是相当不错的，这也是为什么目前大量企业用户会选择 Angular 的原因。\n\n## 相关链接\n\n- [官方文档](https://angular.io/docs)\n- [中文文档](https://angular.cn/docs)\n","excerpt":"","title":"","headers":[{"level":2,"title":"相关链接","slug":"相关链接","link":"#相关链接","children":[]}]}}
