{"content":"<h1 id=\"正则的扩展\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#正则的扩展\"><span>正则的扩展</span></a></h1>\n<h2 id=\"regexp-构造函数\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#regexp-构造函数\"><span><code v-pre>RegExp</code> 构造函数</span></a></h2>\n<p>在 ES5 中，<code v-pre>RegExp</code> 构造函数的参数有两种情况。</p>\n<p>第一种情况是，参数是字符串，这时第二个参数表示正则表达式的修饰符(flag)。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">var</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> regex</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> new</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> RegExp</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"xyz\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"i\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 等价于</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">var</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> regex</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\"> /xyz/</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">i</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span></code></pre>\n</div><p>第二种情况是，参数是一个正则表示式，这时会返回一个原有正则表达式的拷贝。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">var</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> regex</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> new</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> RegExp</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/xyz/</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">i</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 等价于</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">var</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> regex</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\"> /xyz/</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">i</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span></code></pre>\n</div><p>但是，ES5 不允许此时使用第二个参数添加修饰符，否则会报错。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">var</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> regex</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> new</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> RegExp</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/xyz/</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"i\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// Uncaught TypeError: Cannot supply flags when constructing one RegExp from another</span></span></code></pre>\n</div><p>ES6 改变了这种行为。如果 <code v-pre>RegExp</code> 构造函数第一个参数是一个正则对象，那么可以使用第二个参数指定修饰符。而且，返回的正则表达式会忽略原有的正则表达式的修饰符，只使用新指定的修饰符。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">new</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> RegExp</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/abc/</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">gi</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"i\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">).</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">flags</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// \"i\"</span></span></code></pre>\n</div><p>上面代码中，原有正则对象的修饰符是 <code v-pre>ig</code>，它会被第二个参数 <code v-pre>i</code> 覆盖。</p>\n<h2 id=\"字符串的正则方法\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#字符串的正则方法\"><span>字符串的正则方法</span></a></h2>\n<p>字符串对象共有 4 个方法，可以使用正则表达式: <code v-pre>match()</code>、<code v-pre>replace()</code>、<code v-pre>search()</code> 和 <code v-pre>split()</code>。</p>\n<p>ES6 将这 4 个方法，在语言内部全部调用 <code v-pre>RegExp</code> 的实例方法，从而做到所有与正则相关的方法，全都定义在 <code v-pre>RegExp</code> 对象上。</p>\n<ul>\n<li><code v-pre>String.prototype.match</code> 调用 <code v-pre>RegExp.prototype[Symbol.match]</code></li>\n<li><code v-pre>String.prototype.replace</code> 调用 <code v-pre>RegExp.prototype[Symbol.replace]</code></li>\n<li><code v-pre>String.prototype.search</code> 调用 <code v-pre>RegExp.prototype[Symbol.search]</code></li>\n<li><code v-pre>String.prototype.split</code> 调用 <code v-pre>RegExp.prototype[Symbol.split]</code></li>\n</ul>\n<h2 id=\"u-修饰符\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#u-修饰符\"><span>u 修饰符</span></a></h2>\n<p>ES6 对正则表达式添加了 <code v-pre>u</code> 修饰符，含义为“Unicode 模式”，用来正确处理大于 <code v-pre>\\uFFFF</code> 的 Unicode 字符。也就是说，会正确处理四个字节的 UTF-16 编码。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">^</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">\\uD83D</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">u</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">test</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">\\uD83D\\uDC2A</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// false</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">^</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">\\uD83D</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">test</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">\\uD83D\\uDC2A</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// true</span></span></code></pre>\n</div><p>上面代码中，<code v-pre>\\uD83D\\uDC2A</code> 是一个四个字节的 UTF-16 编码，代表一个字符。但是，ES5 不支持四个字节的 UTF-16 编码，会将其识别为两个字符，导致第二行代码结果为 <code v-pre>true</code>。加了 <code v-pre>u</code> 修饰符以后，ES6 就会识别其为一个字符，所以第一行代码结果为 <code v-pre>false</code>。</p>\n<p>一旦加上 <code v-pre>u</code> 修饰符号，就会修改下面这些正则表达式的行为。</p>\n<ol>\n<li>\n<p>点字符</p>\n<p>点(<code v-pre>.</code>)字符在正则表达式中，含义是除了换行符以外的任意单个字符。对于码点大于 <code v-pre>0xFFFF</code> 的 Unicode 字符，点字符不能识别，必须加上 <code v-pre>u</code> 修饰符。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">var</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> s</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> '𠮷'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">^</span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">.</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">$</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">test</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">s</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// false</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">^</span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">.</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">$</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">u</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">test</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">s</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// true</span></span></code></pre>\n</div><p>上面代码表示，如果不添加 <code v-pre>u</code> 修饰符，正则表达式就会认为字符串为两个字符，从而匹配失败。</p>\n</li>\n<li>\n<p>Unicode 字符表示法</p>\n<p>ES6 新增了使用大括号表示 Unicode 字符，这种表示法在正则表达式中必须加上 <code v-pre>u</code> 修饰符，才能识别当中的大括号，否则会被解读为量词。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">\\u</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">{61}</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">test</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"a\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">); </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// false</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/a/</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">u</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">test</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"a\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">); </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// true</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/𠮷/</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">u</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">test</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"𠮷\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">); </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// true</span></span></code></pre>\n</div><p>上面代码表示，如果不加 <code v-pre>u</code> 修饰符，正则表达式无法识别 <code v-pre>\\u{61}</code> 这种表示法，只会认为这匹配 61 个连续的 <code v-pre>u</code>。</p>\n</li>\n<li>\n<p>量词</p>\n<p>使用 <code v-pre>u</code> 修饰符后，所有量词都会正确识别码点大于 <code v-pre>0xFFFF</code> 的 Unicode 字符。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/a</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">{2}</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">test</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'aa'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// true</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/a</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">{2}</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">u</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">test</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'aa'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// true</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/𠮷</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">{2}</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">test</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'𠮷𠮷'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// false</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/𠮷</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">{2}</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">u</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">test</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'𠮷𠮷'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// true</span></span></code></pre>\n</div></li>\n<li>\n<p>预定义模式</p>\n<p><code v-pre>u</code> 修饰符也影响到预定义模式，能否正确识别码点大于 <code v-pre>0xFFFF</code> 的 Unicode 字符。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">^</span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">\\S</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">$</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">test</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'𠮷'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// false</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">^</span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">\\S</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">$</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">u</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">test</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'𠮷'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// true</span></span></code></pre>\n</div><p>上面代码的 <code v-pre>\\S</code> 是预定义模式，匹配所有非空白字符。只有加了 <code v-pre>u</code> 修饰符，它才能正确匹配码点大于 <code v-pre>0xFFFF</code> 的 Unicode 字符。</p>\n<p>利用这一点，可以写出一个正确返回字符串长度的函数。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">function</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> codePointLength</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">text</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  var</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> result</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\"> text</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">match</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">[</span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">\\s\\S</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">]</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">gu</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  return</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> result</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#C678DD\"> ?</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\"> result</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">length</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#C678DD\"> :</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">var</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> s</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"𠮷𠮷\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">s</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">length</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 4</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">codePointLength</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">s</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">); </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 2</span></span></code></pre>\n</div></li>\n<li>\n<p><code v-pre>i</code> 修饰符</p>\n<p>有些 Unicode 字符的编码不同，但是字型很相近，比如，<code v-pre>\\u004B</code> 与 <code v-pre>\\u212A</code> 都是大写的 <code v-pre>K</code>。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">[a-z]</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">i</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">test</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">\\u212A</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) </span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">/</span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"> // false</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  [</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">a</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> -</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> z</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">] </span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">/</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">  iu</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">test</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">\\u212A</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">); </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// true</span></span></code></pre>\n</div><p>上面代码中，不加 <code v-pre>u</code> 修饰符，就无法识别非规范的 <code v-pre>K</code> 字符。</p>\n</li>\n</ol>\n<h2 id=\"regexp-prototype-unicode-属性\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#regexp-prototype-unicode-属性\"><span>RegExp.prototype.unicode 属性</span></a></h2>\n<p>正则实例对象新增 <code v-pre>unicode</code> 属性，表示是否设置了 <code v-pre>u</code> 修饰符。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> r1</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\"> /hello/</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> r2</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\"> /hello/</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">u</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">r1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">unicode</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// false</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">r2</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">unicode</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// true</span></span></code></pre>\n</div><p>上面代码中，正则表达式是否设置了 <code v-pre>u</code> 修饰符，可以从 <code v-pre>unicode</code> 属性看出来。</p>\n<h2 id=\"y-修饰符\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#y-修饰符\"><span>y 修饰符</span></a></h2>\n<p>除了 <code v-pre>u</code> 修饰符，ES6 还为正则表达式添加了 <code v-pre>y</code> 修饰符，叫做“粘连”(sticky)修饰符。</p>\n<p><code v-pre>y</code> 修饰符的作用与 <code v-pre>g</code> 修饰符类似，也是全局匹配，后一次匹配都从上一次匹配成功的下一个位置开始。不同之处在于，<code v-pre>g</code> 修饰符只要剩余位置中存在匹配就可，而 <code v-pre>y</code> 修饰符确保匹配必须从剩余的第一个位置开始，这也就是“粘连”的涵义。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">var</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> s</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"aaa_aa_a\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">var</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> r1</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\"> /a</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">+</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">g</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">var</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> r2</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\"> /a</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">+</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">y</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">r1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">exec</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">s</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">); </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// [\"aaa\"]</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">r2</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">exec</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">s</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">); </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// [\"aaa\"]</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">r1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">exec</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">s</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">); </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// [\"aa\"]</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">r2</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">exec</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">s</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">); </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// null</span></span></code></pre>\n</div><p>上面代码有两个正则表达式，一个使用 <code v-pre>g</code> 修饰符，另一个使用 <code v-pre>y</code> 修饰符。这两个正则表达式各执行了两次，第一次执行的时候，两者行为相同，剩余字符串都是 <code v-pre>_aa_a</code>。由于 <code v-pre>g</code> 修饰没有位置要求，所以第二次执行会返回结果，而 <code v-pre>y</code> 修饰符要求匹配必须从头部开始，所以返回 <code v-pre>null</code>。</p>\n<p>如果改一下正则表达式，保证每次都能头部匹配，<code v-pre>y</code> 修饰符就会返回结果了。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">var</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> s</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"aaa_aa_a\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">var</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> r</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\"> /a</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">+</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">_/</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">y</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">r</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">exec</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">s</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">); </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// [\"aaa_\"]</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">r</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">exec</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">s</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">); </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// [\"aa_\"]</span></span></code></pre>\n</div><p>上面代码每次匹配，都是从剩余字符串的头部开始。</p>\n<p>使用 <code v-pre>lastIndex</code> 属性，可以更好地说明 <code v-pre>y</code> 修饰符。</p>\n<div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> REGEX</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\"> /a/</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">g</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 指定从2号位置(y)开始匹配</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\">REGEX</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">lastIndex</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 2</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 匹配成功</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> match</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> REGEX</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">exec</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"xaya\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 在3号位置匹配成功</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">match</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">index</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 3</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 下一次匹配从4号位开始</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\">REGEX</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">lastIndex</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 4</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 4号位开始匹配失败</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\">REGEX</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">exec</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"xaya\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">); </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// null</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>上面代码中，<code v-pre>lastIndex</code> 属性指定每次搜索的开始位置，<code v-pre>g</code> 修饰符从这个位置开始向后搜索，直到发现匹配为止。</p>\n<p><code v-pre>y</code> 修饰符同样遵守 <code v-pre>lastIndex</code> 属性，但是要求必须在 <code v-pre>lastIndex</code> 指定的位置发现匹配。</p>\n<div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> REGEX</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\"> /a/</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">y</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 指定从2号位置开始匹配</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\">REGEX</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">lastIndex</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 2</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 不是粘连，匹配失败</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\">REGEX</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">exec</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"xaya\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">); </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// null</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 指定从3号位置开始匹配</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\">REGEX</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">lastIndex</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 3</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 3号位置是粘连，匹配成功</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> match</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> REGEX</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">exec</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"xaya\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">match</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">index</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 3</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\">REGEX</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">lastIndex</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 4</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>实际上，<code v-pre>y</code> 修饰符号隐含了头部匹配的标志 <code v-pre>^</code>。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/b/</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">y</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">exec</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"aba\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// null</span></span></code></pre>\n</div><p>上面代码由于不能保证头部匹配，所以返回 <code v-pre>null</code>。<code v-pre>y</code> 修饰符的设计本意，就是让头部匹配的标志 <code v-pre>^</code> 在全局匹配中都有效。</p>\n<p>下面是字符串对象的 <code v-pre>replace</code> 方法的例子。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> REGEX</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\"> /a/</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">gy</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"aaxa\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">replace</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\">REGEX</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"-\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">); </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// '--xa'</span></span></code></pre>\n</div><p>上面代码中，最后一个 <code v-pre>a</code> 因为不是出现在下一次匹配的头部，所以不会被替换。</p>\n<p>单单一个 <code v-pre>y</code> 修饰符对 <code v-pre>match</code> 方法，只能返回第一个匹配，必须与 <code v-pre>g</code> 修饰符联用，才能返回所有匹配。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"a1a2a3\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">match</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/a</span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">\\d</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">y</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">); </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// [\"a1\"]</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"a1a2a3\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">match</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/a</span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">\\d</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">gy</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">); </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// [\"a1\", \"a2\", \"a3\"]</span></span></code></pre>\n</div><p><code v-pre>y</code> 修饰符的一个应用，是从字符串提取 token(词元)，<code v-pre>y</code> 修饰符确保了匹配之间不会有漏掉的字符。</p>\n<div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> TOKEN_Y</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\"> /</span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">\\s</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">*</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">(</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">\\+</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">|</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">[0-9]</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">+</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">)</span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">\\s</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">*</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">y</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> TOKEN_G</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\"> /</span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">\\s</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">*</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">(</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">\\+</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">|</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">[0-9]</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">+</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">)</span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">\\s</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">*</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">g</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">tokenize</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\">TOKEN_Y</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"3 + 4\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// [ '3', '+', '4' ]</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">tokenize</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\">TOKEN_G</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"3 + 4\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// [ '3', '+', '4' ]</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">function</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> tokenize</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">TOKEN_REGEX</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">str</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  let</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> result</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> [];</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  let</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> match</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  while</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> ((</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">match</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> TOKEN_REGEX</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">exec</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">str</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">))) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">    result</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">push</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">match</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">[</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">]);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  return</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> result</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>上面代码中，如果字符串里面没有非法字符，<code v-pre>y</code> 修饰符与 <code v-pre>g</code> 修饰符的提取结果是一样的。但是，一旦出现非法字符，两者的行为就不一样了。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">tokenize</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\">TOKEN_Y</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"3x + 4\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// [ '3' ]</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">tokenize</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\">TOKEN_G</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"3x + 4\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// [ '3', '+', '4' ]</span></span></code></pre>\n</div><p>上面代码中，<code v-pre>g</code> 修饰符会忽略非法字符，而 <code v-pre>y</code> 修饰符不会，这样就很容易发现错误。</p>\n<h2 id=\"regexp-prototype-sticky-属性\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#regexp-prototype-sticky-属性\"><span>RegExp.prototype.sticky 属性</span></a></h2>\n<p>与 <code v-pre>y</code> 修饰符相匹配，ES6 的正则实例对象多了 <code v-pre>sticky</code> 属性，表示是否设置了 <code v-pre>y</code> 修饰符。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">var</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> r</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\"> /hello</span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">\\d</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">y</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">r</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">sticky</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// true</span></span></code></pre>\n</div><h2 id=\"regexp-prototype-flags-属性\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#regexp-prototype-flags-属性\"><span>RegExp.prototype.flags 属性</span></a></h2>\n<p>ES6 为正则表达式新增了 <code v-pre>flags</code> 属性，会返回正则表达式的修饰符。</p>\n<div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// ES5 的 source 属性</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 返回正则表达式的正文</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/abc/</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">gi</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">source</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> /</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">  // \"abc\"</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">  // ES6 的 flags 属性</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">  // 返回正则表达式的修饰符</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">  abc</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> /</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">  ig</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">flags</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 'gi'</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2 id=\"s-修饰符-dotall-模式\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#s-修饰符-dotall-模式\"><span>s 修饰符: dotAll 模式</span></a></h2>\n<p>正则表达式中，点(<code v-pre>.</code>)是一个特殊字符，代表任意的单个字符，但是有两个例外。一个是四个字节的 UTF-16 字符，这个可以用 <code v-pre>u</code> 修饰符解决；另一个是行终止符(line terminator character)。</p>\n<p>所谓行终止符，就是该字符表示一行的终结。以下四个字符属于”行终止符“。</p>\n<ul>\n<li>U+000A 换行符(<code v-pre>\\n</code>)</li>\n<li>U+000D 回车符(<code v-pre>\\r</code>)</li>\n<li>U+2028 行分隔符(line separator)</li>\n<li>U+2029 段分隔符(paragraph separator)</li>\n</ul>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/foo</span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">.</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">bar/</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">test</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"foo</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">\\n</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">bar\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// false</span></span></code></pre>\n</div><p>上面代码中，因为 <code v-pre>.</code> 不匹配 <code v-pre>\\n</code>，所以正则表达式返回 <code v-pre>false</code>。</p>\n<p>但是，很多时候我们希望匹配的是任意单个字符，这时有一种变通的写法。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/foo</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">[</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">^</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">]</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">bar/</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">test</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"foo</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">\\n</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">bar\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// true</span></span></code></pre>\n</div><p>这种解决方案毕竟不太符合直觉，ES2018 <a href=\"https://github.com/tc39/proposal-regexp-dotall-flag\" target=\"_blank\" rel=\"noopener noreferrer\">引入</a><code v-pre>s</code> 修饰符，使得 <code v-pre>.</code> 可以匹配任意单个字符。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/foo</span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">.</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">bar/</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">s</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">test</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"foo</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">\\n</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">bar\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">); </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// true</span></span></code></pre>\n</div><p>这被称为 <code v-pre>dotAll</code> 模式，即点(dot)代表一切字符。所以，正则表达式还引入了一个 <code v-pre>dotAll</code> 属性，返回一个布尔值，表示该正则表达式是否处在 <code v-pre>dotAll</code> 模式。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> re</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\"> /foo</span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">.</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">bar/</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">s</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 另一种写法</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// const re = new RegExp('foo.bar', 's');</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">re</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">test</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"foo</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">\\n</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">bar\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">); </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// true</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">re</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">dotAll</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// true</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">re</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">flags</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 's'</span></span></code></pre>\n</div><p><code v-pre>/s</code> 修饰符和多行修饰符<code v-pre>/m</code> 不冲突，两者一起使用的情况下，<code v-pre>.</code> 匹配所有字符，而 <code v-pre>^</code> 和<code v-pre>$</code>匹配每一行的行首和行尾。</p>\n<h2 id=\"后行断言\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#后行断言\"><span>后行断言</span></a></h2>\n<p>JavaScript 语言的正则表达式，只支持先行断言(lookahead)和先行否定断言(negative lookahead)，不支持后行断言(lookbehind)和后行否定断言(negative lookbehind)。ES2018 引入<a href=\"https://github.com/tc39/proposal-regexp-lookbehind\" target=\"_blank\" rel=\"noopener noreferrer\">后行断言</a>，V8 引擎 4.9 版(Chrome 62)已经支持。</p>\n<p>”先行断言“指的是，<code v-pre>x</code> 只有在 <code v-pre>y</code> 前面才匹配，必须写成<code v-pre>/x(?=y)/</code>。比如，只匹配百分号之前的数字，要写成<code v-pre>/\\d+(?=%)/</code>。”先行否定断言“指的是，<code v-pre>x</code> 只有不在 <code v-pre>y</code> 前面才匹配，必须写成<code v-pre>/x(?!y)/</code>。比如，只匹配不在百分号之前的数字，要写成<code v-pre>/\\d+(?!%)/</code>。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">\\d</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">+</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">(?=%)/</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">exec</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'100% of US presidents have been male'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)  </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// [\"100\"]</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">\\d</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">+</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">(?!%)/</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">exec</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'that’s all 44 of them'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)                 </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// [\"44\"]</span></span></code></pre>\n</div><p>上面两个字符串，如果互换正则表达式，就不会得到相同结果。另外，还可以看到，”先行断言“括号之中的部分(<code v-pre>(?=%)</code>)，是不计入返回结果的。</p>\n<p>“后行断言”正好与“先行断言”相反，<code v-pre>x</code> 只有在 <code v-pre>y</code> 后面才匹配，必须写成<code v-pre>/(?&lt;=y)x/</code>。比如，只匹配美元符号之后的数字，要写成<code v-pre>/(?&lt;=\\$)\\d+/</code>。”后行否定断言“则与”先行否定断言“相反，<code v-pre>x</code> 只有不在 <code v-pre>y</code> 后面才匹配，必须写成<code v-pre>/(?&lt;!y)x/</code>。比如，只匹配不在美元符号后面的数字，要写成<code v-pre>/(?&lt;!\\$)\\d+/</code>。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/(?&#x3C;=</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">\\$</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">)</span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">\\d</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">+</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">exec</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'Benjamin Franklin is on the $100 bill'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)  </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// [\"100\"]</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/(?&#x3C;!</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">\\$</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">)</span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">\\d</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">+</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">exec</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'it’s is worth about €90'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)                </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// [\"90\"]</span></span></code></pre>\n</div><p>上面的例子中，“后行断言”的括号之中的部分(<code v-pre>(?&lt;=\\$)</code>)，也是不计入返回结果。</p>\n<p>下面的例子是使用后行断言进行字符串替换。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> RE_DOLLAR_PREFIX</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\"> /(?&#x3C;=</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">\\$</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">)foo/</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">g</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"$foo %foo foo\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">replace</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\">RE_DOLLAR_PREFIX</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"bar\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// '$bar %foo foo'</span></span></code></pre>\n</div><p>上面代码中，只有在美元符号后面的 <code v-pre>foo</code> 才会被替换。</p>\n<p>“后行断言”的实现，需要先匹配<code v-pre>/(?&lt;=y)x/</code>的 <code v-pre>x</code>，然后再回到左边，匹配 <code v-pre>y</code> 的部分。这种“先右后左”的执行顺序，与所有其他正则操作相反，导致了一些不符合预期的行为。</p>\n<p>首先，后行断言的组匹配，与正常情况下结果是不一样的。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/(?&#x3C;=(</span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">\\d</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">+</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">)(</span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">\\d</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">+</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">))</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">$</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">exec</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'1053'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// [\"\", \"1\", \"053\"]</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">^</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">(</span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">\\d</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">+</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">)(</span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">\\d</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">+</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">)</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">$</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">exec</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'1053'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// [\"1053\", \"105\", \"3\"]</span></span></code></pre>\n</div><p>上面代码中，需要捕捉两个组匹配。没有“后行断言”时，第一个括号是贪婪模式，第二个括号只能捕获一个字符，所以结果是 <code v-pre>105</code> 和 <code v-pre>3</code>。而“后行断言”时，由于执行顺序是从右到左，第二个括号是贪婪模式，第一个括号只能捕获一个字符，所以结果是 <code v-pre>1</code> 和 <code v-pre>053</code>。</p>\n<p>其次，“后行断言”的反斜杠引用，也与通常的顺序相反，必须放在对应的那个括号之前。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/(?&#x3C;=(o)d</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">\\1</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">)r/</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">exec</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'hodor'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)  </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// null</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/(?&#x3C;=</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">\\1</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">d(o))r/</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">exec</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'hodor'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)  </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// [\"r\", \"o\"]</span></span></code></pre>\n</div><p>上面代码中，如果后行断言的反斜杠引用(<code v-pre>\\1</code>)放在括号的后面，就不会得到匹配结果，必须放在前面才可以。因为后行断言是先从左到右扫描，发现匹配以后再回过头，从右到左完成反斜杠引用。</p>\n<h2 id=\"unicode-属性类\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#unicode-属性类\"><span>Unicode 属性类</span></a></h2>\n<p>ES2018 <a href=\"https://github.com/tc39/proposal-regexp-unicode-property-escapes\" target=\"_blank\" rel=\"noopener noreferrer\">引入</a>了一种新的类的写法 <code v-pre>\\p{...}</code> 和 <code v-pre>\\P{...}</code>，允许正则表达式匹配符合 Unicode 某种属性的所有字符。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> regexGreekSymbol</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\"> /</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">\\p</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">{Script=Greek}/</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">u</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">regexGreekSymbol</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">test</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"π\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">); </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// true</span></span></code></pre>\n</div><p>上面代码中，<code v-pre>\\p{Script=Greek}</code> 指定匹配一个希腊文字母，所以匹配<code v-pre>π</code>成功。</p>\n<p>Unicode 属性类要指定属性名和属性值。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">\\</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">p</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">{</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">UnicodePropertyName</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">UnicodePropertyValue</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n</div><p>对于某些属性，可以只写属性名，或者只写属性值。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">\\</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">p</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">{</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">UnicodePropertyName</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">\\</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">p</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">{</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">UnicodePropertyValue</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n</div><p><code v-pre>\\P{…}</code> 是 <code v-pre>\\p{…}</code> 的反向匹配，即匹配不满足条件的字符。</p>\n<p>注意，这两种类只对 Unicode 有效，所以使用的时候一定要加上 <code v-pre>u</code> 修饰符。如果不加 <code v-pre>u</code> 修饰符，正则表达式使用 <code v-pre>\\p</code> 和 <code v-pre>\\P</code> 会报错，ECMAScript 预留了这两个类。</p>\n<p>由于 Unicode 的各种属性非常多，所以这种新的类的表达能力非常强。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> regex</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\"> /</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">^</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">\\p</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">{Decimal_Number}</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">+</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">$</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">u</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">regex</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">test</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"𝟏𝟐𝟑𝟜𝟝𝟞𝟩𝟪𝟫𝟬𝟭𝟮𝟯𝟺𝟻𝟼\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">); </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// true</span></span></code></pre>\n</div><p>上面代码中，属性类指定匹配所有十进制字符，可以看到各种字型的十进制字符都会匹配成功。</p>\n<p><code v-pre>\\p{Number}</code> 甚至能匹配罗马数字。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 匹配所有数字</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> regex</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\"> /</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">^</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">\\p</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">{Number}</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">+</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">$</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">u</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">regex</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">test</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"²³¹¼½¾\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">); </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// true</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">regex</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">test</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"㉛㉜㉝\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">); </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// true</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">regex</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">test</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"ⅠⅡⅢⅣⅤⅥⅦⅧⅨⅩⅪⅫ\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">); </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// true</span></span></code></pre>\n</div><p>下面是其他一些例子。</p>\n<div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 匹配所有空格</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">\\</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">p</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">{</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">White_Space</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 匹配各种文字的所有字母，等同于 Unicode 版的 \\w</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">[\\</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">p</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">{</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">Alphabetic</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}\\</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">p</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">{</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">Mark</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}\\</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">p</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">{</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">Decimal_Number</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}\\</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">p</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">{</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">Connector_Punctuation</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}\\</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">p</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">{</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">Join_Control</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}]</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 匹配各种文字的所有非字母的字符，等同于 Unicode 版的 \\W</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">[</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">^</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">\\</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">p</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">{</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">Alphabetic</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}\\</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">p</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">{</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">Mark</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}\\</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">p</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">{</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">Decimal_Number</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}\\</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">p</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">{</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">Connector_Punctuation</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}\\</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">p</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">{</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">Join_Control</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}]</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 匹配 Emoji</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">\\p</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">{Emoji_Modifier_Base}</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">\\p</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">{Emoji_Modifier}</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">?</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">|</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">\\p</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">{Emoji_Presentation}</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">|</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">\\p</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">{Emoji}</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">\\uFE0F</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">gu</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 匹配所有的箭头字符</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> regexArrows</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\"> /</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">^</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">\\p</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">{Block=Arrows}</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">+</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">$</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">u</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">regexArrows</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">test</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'←↑→↓↔↕↖↗↘↙⇏⇐⇑⇒⇓⇔⇕⇖⇗⇘⇙⇧⇩'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// true</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2 id=\"具名组匹配\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#具名组匹配\"><span>具名组匹配</span></a></h2>\n<h3 id=\"简介\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#简介\"><span>简介</span></a></h3>\n<p>正则表达式使用圆括号进行组匹配。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> RE_DATE</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\"> /(</span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">\\d</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">{4}</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">)-(</span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">\\d</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">{2}</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">)-(</span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">\\d</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">{2}</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">)/</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span></code></pre>\n</div><p>上面代码中，正则表达式里面有三组圆括号。使用 <code v-pre>exec</code> 方法，就可以将这三组匹配结果提取出来。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> RE_DATE</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\"> /(</span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">\\d</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">{4}</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">)-(</span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">\\d</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">{2}</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">)-(</span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">\\d</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">{2}</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">)/</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> matchObj</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> RE_DATE</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">exec</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"1999-12-31\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> year</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> matchObj</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">[</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">]; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 1999</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> month</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> matchObj</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">[</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">2</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">]; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 12</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> day</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> matchObj</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">[</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">3</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">]; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 31</span></span></code></pre>\n</div><p>组匹配的一个问题是，每一组的匹配含义不容易看出来，而且只能用数字序号(比如 <code v-pre>matchObj[1]</code>)引用，要是组的顺序变了，引用的时候就必须修改序号。</p>\n<p>ES2018 引入了<a href=\"https://github.com/tc39/proposal-regexp-named-groups\" target=\"_blank\" rel=\"noopener noreferrer\">具名组匹配</a>(Named Capture Groups)，允许为每一个组匹配指定一个名字，既便于阅读代码，又便于引用。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> RE_DATE</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\"> /(?&#x3C;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">year</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">></span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">\\d</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">{4}</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">)-(?&#x3C;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">month</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">></span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">\\d</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">{2}</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">)-(?&#x3C;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">day</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">></span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">\\d</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">{2}</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">)/</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> matchObj</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> RE_DATE</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">exec</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"1999-12-31\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> year</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\"> matchObj</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">groups</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">year</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 1999</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> month</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\"> matchObj</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">groups</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">month</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 12</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> day</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\"> matchObj</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">groups</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">day</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 31</span></span></code></pre>\n</div><p>上面代码中，“具名组匹配”在圆括号内部，模式的头部添加“问号 + 尖括号 + 组名”(<code v-pre>?&lt;year&gt;</code>)，然后就可以在 <code v-pre>exec</code> 方法返回结果的 <code v-pre>groups</code> 属性上引用该组名。同时，数字序号(<code v-pre>matchObj[1]</code>)依然有效。</p>\n<p>具名组匹配等于为每一组匹配加上了 ID，便于描述匹配的目的。如果组的顺序变了，也不用改变匹配后的处理代码。</p>\n<p>如果具名组没有匹配，那么对应的 <code v-pre>groups</code> 对象属性会是 <code v-pre>undefined</code>。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> RE_OPT_A</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\"> /</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">^</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">(?&#x3C;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">as</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">>a</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">+</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">)</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">?</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">$</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> matchObj</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> RE_OPT_A</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">exec</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">matchObj</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">groups</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">as</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// undefined</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"as\"</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> in</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\"> matchObj</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">groups</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// true</span></span></code></pre>\n</div><p>上面代码中，具名组 <code v-pre>as</code> 没有找到匹配，那么 <code v-pre>matchObj.groups.as</code> 属性值就是 <code v-pre>undefined</code>，并且 <code v-pre>as</code> 这个键名在 <code v-pre>groups</code> 是始终存在的。</p>\n<h3 id=\"解构赋值和替换\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#解构赋值和替换\"><span>解构赋值和替换</span></a></h3>\n<p>有了具名组匹配以后，可以使用解构赋值直接从匹配结果上为变量赋值。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">let</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  groups</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: { </span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">one</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">two</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> },</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">} </span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\"> /</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">^</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">(?&#x3C;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">one</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">></span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">.</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">*</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">):(?&#x3C;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">two</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">></span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">.</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">*</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">)</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">$</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">u</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">exec</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"foo:bar\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">one</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// foo</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">two</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// bar</span></span></code></pre>\n</div><p>字符串替换时，使用<code v-pre>$&lt;组名&gt;</code> 引用具名组。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">let</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> re</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\"> /(?&#x3C;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">year</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">></span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">\\d</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">{4}</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">)-(?&#x3C;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">month</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">></span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">\\d</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">{2}</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">)-(?&#x3C;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">day</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">></span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">\\d</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">{2}</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">)/</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">u</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"2015-01-02\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">replace</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">re</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"$&#x3C;day>/$&#x3C;month>/$&#x3C;year>\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// '02/01/2015'</span></span></code></pre>\n</div><p>上面代码中，<code v-pre>replace</code> 方法的第二个参数是一个字符串，而不是正则表达式。</p>\n<p><code v-pre>replace</code> 方法的第二个参数也可以是函数，该函数的参数序列如下。</p>\n<div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"2015-01-02\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">replace</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">  re</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  (</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">    matched</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 整个匹配结果 2015-01-02</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">    capture1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 第一个组匹配 2015</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">    capture2</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 第二个组匹配 01</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">    capture3</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 第三个组匹配 02</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">    position</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 匹配开始的位置 0</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\">    S</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 原字符串 2015-01-02</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">    groups</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 具名组构成的一个对象 {year, month, day}</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  ) </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">=></span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    let</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> { </span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">day</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">month</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">year</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> } </span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> args</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">[</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">args</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">length</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> -</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">];</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    return</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> `</span><span style=\"--shiki-light:#CA1243;--shiki-dark:#C678DD\">${</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">day</span><span style=\"--shiki-light:#CA1243;--shiki-dark:#C678DD\">}</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">/</span><span style=\"--shiki-light:#CA1243;--shiki-dark:#C678DD\">${</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">month</span><span style=\"--shiki-light:#CA1243;--shiki-dark:#C678DD\">}</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">/</span><span style=\"--shiki-light:#CA1243;--shiki-dark:#C678DD\">${</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">year</span><span style=\"--shiki-light:#CA1243;--shiki-dark:#C678DD\">}</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">`</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  },</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>具名组匹配在原来的基础上，新增了最后一个函数参数: 具名组构成的一个对象。函数内部可以直接对这个对象进行解构赋值。</p>\n<h3 id=\"引用\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#引用\"><span>引用</span></a></h3>\n<p>如果要在正则表达式内部引用某个“具名组匹配”，可以使用 <code v-pre>\\k&lt;组名&gt;</code> 的写法。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> RE_TWICE</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\"> /</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">^</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">(?&#x3C;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">word</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">></span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">[a-z]</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">+</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">)!</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">\\k&#x3C;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">word</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">>$</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\">RE_TWICE</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">test</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"abc!abc\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">); </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// true</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\">RE_TWICE</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">test</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"abc!ab\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">); </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// false</span></span></code></pre>\n</div><p>数字引用(<code v-pre>\\1</code>)依然有效。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> RE_TWICE</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\"> /</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">^</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">(?&#x3C;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">word</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">></span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">[a-z]</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">+</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">)!</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">\\1$</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\">RE_TWICE</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">test</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"abc!abc\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">); </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// true</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\">RE_TWICE</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">test</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"abc!ab\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">); </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// false</span></span></code></pre>\n</div><p>这两种引用语法还可以同时使用。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> RE_TWICE</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\"> /</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">^</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">(?&#x3C;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">word</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">></span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">[a-z]</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">+</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">)!</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">\\k&#x3C;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">word</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">></span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">!</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">\\1$</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\">RE_TWICE</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">test</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"abc!abc!abc\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">); </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// true</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\">RE_TWICE</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">test</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"abc!abc!ab\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">); </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// false</span></span></code></pre>\n</div><h2 id=\"string-prototype-matchall\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#string-prototype-matchall\"><span>String.prototype.matchAll</span></a></h2>\n<p>如果一个正则表达式在字符串里面有多个匹配，现在一般使用 <code v-pre>g</code> 修饰符或 <code v-pre>y</code> 修饰符，在循环里面逐一取出。</p>\n<div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">var</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> regex</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\"> /t(e)(st(</span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">\\d</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">?</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">))/</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">g</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">var</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> string</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"test1test2test3\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">var</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> matches</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> [];</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">var</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> match</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">while</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> ((</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">match</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\"> regex</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">exec</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">string</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">))) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">  matches</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">push</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">match</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">matches</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// [</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">//   [\"test1\", \"e\", \"st1\", \"1\", index: 0, input: \"test1test2test3\"],</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">//   [\"test2\", \"e\", \"st2\", \"2\", index: 5, input: \"test1test2test3\"],</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">//   [\"test3\", \"e\", \"st3\", \"3\", index: 10, input: \"test1test2test3\"]</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// ]</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>上面代码中，<code v-pre>while</code> 循环取出每一轮的正则匹配，一共三轮。</p>\n<p>目前有一个<a href=\"https://github.com/tc39/proposal-string-matchall\" target=\"_blank\" rel=\"noopener noreferrer\">提案</a>，增加了 <code v-pre>String.prototype.matchAll</code> 方法，可以一次性取出所有匹配。不过，它返回的是一个遍历器(Iterator)，而不是数组。</p>\n<div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> string</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"test1test2test3\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// g 修饰符加不加都可以</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> regex</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\"> /t(e)(st(</span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">\\d</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">?</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">))/</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">g</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">for</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> match</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> of</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\"> string</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">matchAll</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">regex</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">  console</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">log</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">match</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// [\"test1\", \"e\", \"st1\", \"1\", index: 0, input: \"test1test2test3\"]</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// [\"test2\", \"e\", \"st2\", \"2\", index: 5, input: \"test1test2test3\"]</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// [\"test3\", \"e\", \"st3\", \"3\", index: 10, input: \"test1test2test3\"]</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>上面代码中，由于 <code v-pre>string.matchAll(regex)</code> 返回的是遍历器，所以可以用 <code v-pre>for...of</code> 循环取出。相对于返回数组，返回遍历器的好处在于，如果匹配结果是一个很大的数组，那么遍历器比较节省资源。</p>\n<p>遍历器转为数组是非常简单的，使用 <code v-pre>...</code> 运算符和 <code v-pre>Array.from</code> 方法就可以了。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 转为数组方法一</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">[</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">...</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">string</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">matchAll</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">regex</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)];</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 转为数组方法二</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">Array</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">from</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">string</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">matchAll</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">regex</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">));</span></span></code></pre>\n</div>","env":{"base":"/","filePath":"/Users/carson/Desktop/Mister-Hope.github.io-main/src/code/language/js/es6/regex.md","filePathRelative":"code/language/js/es6/regex.md","frontmatter":{"icon":"regexp","author":"阮一峰","date":"2019-10-21T00:00:00.000Z","category":"JavaScript","copyright":"此部分博客采用 <a href=\"http://creativecommons.org/licenses/by-nc/4.0/\" rel=\"noopener noreferrer\" target=\"_blank\">“保持署名—非商用”创意共享4.0许可证</a>"},"sfcBlocks":{"template":{"type":"template","content":"<template><h1 id=\"正则的扩展\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#正则的扩展\"><span>正则的扩展</span></a></h1>\n<h2 id=\"regexp-构造函数\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#regexp-构造函数\"><span><code v-pre>RegExp</code> 构造函数</span></a></h2>\n<p>在 ES5 中，<code v-pre>RegExp</code> 构造函数的参数有两种情况。</p>\n<p>第一种情况是，参数是字符串，这时第二个参数表示正则表达式的修饰符(flag)。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">var</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> regex</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> new</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> RegExp</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"xyz\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"i\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 等价于</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">var</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> regex</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\"> /xyz/</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">i</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span></code></pre>\n</div><p>第二种情况是，参数是一个正则表示式，这时会返回一个原有正则表达式的拷贝。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">var</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> regex</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> new</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> RegExp</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/xyz/</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">i</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 等价于</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">var</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> regex</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\"> /xyz/</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">i</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span></code></pre>\n</div><p>但是，ES5 不允许此时使用第二个参数添加修饰符，否则会报错。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">var</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> regex</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> new</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> RegExp</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/xyz/</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"i\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// Uncaught TypeError: Cannot supply flags when constructing one RegExp from another</span></span></code></pre>\n</div><p>ES6 改变了这种行为。如果 <code v-pre>RegExp</code> 构造函数第一个参数是一个正则对象，那么可以使用第二个参数指定修饰符。而且，返回的正则表达式会忽略原有的正则表达式的修饰符，只使用新指定的修饰符。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">new</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> RegExp</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/abc/</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">gi</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"i\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">).</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">flags</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// \"i\"</span></span></code></pre>\n</div><p>上面代码中，原有正则对象的修饰符是 <code v-pre>ig</code>，它会被第二个参数 <code v-pre>i</code> 覆盖。</p>\n<h2 id=\"字符串的正则方法\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#字符串的正则方法\"><span>字符串的正则方法</span></a></h2>\n<p>字符串对象共有 4 个方法，可以使用正则表达式: <code v-pre>match()</code>、<code v-pre>replace()</code>、<code v-pre>search()</code> 和 <code v-pre>split()</code>。</p>\n<p>ES6 将这 4 个方法，在语言内部全部调用 <code v-pre>RegExp</code> 的实例方法，从而做到所有与正则相关的方法，全都定义在 <code v-pre>RegExp</code> 对象上。</p>\n<ul>\n<li><code v-pre>String.prototype.match</code> 调用 <code v-pre>RegExp.prototype[Symbol.match]</code></li>\n<li><code v-pre>String.prototype.replace</code> 调用 <code v-pre>RegExp.prototype[Symbol.replace]</code></li>\n<li><code v-pre>String.prototype.search</code> 调用 <code v-pre>RegExp.prototype[Symbol.search]</code></li>\n<li><code v-pre>String.prototype.split</code> 调用 <code v-pre>RegExp.prototype[Symbol.split]</code></li>\n</ul>\n<h2 id=\"u-修饰符\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#u-修饰符\"><span>u 修饰符</span></a></h2>\n<p>ES6 对正则表达式添加了 <code v-pre>u</code> 修饰符，含义为“Unicode 模式”，用来正确处理大于 <code v-pre>\\uFFFF</code> 的 Unicode 字符。也就是说，会正确处理四个字节的 UTF-16 编码。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">^</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">\\uD83D</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">u</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">test</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">\\uD83D\\uDC2A</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// false</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">^</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">\\uD83D</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">test</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">\\uD83D\\uDC2A</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// true</span></span></code></pre>\n</div><p>上面代码中，<code v-pre>\\uD83D\\uDC2A</code> 是一个四个字节的 UTF-16 编码，代表一个字符。但是，ES5 不支持四个字节的 UTF-16 编码，会将其识别为两个字符，导致第二行代码结果为 <code v-pre>true</code>。加了 <code v-pre>u</code> 修饰符以后，ES6 就会识别其为一个字符，所以第一行代码结果为 <code v-pre>false</code>。</p>\n<p>一旦加上 <code v-pre>u</code> 修饰符号，就会修改下面这些正则表达式的行为。</p>\n<ol>\n<li>\n<p>点字符</p>\n<p>点(<code v-pre>.</code>)字符在正则表达式中，含义是除了换行符以外的任意单个字符。对于码点大于 <code v-pre>0xFFFF</code> 的 Unicode 字符，点字符不能识别，必须加上 <code v-pre>u</code> 修饰符。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">var</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> s</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> '𠮷'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">^</span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">.</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">$</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">test</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">s</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// false</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">^</span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">.</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">$</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">u</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">test</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">s</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// true</span></span></code></pre>\n</div><p>上面代码表示，如果不添加 <code v-pre>u</code> 修饰符，正则表达式就会认为字符串为两个字符，从而匹配失败。</p>\n</li>\n<li>\n<p>Unicode 字符表示法</p>\n<p>ES6 新增了使用大括号表示 Unicode 字符，这种表示法在正则表达式中必须加上 <code v-pre>u</code> 修饰符，才能识别当中的大括号，否则会被解读为量词。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">\\u</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">{61}</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">test</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"a\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">); </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// false</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/a/</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">u</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">test</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"a\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">); </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// true</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/𠮷/</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">u</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">test</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"𠮷\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">); </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// true</span></span></code></pre>\n</div><p>上面代码表示，如果不加 <code v-pre>u</code> 修饰符，正则表达式无法识别 <code v-pre>\\u{61}</code> 这种表示法，只会认为这匹配 61 个连续的 <code v-pre>u</code>。</p>\n</li>\n<li>\n<p>量词</p>\n<p>使用 <code v-pre>u</code> 修饰符后，所有量词都会正确识别码点大于 <code v-pre>0xFFFF</code> 的 Unicode 字符。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/a</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">{2}</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">test</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'aa'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// true</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/a</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">{2}</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">u</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">test</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'aa'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// true</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/𠮷</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">{2}</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">test</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'𠮷𠮷'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// false</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/𠮷</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">{2}</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">u</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">test</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'𠮷𠮷'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// true</span></span></code></pre>\n</div></li>\n<li>\n<p>预定义模式</p>\n<p><code v-pre>u</code> 修饰符也影响到预定义模式，能否正确识别码点大于 <code v-pre>0xFFFF</code> 的 Unicode 字符。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">^</span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">\\S</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">$</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">test</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'𠮷'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// false</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">^</span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">\\S</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">$</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">u</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">test</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'𠮷'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// true</span></span></code></pre>\n</div><p>上面代码的 <code v-pre>\\S</code> 是预定义模式，匹配所有非空白字符。只有加了 <code v-pre>u</code> 修饰符，它才能正确匹配码点大于 <code v-pre>0xFFFF</code> 的 Unicode 字符。</p>\n<p>利用这一点，可以写出一个正确返回字符串长度的函数。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">function</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> codePointLength</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">text</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  var</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> result</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\"> text</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">match</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">[</span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">\\s\\S</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">]</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">gu</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  return</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> result</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#C678DD\"> ?</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\"> result</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">length</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#C678DD\"> :</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">var</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> s</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"𠮷𠮷\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">s</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">length</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 4</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">codePointLength</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">s</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">); </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 2</span></span></code></pre>\n</div></li>\n<li>\n<p><code v-pre>i</code> 修饰符</p>\n<p>有些 Unicode 字符的编码不同，但是字型很相近，比如，<code v-pre>\\u004B</code> 与 <code v-pre>\\u212A</code> 都是大写的 <code v-pre>K</code>。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">[a-z]</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">i</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">test</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">\\u212A</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) </span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">/</span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"> // false</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  [</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">a</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> -</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> z</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">] </span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">/</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">  iu</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">test</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">\\u212A</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">); </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// true</span></span></code></pre>\n</div><p>上面代码中，不加 <code v-pre>u</code> 修饰符，就无法识别非规范的 <code v-pre>K</code> 字符。</p>\n</li>\n</ol>\n<h2 id=\"regexp-prototype-unicode-属性\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#regexp-prototype-unicode-属性\"><span>RegExp.prototype.unicode 属性</span></a></h2>\n<p>正则实例对象新增 <code v-pre>unicode</code> 属性，表示是否设置了 <code v-pre>u</code> 修饰符。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> r1</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\"> /hello/</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> r2</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\"> /hello/</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">u</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">r1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">unicode</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// false</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">r2</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">unicode</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// true</span></span></code></pre>\n</div><p>上面代码中，正则表达式是否设置了 <code v-pre>u</code> 修饰符，可以从 <code v-pre>unicode</code> 属性看出来。</p>\n<h2 id=\"y-修饰符\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#y-修饰符\"><span>y 修饰符</span></a></h2>\n<p>除了 <code v-pre>u</code> 修饰符，ES6 还为正则表达式添加了 <code v-pre>y</code> 修饰符，叫做“粘连”(sticky)修饰符。</p>\n<p><code v-pre>y</code> 修饰符的作用与 <code v-pre>g</code> 修饰符类似，也是全局匹配，后一次匹配都从上一次匹配成功的下一个位置开始。不同之处在于，<code v-pre>g</code> 修饰符只要剩余位置中存在匹配就可，而 <code v-pre>y</code> 修饰符确保匹配必须从剩余的第一个位置开始，这也就是“粘连”的涵义。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">var</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> s</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"aaa_aa_a\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">var</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> r1</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\"> /a</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">+</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">g</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">var</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> r2</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\"> /a</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">+</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">y</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">r1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">exec</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">s</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">); </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// [\"aaa\"]</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">r2</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">exec</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">s</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">); </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// [\"aaa\"]</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">r1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">exec</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">s</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">); </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// [\"aa\"]</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">r2</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">exec</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">s</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">); </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// null</span></span></code></pre>\n</div><p>上面代码有两个正则表达式，一个使用 <code v-pre>g</code> 修饰符，另一个使用 <code v-pre>y</code> 修饰符。这两个正则表达式各执行了两次，第一次执行的时候，两者行为相同，剩余字符串都是 <code v-pre>_aa_a</code>。由于 <code v-pre>g</code> 修饰没有位置要求，所以第二次执行会返回结果，而 <code v-pre>y</code> 修饰符要求匹配必须从头部开始，所以返回 <code v-pre>null</code>。</p>\n<p>如果改一下正则表达式，保证每次都能头部匹配，<code v-pre>y</code> 修饰符就会返回结果了。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">var</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> s</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"aaa_aa_a\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">var</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> r</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\"> /a</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">+</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">_/</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">y</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">r</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">exec</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">s</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">); </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// [\"aaa_\"]</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">r</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">exec</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">s</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">); </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// [\"aa_\"]</span></span></code></pre>\n</div><p>上面代码每次匹配，都是从剩余字符串的头部开始。</p>\n<p>使用 <code v-pre>lastIndex</code> 属性，可以更好地说明 <code v-pre>y</code> 修饰符。</p>\n<div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> REGEX</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\"> /a/</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">g</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 指定从2号位置(y)开始匹配</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\">REGEX</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">lastIndex</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 2</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 匹配成功</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> match</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> REGEX</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">exec</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"xaya\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 在3号位置匹配成功</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">match</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">index</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 3</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 下一次匹配从4号位开始</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\">REGEX</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">lastIndex</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 4</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 4号位开始匹配失败</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\">REGEX</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">exec</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"xaya\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">); </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// null</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>上面代码中，<code v-pre>lastIndex</code> 属性指定每次搜索的开始位置，<code v-pre>g</code> 修饰符从这个位置开始向后搜索，直到发现匹配为止。</p>\n<p><code v-pre>y</code> 修饰符同样遵守 <code v-pre>lastIndex</code> 属性，但是要求必须在 <code v-pre>lastIndex</code> 指定的位置发现匹配。</p>\n<div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> REGEX</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\"> /a/</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">y</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 指定从2号位置开始匹配</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\">REGEX</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">lastIndex</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 2</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 不是粘连，匹配失败</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\">REGEX</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">exec</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"xaya\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">); </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// null</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 指定从3号位置开始匹配</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\">REGEX</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">lastIndex</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 3</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 3号位置是粘连，匹配成功</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> match</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> REGEX</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">exec</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"xaya\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">match</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">index</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 3</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\">REGEX</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">lastIndex</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 4</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>实际上，<code v-pre>y</code> 修饰符号隐含了头部匹配的标志 <code v-pre>^</code>。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/b/</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">y</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">exec</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"aba\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// null</span></span></code></pre>\n</div><p>上面代码由于不能保证头部匹配，所以返回 <code v-pre>null</code>。<code v-pre>y</code> 修饰符的设计本意，就是让头部匹配的标志 <code v-pre>^</code> 在全局匹配中都有效。</p>\n<p>下面是字符串对象的 <code v-pre>replace</code> 方法的例子。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> REGEX</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\"> /a/</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">gy</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"aaxa\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">replace</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\">REGEX</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"-\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">); </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// '--xa'</span></span></code></pre>\n</div><p>上面代码中，最后一个 <code v-pre>a</code> 因为不是出现在下一次匹配的头部，所以不会被替换。</p>\n<p>单单一个 <code v-pre>y</code> 修饰符对 <code v-pre>match</code> 方法，只能返回第一个匹配，必须与 <code v-pre>g</code> 修饰符联用，才能返回所有匹配。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"a1a2a3\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">match</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/a</span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">\\d</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">y</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">); </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// [\"a1\"]</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"a1a2a3\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">match</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/a</span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">\\d</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">gy</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">); </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// [\"a1\", \"a2\", \"a3\"]</span></span></code></pre>\n</div><p><code v-pre>y</code> 修饰符的一个应用，是从字符串提取 token(词元)，<code v-pre>y</code> 修饰符确保了匹配之间不会有漏掉的字符。</p>\n<div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> TOKEN_Y</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\"> /</span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">\\s</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">*</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">(</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">\\+</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">|</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">[0-9]</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">+</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">)</span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">\\s</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">*</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">y</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> TOKEN_G</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\"> /</span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">\\s</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">*</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">(</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">\\+</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">|</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">[0-9]</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">+</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">)</span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">\\s</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">*</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">g</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">tokenize</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\">TOKEN_Y</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"3 + 4\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// [ '3', '+', '4' ]</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">tokenize</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\">TOKEN_G</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"3 + 4\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// [ '3', '+', '4' ]</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">function</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> tokenize</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">TOKEN_REGEX</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">str</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  let</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> result</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> [];</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  let</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> match</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  while</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> ((</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">match</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> TOKEN_REGEX</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">exec</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">str</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">))) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">    result</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">push</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">match</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">[</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">]);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  return</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> result</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>上面代码中，如果字符串里面没有非法字符，<code v-pre>y</code> 修饰符与 <code v-pre>g</code> 修饰符的提取结果是一样的。但是，一旦出现非法字符，两者的行为就不一样了。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">tokenize</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\">TOKEN_Y</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"3x + 4\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// [ '3' ]</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">tokenize</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\">TOKEN_G</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"3x + 4\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// [ '3', '+', '4' ]</span></span></code></pre>\n</div><p>上面代码中，<code v-pre>g</code> 修饰符会忽略非法字符，而 <code v-pre>y</code> 修饰符不会，这样就很容易发现错误。</p>\n<h2 id=\"regexp-prototype-sticky-属性\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#regexp-prototype-sticky-属性\"><span>RegExp.prototype.sticky 属性</span></a></h2>\n<p>与 <code v-pre>y</code> 修饰符相匹配，ES6 的正则实例对象多了 <code v-pre>sticky</code> 属性，表示是否设置了 <code v-pre>y</code> 修饰符。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">var</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> r</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\"> /hello</span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">\\d</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">y</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">r</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">sticky</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// true</span></span></code></pre>\n</div><h2 id=\"regexp-prototype-flags-属性\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#regexp-prototype-flags-属性\"><span>RegExp.prototype.flags 属性</span></a></h2>\n<p>ES6 为正则表达式新增了 <code v-pre>flags</code> 属性，会返回正则表达式的修饰符。</p>\n<div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// ES5 的 source 属性</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 返回正则表达式的正文</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/abc/</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">gi</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">source</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> /</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">  // \"abc\"</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">  // ES6 的 flags 属性</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">  // 返回正则表达式的修饰符</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">  abc</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> /</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">  ig</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">flags</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 'gi'</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2 id=\"s-修饰符-dotall-模式\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#s-修饰符-dotall-模式\"><span>s 修饰符: dotAll 模式</span></a></h2>\n<p>正则表达式中，点(<code v-pre>.</code>)是一个特殊字符，代表任意的单个字符，但是有两个例外。一个是四个字节的 UTF-16 字符，这个可以用 <code v-pre>u</code> 修饰符解决；另一个是行终止符(line terminator character)。</p>\n<p>所谓行终止符，就是该字符表示一行的终结。以下四个字符属于”行终止符“。</p>\n<ul>\n<li>U+000A 换行符(<code v-pre>\\n</code>)</li>\n<li>U+000D 回车符(<code v-pre>\\r</code>)</li>\n<li>U+2028 行分隔符(line separator)</li>\n<li>U+2029 段分隔符(paragraph separator)</li>\n</ul>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/foo</span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">.</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">bar/</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">test</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"foo</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">\\n</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">bar\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// false</span></span></code></pre>\n</div><p>上面代码中，因为 <code v-pre>.</code> 不匹配 <code v-pre>\\n</code>，所以正则表达式返回 <code v-pre>false</code>。</p>\n<p>但是，很多时候我们希望匹配的是任意单个字符，这时有一种变通的写法。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/foo</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">[</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">^</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">]</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">bar/</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">test</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"foo</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">\\n</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">bar\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// true</span></span></code></pre>\n</div><p>这种解决方案毕竟不太符合直觉，ES2018 <a href=\"https://github.com/tc39/proposal-regexp-dotall-flag\" target=\"_blank\" rel=\"noopener noreferrer\">引入</a><code v-pre>s</code> 修饰符，使得 <code v-pre>.</code> 可以匹配任意单个字符。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/foo</span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">.</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">bar/</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">s</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">test</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"foo</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">\\n</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">bar\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">); </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// true</span></span></code></pre>\n</div><p>这被称为 <code v-pre>dotAll</code> 模式，即点(dot)代表一切字符。所以，正则表达式还引入了一个 <code v-pre>dotAll</code> 属性，返回一个布尔值，表示该正则表达式是否处在 <code v-pre>dotAll</code> 模式。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> re</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\"> /foo</span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">.</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">bar/</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">s</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 另一种写法</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// const re = new RegExp('foo.bar', 's');</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">re</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">test</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"foo</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">\\n</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">bar\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">); </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// true</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">re</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">dotAll</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// true</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">re</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">flags</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 's'</span></span></code></pre>\n</div><p><code v-pre>/s</code> 修饰符和多行修饰符<code v-pre>/m</code> 不冲突，两者一起使用的情况下，<code v-pre>.</code> 匹配所有字符，而 <code v-pre>^</code> 和<code v-pre>$</code>匹配每一行的行首和行尾。</p>\n<h2 id=\"后行断言\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#后行断言\"><span>后行断言</span></a></h2>\n<p>JavaScript 语言的正则表达式，只支持先行断言(lookahead)和先行否定断言(negative lookahead)，不支持后行断言(lookbehind)和后行否定断言(negative lookbehind)。ES2018 引入<a href=\"https://github.com/tc39/proposal-regexp-lookbehind\" target=\"_blank\" rel=\"noopener noreferrer\">后行断言</a>，V8 引擎 4.9 版(Chrome 62)已经支持。</p>\n<p>”先行断言“指的是，<code v-pre>x</code> 只有在 <code v-pre>y</code> 前面才匹配，必须写成<code v-pre>/x(?=y)/</code>。比如，只匹配百分号之前的数字，要写成<code v-pre>/\\d+(?=%)/</code>。”先行否定断言“指的是，<code v-pre>x</code> 只有不在 <code v-pre>y</code> 前面才匹配，必须写成<code v-pre>/x(?!y)/</code>。比如，只匹配不在百分号之前的数字，要写成<code v-pre>/\\d+(?!%)/</code>。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">\\d</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">+</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">(?=%)/</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">exec</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'100% of US presidents have been male'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)  </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// [\"100\"]</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">\\d</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">+</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">(?!%)/</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">exec</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'that’s all 44 of them'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)                 </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// [\"44\"]</span></span></code></pre>\n</div><p>上面两个字符串，如果互换正则表达式，就不会得到相同结果。另外，还可以看到，”先行断言“括号之中的部分(<code v-pre>(?=%)</code>)，是不计入返回结果的。</p>\n<p>“后行断言”正好与“先行断言”相反，<code v-pre>x</code> 只有在 <code v-pre>y</code> 后面才匹配，必须写成<code v-pre>/(?&lt;=y)x/</code>。比如，只匹配美元符号之后的数字，要写成<code v-pre>/(?&lt;=\\$)\\d+/</code>。”后行否定断言“则与”先行否定断言“相反，<code v-pre>x</code> 只有不在 <code v-pre>y</code> 后面才匹配，必须写成<code v-pre>/(?&lt;!y)x/</code>。比如，只匹配不在美元符号后面的数字，要写成<code v-pre>/(?&lt;!\\$)\\d+/</code>。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/(?&#x3C;=</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">\\$</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">)</span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">\\d</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">+</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">exec</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'Benjamin Franklin is on the $100 bill'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)  </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// [\"100\"]</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/(?&#x3C;!</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">\\$</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">)</span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">\\d</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">+</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">exec</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'it’s is worth about €90'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)                </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// [\"90\"]</span></span></code></pre>\n</div><p>上面的例子中，“后行断言”的括号之中的部分(<code v-pre>(?&lt;=\\$)</code>)，也是不计入返回结果。</p>\n<p>下面的例子是使用后行断言进行字符串替换。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> RE_DOLLAR_PREFIX</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\"> /(?&#x3C;=</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">\\$</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">)foo/</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">g</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"$foo %foo foo\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">replace</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\">RE_DOLLAR_PREFIX</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"bar\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// '$bar %foo foo'</span></span></code></pre>\n</div><p>上面代码中，只有在美元符号后面的 <code v-pre>foo</code> 才会被替换。</p>\n<p>“后行断言”的实现，需要先匹配<code v-pre>/(?&lt;=y)x/</code>的 <code v-pre>x</code>，然后再回到左边，匹配 <code v-pre>y</code> 的部分。这种“先右后左”的执行顺序，与所有其他正则操作相反，导致了一些不符合预期的行为。</p>\n<p>首先，后行断言的组匹配，与正常情况下结果是不一样的。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/(?&#x3C;=(</span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">\\d</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">+</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">)(</span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">\\d</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">+</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">))</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">$</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">exec</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'1053'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// [\"\", \"1\", \"053\"]</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">^</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">(</span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">\\d</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">+</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">)(</span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">\\d</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">+</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">)</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">$</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">exec</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'1053'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// [\"1053\", \"105\", \"3\"]</span></span></code></pre>\n</div><p>上面代码中，需要捕捉两个组匹配。没有“后行断言”时，第一个括号是贪婪模式，第二个括号只能捕获一个字符，所以结果是 <code v-pre>105</code> 和 <code v-pre>3</code>。而“后行断言”时，由于执行顺序是从右到左，第二个括号是贪婪模式，第一个括号只能捕获一个字符，所以结果是 <code v-pre>1</code> 和 <code v-pre>053</code>。</p>\n<p>其次，“后行断言”的反斜杠引用，也与通常的顺序相反，必须放在对应的那个括号之前。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/(?&#x3C;=(o)d</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">\\1</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">)r/</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">exec</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'hodor'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)  </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// null</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/(?&#x3C;=</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">\\1</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">d(o))r/</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">exec</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'hodor'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)  </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// [\"r\", \"o\"]</span></span></code></pre>\n</div><p>上面代码中，如果后行断言的反斜杠引用(<code v-pre>\\1</code>)放在括号的后面，就不会得到匹配结果，必须放在前面才可以。因为后行断言是先从左到右扫描，发现匹配以后再回过头，从右到左完成反斜杠引用。</p>\n<h2 id=\"unicode-属性类\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#unicode-属性类\"><span>Unicode 属性类</span></a></h2>\n<p>ES2018 <a href=\"https://github.com/tc39/proposal-regexp-unicode-property-escapes\" target=\"_blank\" rel=\"noopener noreferrer\">引入</a>了一种新的类的写法 <code v-pre>\\p{...}</code> 和 <code v-pre>\\P{...}</code>，允许正则表达式匹配符合 Unicode 某种属性的所有字符。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> regexGreekSymbol</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\"> /</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">\\p</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">{Script=Greek}/</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">u</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">regexGreekSymbol</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">test</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"π\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">); </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// true</span></span></code></pre>\n</div><p>上面代码中，<code v-pre>\\p{Script=Greek}</code> 指定匹配一个希腊文字母，所以匹配<code v-pre>π</code>成功。</p>\n<p>Unicode 属性类要指定属性名和属性值。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">\\</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">p</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">{</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">UnicodePropertyName</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">UnicodePropertyValue</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n</div><p>对于某些属性，可以只写属性名，或者只写属性值。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">\\</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">p</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">{</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">UnicodePropertyName</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">\\</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">p</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">{</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">UnicodePropertyValue</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n</div><p><code v-pre>\\P{…}</code> 是 <code v-pre>\\p{…}</code> 的反向匹配，即匹配不满足条件的字符。</p>\n<p>注意，这两种类只对 Unicode 有效，所以使用的时候一定要加上 <code v-pre>u</code> 修饰符。如果不加 <code v-pre>u</code> 修饰符，正则表达式使用 <code v-pre>\\p</code> 和 <code v-pre>\\P</code> 会报错，ECMAScript 预留了这两个类。</p>\n<p>由于 Unicode 的各种属性非常多，所以这种新的类的表达能力非常强。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> regex</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\"> /</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">^</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">\\p</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">{Decimal_Number}</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">+</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">$</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">u</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">regex</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">test</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"𝟏𝟐𝟑𝟜𝟝𝟞𝟩𝟪𝟫𝟬𝟭𝟮𝟯𝟺𝟻𝟼\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">); </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// true</span></span></code></pre>\n</div><p>上面代码中，属性类指定匹配所有十进制字符，可以看到各种字型的十进制字符都会匹配成功。</p>\n<p><code v-pre>\\p{Number}</code> 甚至能匹配罗马数字。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 匹配所有数字</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> regex</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\"> /</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">^</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">\\p</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">{Number}</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">+</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">$</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">u</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">regex</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">test</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"²³¹¼½¾\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">); </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// true</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">regex</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">test</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"㉛㉜㉝\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">); </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// true</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">regex</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">test</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"ⅠⅡⅢⅣⅤⅥⅦⅧⅨⅩⅪⅫ\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">); </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// true</span></span></code></pre>\n</div><p>下面是其他一些例子。</p>\n<div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 匹配所有空格</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">\\</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">p</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">{</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">White_Space</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 匹配各种文字的所有字母，等同于 Unicode 版的 \\w</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">[\\</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">p</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">{</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">Alphabetic</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}\\</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">p</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">{</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">Mark</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}\\</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">p</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">{</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">Decimal_Number</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}\\</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">p</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">{</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">Connector_Punctuation</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}\\</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">p</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">{</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">Join_Control</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}]</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 匹配各种文字的所有非字母的字符，等同于 Unicode 版的 \\W</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">[</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">^</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">\\</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">p</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">{</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">Alphabetic</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}\\</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">p</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">{</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">Mark</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}\\</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">p</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">{</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">Decimal_Number</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}\\</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">p</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">{</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">Connector_Punctuation</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}\\</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">p</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">{</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">Join_Control</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}]</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 匹配 Emoji</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">\\p</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">{Emoji_Modifier_Base}</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">\\p</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">{Emoji_Modifier}</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">?</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">|</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">\\p</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">{Emoji_Presentation}</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">|</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">\\p</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">{Emoji}</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">\\uFE0F</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">gu</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 匹配所有的箭头字符</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> regexArrows</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\"> /</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">^</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">\\p</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">{Block=Arrows}</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">+</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">$</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">u</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">regexArrows</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">test</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'←↑→↓↔↕↖↗↘↙⇏⇐⇑⇒⇓⇔⇕⇖⇗⇘⇙⇧⇩'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// true</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2 id=\"具名组匹配\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#具名组匹配\"><span>具名组匹配</span></a></h2>\n<h3 id=\"简介\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#简介\"><span>简介</span></a></h3>\n<p>正则表达式使用圆括号进行组匹配。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> RE_DATE</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\"> /(</span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">\\d</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">{4}</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">)-(</span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">\\d</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">{2}</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">)-(</span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">\\d</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">{2}</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">)/</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span></code></pre>\n</div><p>上面代码中，正则表达式里面有三组圆括号。使用 <code v-pre>exec</code> 方法，就可以将这三组匹配结果提取出来。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> RE_DATE</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\"> /(</span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">\\d</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">{4}</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">)-(</span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">\\d</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">{2}</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">)-(</span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">\\d</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">{2}</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">)/</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> matchObj</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> RE_DATE</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">exec</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"1999-12-31\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> year</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> matchObj</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">[</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">]; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 1999</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> month</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> matchObj</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">[</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">2</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">]; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 12</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> day</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> matchObj</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">[</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">3</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">]; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 31</span></span></code></pre>\n</div><p>组匹配的一个问题是，每一组的匹配含义不容易看出来，而且只能用数字序号(比如 <code v-pre>matchObj[1]</code>)引用，要是组的顺序变了，引用的时候就必须修改序号。</p>\n<p>ES2018 引入了<a href=\"https://github.com/tc39/proposal-regexp-named-groups\" target=\"_blank\" rel=\"noopener noreferrer\">具名组匹配</a>(Named Capture Groups)，允许为每一个组匹配指定一个名字，既便于阅读代码，又便于引用。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> RE_DATE</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\"> /(?&#x3C;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">year</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">></span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">\\d</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">{4}</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">)-(?&#x3C;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">month</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">></span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">\\d</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">{2}</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">)-(?&#x3C;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">day</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">></span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">\\d</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">{2}</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">)/</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> matchObj</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> RE_DATE</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">exec</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"1999-12-31\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> year</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\"> matchObj</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">groups</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">year</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 1999</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> month</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\"> matchObj</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">groups</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">month</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 12</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> day</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\"> matchObj</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">groups</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">day</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 31</span></span></code></pre>\n</div><p>上面代码中，“具名组匹配”在圆括号内部，模式的头部添加“问号 + 尖括号 + 组名”(<code v-pre>?&lt;year&gt;</code>)，然后就可以在 <code v-pre>exec</code> 方法返回结果的 <code v-pre>groups</code> 属性上引用该组名。同时，数字序号(<code v-pre>matchObj[1]</code>)依然有效。</p>\n<p>具名组匹配等于为每一组匹配加上了 ID，便于描述匹配的目的。如果组的顺序变了，也不用改变匹配后的处理代码。</p>\n<p>如果具名组没有匹配，那么对应的 <code v-pre>groups</code> 对象属性会是 <code v-pre>undefined</code>。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> RE_OPT_A</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\"> /</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">^</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">(?&#x3C;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">as</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">>a</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">+</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">)</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">?</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">$</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> matchObj</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> RE_OPT_A</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">exec</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">matchObj</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">groups</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">as</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// undefined</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"as\"</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> in</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\"> matchObj</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">groups</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// true</span></span></code></pre>\n</div><p>上面代码中，具名组 <code v-pre>as</code> 没有找到匹配，那么 <code v-pre>matchObj.groups.as</code> 属性值就是 <code v-pre>undefined</code>，并且 <code v-pre>as</code> 这个键名在 <code v-pre>groups</code> 是始终存在的。</p>\n<h3 id=\"解构赋值和替换\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#解构赋值和替换\"><span>解构赋值和替换</span></a></h3>\n<p>有了具名组匹配以后，可以使用解构赋值直接从匹配结果上为变量赋值。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">let</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  groups</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: { </span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">one</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">two</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> },</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">} </span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\"> /</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">^</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">(?&#x3C;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">one</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">></span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">.</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">*</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">):(?&#x3C;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">two</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">></span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">.</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">*</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">)</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">$</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">u</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">exec</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"foo:bar\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">one</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// foo</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">two</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// bar</span></span></code></pre>\n</div><p>字符串替换时，使用<code v-pre>$&lt;组名&gt;</code> 引用具名组。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">let</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> re</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\"> /(?&#x3C;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">year</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">></span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">\\d</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">{4}</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">)-(?&#x3C;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">month</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">></span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">\\d</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">{2}</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">)-(?&#x3C;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">day</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">></span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">\\d</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">{2}</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">)/</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">u</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"2015-01-02\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">replace</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">re</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"$&#x3C;day>/$&#x3C;month>/$&#x3C;year>\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// '02/01/2015'</span></span></code></pre>\n</div><p>上面代码中，<code v-pre>replace</code> 方法的第二个参数是一个字符串，而不是正则表达式。</p>\n<p><code v-pre>replace</code> 方法的第二个参数也可以是函数，该函数的参数序列如下。</p>\n<div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"2015-01-02\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">replace</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">  re</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  (</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">    matched</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 整个匹配结果 2015-01-02</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">    capture1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 第一个组匹配 2015</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">    capture2</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 第二个组匹配 01</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">    capture3</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 第三个组匹配 02</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">    position</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 匹配开始的位置 0</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\">    S</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 原字符串 2015-01-02</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">    groups</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 具名组构成的一个对象 {year, month, day}</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  ) </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">=></span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    let</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> { </span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">day</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">month</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">year</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> } </span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> args</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">[</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">args</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">length</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> -</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">];</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    return</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> `</span><span style=\"--shiki-light:#CA1243;--shiki-dark:#C678DD\">${</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">day</span><span style=\"--shiki-light:#CA1243;--shiki-dark:#C678DD\">}</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">/</span><span style=\"--shiki-light:#CA1243;--shiki-dark:#C678DD\">${</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">month</span><span style=\"--shiki-light:#CA1243;--shiki-dark:#C678DD\">}</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">/</span><span style=\"--shiki-light:#CA1243;--shiki-dark:#C678DD\">${</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">year</span><span style=\"--shiki-light:#CA1243;--shiki-dark:#C678DD\">}</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">`</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  },</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>具名组匹配在原来的基础上，新增了最后一个函数参数: 具名组构成的一个对象。函数内部可以直接对这个对象进行解构赋值。</p>\n<h3 id=\"引用\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#引用\"><span>引用</span></a></h3>\n<p>如果要在正则表达式内部引用某个“具名组匹配”，可以使用 <code v-pre>\\k&lt;组名&gt;</code> 的写法。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> RE_TWICE</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\"> /</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">^</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">(?&#x3C;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">word</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">></span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">[a-z]</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">+</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">)!</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">\\k&#x3C;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">word</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">>$</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\">RE_TWICE</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">test</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"abc!abc\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">); </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// true</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\">RE_TWICE</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">test</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"abc!ab\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">); </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// false</span></span></code></pre>\n</div><p>数字引用(<code v-pre>\\1</code>)依然有效。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> RE_TWICE</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\"> /</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">^</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">(?&#x3C;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">word</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">></span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">[a-z]</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">+</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">)!</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">\\1$</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\">RE_TWICE</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">test</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"abc!abc\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">); </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// true</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\">RE_TWICE</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">test</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"abc!ab\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">); </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// false</span></span></code></pre>\n</div><p>这两种引用语法还可以同时使用。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> RE_TWICE</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\"> /</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">^</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">(?&#x3C;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">word</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">></span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">[a-z]</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">+</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">)!</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">\\k&#x3C;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">word</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">></span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">!</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">\\1$</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\">RE_TWICE</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">test</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"abc!abc!abc\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">); </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// true</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\">RE_TWICE</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">test</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"abc!abc!ab\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">); </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// false</span></span></code></pre>\n</div><h2 id=\"string-prototype-matchall\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#string-prototype-matchall\"><span>String.prototype.matchAll</span></a></h2>\n<p>如果一个正则表达式在字符串里面有多个匹配，现在一般使用 <code v-pre>g</code> 修饰符或 <code v-pre>y</code> 修饰符，在循环里面逐一取出。</p>\n<div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">var</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> regex</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\"> /t(e)(st(</span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">\\d</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">?</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">))/</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">g</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">var</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> string</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"test1test2test3\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">var</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> matches</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> [];</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">var</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> match</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">while</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> ((</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">match</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\"> regex</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">exec</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">string</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">))) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">  matches</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">push</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">match</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">matches</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// [</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">//   [\"test1\", \"e\", \"st1\", \"1\", index: 0, input: \"test1test2test3\"],</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">//   [\"test2\", \"e\", \"st2\", \"2\", index: 5, input: \"test1test2test3\"],</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">//   [\"test3\", \"e\", \"st3\", \"3\", index: 10, input: \"test1test2test3\"]</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// ]</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>上面代码中，<code v-pre>while</code> 循环取出每一轮的正则匹配，一共三轮。</p>\n<p>目前有一个<a href=\"https://github.com/tc39/proposal-string-matchall\" target=\"_blank\" rel=\"noopener noreferrer\">提案</a>，增加了 <code v-pre>String.prototype.matchAll</code> 方法，可以一次性取出所有匹配。不过，它返回的是一个遍历器(Iterator)，而不是数组。</p>\n<div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> string</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"test1test2test3\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// g 修饰符加不加都可以</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> regex</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\"> /t(e)(st(</span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">\\d</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">?</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">))/</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">g</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">for</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> match</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> of</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\"> string</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">matchAll</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">regex</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">  console</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">log</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">match</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// [\"test1\", \"e\", \"st1\", \"1\", index: 0, input: \"test1test2test3\"]</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// [\"test2\", \"e\", \"st2\", \"2\", index: 5, input: \"test1test2test3\"]</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// [\"test3\", \"e\", \"st3\", \"3\", index: 10, input: \"test1test2test3\"]</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>上面代码中，由于 <code v-pre>string.matchAll(regex)</code> 返回的是遍历器，所以可以用 <code v-pre>for...of</code> 循环取出。相对于返回数组，返回遍历器的好处在于，如果匹配结果是一个很大的数组，那么遍历器比较节省资源。</p>\n<p>遍历器转为数组是非常简单的，使用 <code v-pre>...</code> 运算符和 <code v-pre>Array.from</code> 方法就可以了。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 转为数组方法一</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">[</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">...</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">string</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">matchAll</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">regex</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)];</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 转为数组方法二</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">Array</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">from</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">string</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">matchAll</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">regex</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">));</span></span></code></pre>\n</div></template>","contentStripped":"<h1 id=\"正则的扩展\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#正则的扩展\"><span>正则的扩展</span></a></h1>\n<h2 id=\"regexp-构造函数\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#regexp-构造函数\"><span><code v-pre>RegExp</code> 构造函数</span></a></h2>\n<p>在 ES5 中，<code v-pre>RegExp</code> 构造函数的参数有两种情况。</p>\n<p>第一种情况是，参数是字符串，这时第二个参数表示正则表达式的修饰符(flag)。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">var</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> regex</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> new</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> RegExp</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"xyz\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"i\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 等价于</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">var</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> regex</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\"> /xyz/</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">i</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span></code></pre>\n</div><p>第二种情况是，参数是一个正则表示式，这时会返回一个原有正则表达式的拷贝。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">var</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> regex</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> new</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> RegExp</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/xyz/</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">i</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 等价于</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">var</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> regex</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\"> /xyz/</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">i</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span></code></pre>\n</div><p>但是，ES5 不允许此时使用第二个参数添加修饰符，否则会报错。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">var</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> regex</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> new</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> RegExp</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/xyz/</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"i\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// Uncaught TypeError: Cannot supply flags when constructing one RegExp from another</span></span></code></pre>\n</div><p>ES6 改变了这种行为。如果 <code v-pre>RegExp</code> 构造函数第一个参数是一个正则对象，那么可以使用第二个参数指定修饰符。而且，返回的正则表达式会忽略原有的正则表达式的修饰符，只使用新指定的修饰符。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">new</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> RegExp</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/abc/</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">gi</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"i\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">).</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">flags</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// \"i\"</span></span></code></pre>\n</div><p>上面代码中，原有正则对象的修饰符是 <code v-pre>ig</code>，它会被第二个参数 <code v-pre>i</code> 覆盖。</p>\n<h2 id=\"字符串的正则方法\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#字符串的正则方法\"><span>字符串的正则方法</span></a></h2>\n<p>字符串对象共有 4 个方法，可以使用正则表达式: <code v-pre>match()</code>、<code v-pre>replace()</code>、<code v-pre>search()</code> 和 <code v-pre>split()</code>。</p>\n<p>ES6 将这 4 个方法，在语言内部全部调用 <code v-pre>RegExp</code> 的实例方法，从而做到所有与正则相关的方法，全都定义在 <code v-pre>RegExp</code> 对象上。</p>\n<ul>\n<li><code v-pre>String.prototype.match</code> 调用 <code v-pre>RegExp.prototype[Symbol.match]</code></li>\n<li><code v-pre>String.prototype.replace</code> 调用 <code v-pre>RegExp.prototype[Symbol.replace]</code></li>\n<li><code v-pre>String.prototype.search</code> 调用 <code v-pre>RegExp.prototype[Symbol.search]</code></li>\n<li><code v-pre>String.prototype.split</code> 调用 <code v-pre>RegExp.prototype[Symbol.split]</code></li>\n</ul>\n<h2 id=\"u-修饰符\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#u-修饰符\"><span>u 修饰符</span></a></h2>\n<p>ES6 对正则表达式添加了 <code v-pre>u</code> 修饰符，含义为“Unicode 模式”，用来正确处理大于 <code v-pre>\\uFFFF</code> 的 Unicode 字符。也就是说，会正确处理四个字节的 UTF-16 编码。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">^</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">\\uD83D</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">u</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">test</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">\\uD83D\\uDC2A</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// false</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">^</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">\\uD83D</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">test</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">\\uD83D\\uDC2A</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// true</span></span></code></pre>\n</div><p>上面代码中，<code v-pre>\\uD83D\\uDC2A</code> 是一个四个字节的 UTF-16 编码，代表一个字符。但是，ES5 不支持四个字节的 UTF-16 编码，会将其识别为两个字符，导致第二行代码结果为 <code v-pre>true</code>。加了 <code v-pre>u</code> 修饰符以后，ES6 就会识别其为一个字符，所以第一行代码结果为 <code v-pre>false</code>。</p>\n<p>一旦加上 <code v-pre>u</code> 修饰符号，就会修改下面这些正则表达式的行为。</p>\n<ol>\n<li>\n<p>点字符</p>\n<p>点(<code v-pre>.</code>)字符在正则表达式中，含义是除了换行符以外的任意单个字符。对于码点大于 <code v-pre>0xFFFF</code> 的 Unicode 字符，点字符不能识别，必须加上 <code v-pre>u</code> 修饰符。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">var</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> s</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> '𠮷'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">^</span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">.</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">$</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">test</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">s</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// false</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">^</span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">.</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">$</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">u</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">test</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">s</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// true</span></span></code></pre>\n</div><p>上面代码表示，如果不添加 <code v-pre>u</code> 修饰符，正则表达式就会认为字符串为两个字符，从而匹配失败。</p>\n</li>\n<li>\n<p>Unicode 字符表示法</p>\n<p>ES6 新增了使用大括号表示 Unicode 字符，这种表示法在正则表达式中必须加上 <code v-pre>u</code> 修饰符，才能识别当中的大括号，否则会被解读为量词。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">\\u</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">{61}</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">test</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"a\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">); </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// false</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/a/</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">u</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">test</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"a\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">); </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// true</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/𠮷/</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">u</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">test</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"𠮷\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">); </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// true</span></span></code></pre>\n</div><p>上面代码表示，如果不加 <code v-pre>u</code> 修饰符，正则表达式无法识别 <code v-pre>\\u{61}</code> 这种表示法，只会认为这匹配 61 个连续的 <code v-pre>u</code>。</p>\n</li>\n<li>\n<p>量词</p>\n<p>使用 <code v-pre>u</code> 修饰符后，所有量词都会正确识别码点大于 <code v-pre>0xFFFF</code> 的 Unicode 字符。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/a</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">{2}</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">test</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'aa'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// true</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/a</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">{2}</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">u</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">test</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'aa'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// true</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/𠮷</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">{2}</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">test</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'𠮷𠮷'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// false</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/𠮷</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">{2}</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">u</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">test</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'𠮷𠮷'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// true</span></span></code></pre>\n</div></li>\n<li>\n<p>预定义模式</p>\n<p><code v-pre>u</code> 修饰符也影响到预定义模式，能否正确识别码点大于 <code v-pre>0xFFFF</code> 的 Unicode 字符。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">^</span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">\\S</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">$</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">test</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'𠮷'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// false</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">^</span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">\\S</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">$</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">u</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">test</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'𠮷'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// true</span></span></code></pre>\n</div><p>上面代码的 <code v-pre>\\S</code> 是预定义模式，匹配所有非空白字符。只有加了 <code v-pre>u</code> 修饰符，它才能正确匹配码点大于 <code v-pre>0xFFFF</code> 的 Unicode 字符。</p>\n<p>利用这一点，可以写出一个正确返回字符串长度的函数。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">function</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> codePointLength</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">text</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  var</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> result</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\"> text</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">match</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">[</span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">\\s\\S</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">]</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">gu</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  return</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> result</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#C678DD\"> ?</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\"> result</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">length</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#C678DD\"> :</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">var</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> s</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"𠮷𠮷\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">s</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">length</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 4</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">codePointLength</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">s</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">); </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 2</span></span></code></pre>\n</div></li>\n<li>\n<p><code v-pre>i</code> 修饰符</p>\n<p>有些 Unicode 字符的编码不同，但是字型很相近，比如，<code v-pre>\\u004B</code> 与 <code v-pre>\\u212A</code> 都是大写的 <code v-pre>K</code>。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">[a-z]</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">i</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">test</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">\\u212A</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) </span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">/</span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"> // false</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  [</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">a</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> -</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> z</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">] </span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">/</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">  iu</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">test</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">\\u212A</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">); </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// true</span></span></code></pre>\n</div><p>上面代码中，不加 <code v-pre>u</code> 修饰符，就无法识别非规范的 <code v-pre>K</code> 字符。</p>\n</li>\n</ol>\n<h2 id=\"regexp-prototype-unicode-属性\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#regexp-prototype-unicode-属性\"><span>RegExp.prototype.unicode 属性</span></a></h2>\n<p>正则实例对象新增 <code v-pre>unicode</code> 属性，表示是否设置了 <code v-pre>u</code> 修饰符。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> r1</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\"> /hello/</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> r2</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\"> /hello/</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">u</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">r1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">unicode</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// false</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">r2</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">unicode</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// true</span></span></code></pre>\n</div><p>上面代码中，正则表达式是否设置了 <code v-pre>u</code> 修饰符，可以从 <code v-pre>unicode</code> 属性看出来。</p>\n<h2 id=\"y-修饰符\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#y-修饰符\"><span>y 修饰符</span></a></h2>\n<p>除了 <code v-pre>u</code> 修饰符，ES6 还为正则表达式添加了 <code v-pre>y</code> 修饰符，叫做“粘连”(sticky)修饰符。</p>\n<p><code v-pre>y</code> 修饰符的作用与 <code v-pre>g</code> 修饰符类似，也是全局匹配，后一次匹配都从上一次匹配成功的下一个位置开始。不同之处在于，<code v-pre>g</code> 修饰符只要剩余位置中存在匹配就可，而 <code v-pre>y</code> 修饰符确保匹配必须从剩余的第一个位置开始，这也就是“粘连”的涵义。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">var</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> s</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"aaa_aa_a\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">var</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> r1</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\"> /a</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">+</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">g</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">var</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> r2</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\"> /a</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">+</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">y</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">r1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">exec</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">s</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">); </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// [\"aaa\"]</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">r2</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">exec</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">s</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">); </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// [\"aaa\"]</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">r1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">exec</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">s</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">); </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// [\"aa\"]</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">r2</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">exec</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">s</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">); </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// null</span></span></code></pre>\n</div><p>上面代码有两个正则表达式，一个使用 <code v-pre>g</code> 修饰符，另一个使用 <code v-pre>y</code> 修饰符。这两个正则表达式各执行了两次，第一次执行的时候，两者行为相同，剩余字符串都是 <code v-pre>_aa_a</code>。由于 <code v-pre>g</code> 修饰没有位置要求，所以第二次执行会返回结果，而 <code v-pre>y</code> 修饰符要求匹配必须从头部开始，所以返回 <code v-pre>null</code>。</p>\n<p>如果改一下正则表达式，保证每次都能头部匹配，<code v-pre>y</code> 修饰符就会返回结果了。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">var</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> s</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"aaa_aa_a\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">var</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> r</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\"> /a</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">+</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">_/</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">y</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">r</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">exec</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">s</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">); </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// [\"aaa_\"]</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">r</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">exec</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">s</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">); </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// [\"aa_\"]</span></span></code></pre>\n</div><p>上面代码每次匹配，都是从剩余字符串的头部开始。</p>\n<p>使用 <code v-pre>lastIndex</code> 属性，可以更好地说明 <code v-pre>y</code> 修饰符。</p>\n<div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> REGEX</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\"> /a/</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">g</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 指定从2号位置(y)开始匹配</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\">REGEX</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">lastIndex</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 2</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 匹配成功</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> match</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> REGEX</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">exec</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"xaya\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 在3号位置匹配成功</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">match</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">index</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 3</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 下一次匹配从4号位开始</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\">REGEX</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">lastIndex</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 4</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 4号位开始匹配失败</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\">REGEX</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">exec</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"xaya\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">); </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// null</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>上面代码中，<code v-pre>lastIndex</code> 属性指定每次搜索的开始位置，<code v-pre>g</code> 修饰符从这个位置开始向后搜索，直到发现匹配为止。</p>\n<p><code v-pre>y</code> 修饰符同样遵守 <code v-pre>lastIndex</code> 属性，但是要求必须在 <code v-pre>lastIndex</code> 指定的位置发现匹配。</p>\n<div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> REGEX</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\"> /a/</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">y</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 指定从2号位置开始匹配</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\">REGEX</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">lastIndex</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 2</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 不是粘连，匹配失败</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\">REGEX</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">exec</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"xaya\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">); </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// null</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 指定从3号位置开始匹配</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\">REGEX</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">lastIndex</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 3</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 3号位置是粘连，匹配成功</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> match</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> REGEX</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">exec</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"xaya\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">match</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">index</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 3</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\">REGEX</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">lastIndex</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 4</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>实际上，<code v-pre>y</code> 修饰符号隐含了头部匹配的标志 <code v-pre>^</code>。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/b/</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">y</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">exec</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"aba\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// null</span></span></code></pre>\n</div><p>上面代码由于不能保证头部匹配，所以返回 <code v-pre>null</code>。<code v-pre>y</code> 修饰符的设计本意，就是让头部匹配的标志 <code v-pre>^</code> 在全局匹配中都有效。</p>\n<p>下面是字符串对象的 <code v-pre>replace</code> 方法的例子。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> REGEX</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\"> /a/</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">gy</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"aaxa\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">replace</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\">REGEX</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"-\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">); </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// '--xa'</span></span></code></pre>\n</div><p>上面代码中，最后一个 <code v-pre>a</code> 因为不是出现在下一次匹配的头部，所以不会被替换。</p>\n<p>单单一个 <code v-pre>y</code> 修饰符对 <code v-pre>match</code> 方法，只能返回第一个匹配，必须与 <code v-pre>g</code> 修饰符联用，才能返回所有匹配。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"a1a2a3\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">match</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/a</span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">\\d</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">y</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">); </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// [\"a1\"]</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"a1a2a3\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">match</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/a</span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">\\d</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">gy</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">); </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// [\"a1\", \"a2\", \"a3\"]</span></span></code></pre>\n</div><p><code v-pre>y</code> 修饰符的一个应用，是从字符串提取 token(词元)，<code v-pre>y</code> 修饰符确保了匹配之间不会有漏掉的字符。</p>\n<div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> TOKEN_Y</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\"> /</span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">\\s</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">*</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">(</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">\\+</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">|</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">[0-9]</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">+</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">)</span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">\\s</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">*</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">y</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> TOKEN_G</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\"> /</span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">\\s</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">*</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">(</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">\\+</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">|</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">[0-9]</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">+</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">)</span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">\\s</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">*</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">g</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">tokenize</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\">TOKEN_Y</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"3 + 4\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// [ '3', '+', '4' ]</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">tokenize</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\">TOKEN_G</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"3 + 4\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// [ '3', '+', '4' ]</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">function</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> tokenize</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">TOKEN_REGEX</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">str</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  let</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> result</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> [];</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  let</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> match</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  while</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> ((</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">match</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> TOKEN_REGEX</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">exec</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">str</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">))) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">    result</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">push</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">match</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">[</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">]);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  return</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> result</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>上面代码中，如果字符串里面没有非法字符，<code v-pre>y</code> 修饰符与 <code v-pre>g</code> 修饰符的提取结果是一样的。但是，一旦出现非法字符，两者的行为就不一样了。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">tokenize</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\">TOKEN_Y</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"3x + 4\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// [ '3' ]</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">tokenize</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\">TOKEN_G</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"3x + 4\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// [ '3', '+', '4' ]</span></span></code></pre>\n</div><p>上面代码中，<code v-pre>g</code> 修饰符会忽略非法字符，而 <code v-pre>y</code> 修饰符不会，这样就很容易发现错误。</p>\n<h2 id=\"regexp-prototype-sticky-属性\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#regexp-prototype-sticky-属性\"><span>RegExp.prototype.sticky 属性</span></a></h2>\n<p>与 <code v-pre>y</code> 修饰符相匹配，ES6 的正则实例对象多了 <code v-pre>sticky</code> 属性，表示是否设置了 <code v-pre>y</code> 修饰符。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">var</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> r</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\"> /hello</span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">\\d</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">y</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">r</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">sticky</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// true</span></span></code></pre>\n</div><h2 id=\"regexp-prototype-flags-属性\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#regexp-prototype-flags-属性\"><span>RegExp.prototype.flags 属性</span></a></h2>\n<p>ES6 为正则表达式新增了 <code v-pre>flags</code> 属性，会返回正则表达式的修饰符。</p>\n<div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// ES5 的 source 属性</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 返回正则表达式的正文</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/abc/</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">gi</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">source</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> /</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">  // \"abc\"</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">  // ES6 的 flags 属性</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">  // 返回正则表达式的修饰符</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">  abc</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> /</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">  ig</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">flags</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 'gi'</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2 id=\"s-修饰符-dotall-模式\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#s-修饰符-dotall-模式\"><span>s 修饰符: dotAll 模式</span></a></h2>\n<p>正则表达式中，点(<code v-pre>.</code>)是一个特殊字符，代表任意的单个字符，但是有两个例外。一个是四个字节的 UTF-16 字符，这个可以用 <code v-pre>u</code> 修饰符解决；另一个是行终止符(line terminator character)。</p>\n<p>所谓行终止符，就是该字符表示一行的终结。以下四个字符属于”行终止符“。</p>\n<ul>\n<li>U+000A 换行符(<code v-pre>\\n</code>)</li>\n<li>U+000D 回车符(<code v-pre>\\r</code>)</li>\n<li>U+2028 行分隔符(line separator)</li>\n<li>U+2029 段分隔符(paragraph separator)</li>\n</ul>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/foo</span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">.</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">bar/</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">test</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"foo</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">\\n</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">bar\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// false</span></span></code></pre>\n</div><p>上面代码中，因为 <code v-pre>.</code> 不匹配 <code v-pre>\\n</code>，所以正则表达式返回 <code v-pre>false</code>。</p>\n<p>但是，很多时候我们希望匹配的是任意单个字符，这时有一种变通的写法。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/foo</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">[</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">^</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">]</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">bar/</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">test</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"foo</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">\\n</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">bar\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// true</span></span></code></pre>\n</div><p>这种解决方案毕竟不太符合直觉，ES2018 <a href=\"https://github.com/tc39/proposal-regexp-dotall-flag\" target=\"_blank\" rel=\"noopener noreferrer\">引入</a><code v-pre>s</code> 修饰符，使得 <code v-pre>.</code> 可以匹配任意单个字符。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/foo</span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">.</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">bar/</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">s</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">test</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"foo</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">\\n</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">bar\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">); </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// true</span></span></code></pre>\n</div><p>这被称为 <code v-pre>dotAll</code> 模式，即点(dot)代表一切字符。所以，正则表达式还引入了一个 <code v-pre>dotAll</code> 属性，返回一个布尔值，表示该正则表达式是否处在 <code v-pre>dotAll</code> 模式。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> re</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\"> /foo</span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">.</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">bar/</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">s</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 另一种写法</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// const re = new RegExp('foo.bar', 's');</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">re</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">test</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"foo</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">\\n</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">bar\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">); </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// true</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">re</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">dotAll</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// true</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">re</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">flags</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 's'</span></span></code></pre>\n</div><p><code v-pre>/s</code> 修饰符和多行修饰符<code v-pre>/m</code> 不冲突，两者一起使用的情况下，<code v-pre>.</code> 匹配所有字符，而 <code v-pre>^</code> 和<code v-pre>$</code>匹配每一行的行首和行尾。</p>\n<h2 id=\"后行断言\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#后行断言\"><span>后行断言</span></a></h2>\n<p>JavaScript 语言的正则表达式，只支持先行断言(lookahead)和先行否定断言(negative lookahead)，不支持后行断言(lookbehind)和后行否定断言(negative lookbehind)。ES2018 引入<a href=\"https://github.com/tc39/proposal-regexp-lookbehind\" target=\"_blank\" rel=\"noopener noreferrer\">后行断言</a>，V8 引擎 4.9 版(Chrome 62)已经支持。</p>\n<p>”先行断言“指的是，<code v-pre>x</code> 只有在 <code v-pre>y</code> 前面才匹配，必须写成<code v-pre>/x(?=y)/</code>。比如，只匹配百分号之前的数字，要写成<code v-pre>/\\d+(?=%)/</code>。”先行否定断言“指的是，<code v-pre>x</code> 只有不在 <code v-pre>y</code> 前面才匹配，必须写成<code v-pre>/x(?!y)/</code>。比如，只匹配不在百分号之前的数字，要写成<code v-pre>/\\d+(?!%)/</code>。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">\\d</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">+</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">(?=%)/</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">exec</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'100% of US presidents have been male'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)  </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// [\"100\"]</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">\\d</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">+</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">(?!%)/</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">exec</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'that’s all 44 of them'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)                 </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// [\"44\"]</span></span></code></pre>\n</div><p>上面两个字符串，如果互换正则表达式，就不会得到相同结果。另外，还可以看到，”先行断言“括号之中的部分(<code v-pre>(?=%)</code>)，是不计入返回结果的。</p>\n<p>“后行断言”正好与“先行断言”相反，<code v-pre>x</code> 只有在 <code v-pre>y</code> 后面才匹配，必须写成<code v-pre>/(?&lt;=y)x/</code>。比如，只匹配美元符号之后的数字，要写成<code v-pre>/(?&lt;=\\$)\\d+/</code>。”后行否定断言“则与”先行否定断言“相反，<code v-pre>x</code> 只有不在 <code v-pre>y</code> 后面才匹配，必须写成<code v-pre>/(?&lt;!y)x/</code>。比如，只匹配不在美元符号后面的数字，要写成<code v-pre>/(?&lt;!\\$)\\d+/</code>。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/(?&#x3C;=</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">\\$</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">)</span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">\\d</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">+</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">exec</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'Benjamin Franklin is on the $100 bill'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)  </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// [\"100\"]</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/(?&#x3C;!</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">\\$</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">)</span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">\\d</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">+</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">exec</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'it’s is worth about €90'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)                </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// [\"90\"]</span></span></code></pre>\n</div><p>上面的例子中，“后行断言”的括号之中的部分(<code v-pre>(?&lt;=\\$)</code>)，也是不计入返回结果。</p>\n<p>下面的例子是使用后行断言进行字符串替换。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> RE_DOLLAR_PREFIX</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\"> /(?&#x3C;=</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">\\$</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">)foo/</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">g</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"$foo %foo foo\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">replace</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\">RE_DOLLAR_PREFIX</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"bar\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// '$bar %foo foo'</span></span></code></pre>\n</div><p>上面代码中，只有在美元符号后面的 <code v-pre>foo</code> 才会被替换。</p>\n<p>“后行断言”的实现，需要先匹配<code v-pre>/(?&lt;=y)x/</code>的 <code v-pre>x</code>，然后再回到左边，匹配 <code v-pre>y</code> 的部分。这种“先右后左”的执行顺序，与所有其他正则操作相反，导致了一些不符合预期的行为。</p>\n<p>首先，后行断言的组匹配，与正常情况下结果是不一样的。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/(?&#x3C;=(</span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">\\d</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">+</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">)(</span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">\\d</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">+</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">))</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">$</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">exec</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'1053'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// [\"\", \"1\", \"053\"]</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">^</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">(</span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">\\d</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">+</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">)(</span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">\\d</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">+</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">)</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">$</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">exec</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'1053'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// [\"1053\", \"105\", \"3\"]</span></span></code></pre>\n</div><p>上面代码中，需要捕捉两个组匹配。没有“后行断言”时，第一个括号是贪婪模式，第二个括号只能捕获一个字符，所以结果是 <code v-pre>105</code> 和 <code v-pre>3</code>。而“后行断言”时，由于执行顺序是从右到左，第二个括号是贪婪模式，第一个括号只能捕获一个字符，所以结果是 <code v-pre>1</code> 和 <code v-pre>053</code>。</p>\n<p>其次，“后行断言”的反斜杠引用，也与通常的顺序相反，必须放在对应的那个括号之前。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/(?&#x3C;=(o)d</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">\\1</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">)r/</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">exec</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'hodor'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)  </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// null</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/(?&#x3C;=</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">\\1</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">d(o))r/</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">exec</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'hodor'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)  </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// [\"r\", \"o\"]</span></span></code></pre>\n</div><p>上面代码中，如果后行断言的反斜杠引用(<code v-pre>\\1</code>)放在括号的后面，就不会得到匹配结果，必须放在前面才可以。因为后行断言是先从左到右扫描，发现匹配以后再回过头，从右到左完成反斜杠引用。</p>\n<h2 id=\"unicode-属性类\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#unicode-属性类\"><span>Unicode 属性类</span></a></h2>\n<p>ES2018 <a href=\"https://github.com/tc39/proposal-regexp-unicode-property-escapes\" target=\"_blank\" rel=\"noopener noreferrer\">引入</a>了一种新的类的写法 <code v-pre>\\p{...}</code> 和 <code v-pre>\\P{...}</code>，允许正则表达式匹配符合 Unicode 某种属性的所有字符。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> regexGreekSymbol</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\"> /</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">\\p</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">{Script=Greek}/</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">u</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">regexGreekSymbol</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">test</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"π\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">); </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// true</span></span></code></pre>\n</div><p>上面代码中，<code v-pre>\\p{Script=Greek}</code> 指定匹配一个希腊文字母，所以匹配<code v-pre>π</code>成功。</p>\n<p>Unicode 属性类要指定属性名和属性值。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">\\</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">p</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">{</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">UnicodePropertyName</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">UnicodePropertyValue</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n</div><p>对于某些属性，可以只写属性名，或者只写属性值。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">\\</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">p</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">{</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">UnicodePropertyName</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">\\</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">p</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">{</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">UnicodePropertyValue</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n</div><p><code v-pre>\\P{…}</code> 是 <code v-pre>\\p{…}</code> 的反向匹配，即匹配不满足条件的字符。</p>\n<p>注意，这两种类只对 Unicode 有效，所以使用的时候一定要加上 <code v-pre>u</code> 修饰符。如果不加 <code v-pre>u</code> 修饰符，正则表达式使用 <code v-pre>\\p</code> 和 <code v-pre>\\P</code> 会报错，ECMAScript 预留了这两个类。</p>\n<p>由于 Unicode 的各种属性非常多，所以这种新的类的表达能力非常强。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> regex</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\"> /</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">^</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">\\p</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">{Decimal_Number}</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">+</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">$</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">u</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">regex</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">test</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"𝟏𝟐𝟑𝟜𝟝𝟞𝟩𝟪𝟫𝟬𝟭𝟮𝟯𝟺𝟻𝟼\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">); </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// true</span></span></code></pre>\n</div><p>上面代码中，属性类指定匹配所有十进制字符，可以看到各种字型的十进制字符都会匹配成功。</p>\n<p><code v-pre>\\p{Number}</code> 甚至能匹配罗马数字。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 匹配所有数字</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> regex</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\"> /</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">^</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">\\p</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">{Number}</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">+</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">$</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">u</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">regex</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">test</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"²³¹¼½¾\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">); </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// true</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">regex</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">test</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"㉛㉜㉝\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">); </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// true</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">regex</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">test</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"ⅠⅡⅢⅣⅤⅥⅦⅧⅨⅩⅪⅫ\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">); </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// true</span></span></code></pre>\n</div><p>下面是其他一些例子。</p>\n<div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 匹配所有空格</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">\\</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">p</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">{</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">White_Space</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 匹配各种文字的所有字母，等同于 Unicode 版的 \\w</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">[\\</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">p</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">{</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">Alphabetic</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}\\</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">p</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">{</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">Mark</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}\\</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">p</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">{</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">Decimal_Number</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}\\</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">p</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">{</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">Connector_Punctuation</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}\\</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">p</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">{</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">Join_Control</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}]</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 匹配各种文字的所有非字母的字符，等同于 Unicode 版的 \\W</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">[</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">^</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">\\</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">p</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">{</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">Alphabetic</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}\\</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">p</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">{</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">Mark</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}\\</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">p</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">{</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">Decimal_Number</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}\\</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">p</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">{</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">Connector_Punctuation</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}\\</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">p</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">{</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">Join_Control</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}]</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 匹配 Emoji</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">\\p</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">{Emoji_Modifier_Base}</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">\\p</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">{Emoji_Modifier}</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">?</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">|</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">\\p</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">{Emoji_Presentation}</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">|</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">\\p</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">{Emoji}</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">\\uFE0F</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">gu</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 匹配所有的箭头字符</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> regexArrows</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\"> /</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">^</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">\\p</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">{Block=Arrows}</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">+</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">$</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">u</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">regexArrows</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">test</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'←↑→↓↔↕↖↗↘↙⇏⇐⇑⇒⇓⇔⇕⇖⇗⇘⇙⇧⇩'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// true</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2 id=\"具名组匹配\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#具名组匹配\"><span>具名组匹配</span></a></h2>\n<h3 id=\"简介\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#简介\"><span>简介</span></a></h3>\n<p>正则表达式使用圆括号进行组匹配。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> RE_DATE</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\"> /(</span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">\\d</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">{4}</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">)-(</span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">\\d</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">{2}</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">)-(</span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">\\d</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">{2}</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">)/</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span></code></pre>\n</div><p>上面代码中，正则表达式里面有三组圆括号。使用 <code v-pre>exec</code> 方法，就可以将这三组匹配结果提取出来。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> RE_DATE</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\"> /(</span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">\\d</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">{4}</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">)-(</span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">\\d</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">{2}</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">)-(</span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">\\d</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">{2}</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">)/</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> matchObj</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> RE_DATE</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">exec</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"1999-12-31\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> year</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> matchObj</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">[</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">]; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 1999</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> month</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> matchObj</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">[</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">2</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">]; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 12</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> day</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> matchObj</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">[</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">3</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">]; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 31</span></span></code></pre>\n</div><p>组匹配的一个问题是，每一组的匹配含义不容易看出来，而且只能用数字序号(比如 <code v-pre>matchObj[1]</code>)引用，要是组的顺序变了，引用的时候就必须修改序号。</p>\n<p>ES2018 引入了<a href=\"https://github.com/tc39/proposal-regexp-named-groups\" target=\"_blank\" rel=\"noopener noreferrer\">具名组匹配</a>(Named Capture Groups)，允许为每一个组匹配指定一个名字，既便于阅读代码，又便于引用。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> RE_DATE</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\"> /(?&#x3C;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">year</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">></span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">\\d</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">{4}</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">)-(?&#x3C;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">month</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">></span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">\\d</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">{2}</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">)-(?&#x3C;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">day</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">></span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">\\d</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">{2}</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">)/</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> matchObj</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> RE_DATE</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">exec</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"1999-12-31\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> year</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\"> matchObj</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">groups</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">year</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 1999</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> month</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\"> matchObj</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">groups</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">month</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 12</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> day</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\"> matchObj</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">groups</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">day</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 31</span></span></code></pre>\n</div><p>上面代码中，“具名组匹配”在圆括号内部，模式的头部添加“问号 + 尖括号 + 组名”(<code v-pre>?&lt;year&gt;</code>)，然后就可以在 <code v-pre>exec</code> 方法返回结果的 <code v-pre>groups</code> 属性上引用该组名。同时，数字序号(<code v-pre>matchObj[1]</code>)依然有效。</p>\n<p>具名组匹配等于为每一组匹配加上了 ID，便于描述匹配的目的。如果组的顺序变了，也不用改变匹配后的处理代码。</p>\n<p>如果具名组没有匹配，那么对应的 <code v-pre>groups</code> 对象属性会是 <code v-pre>undefined</code>。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> RE_OPT_A</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\"> /</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">^</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">(?&#x3C;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">as</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">>a</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">+</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">)</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">?</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">$</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> matchObj</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> RE_OPT_A</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">exec</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">matchObj</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">groups</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">as</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// undefined</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"as\"</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> in</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\"> matchObj</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">groups</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// true</span></span></code></pre>\n</div><p>上面代码中，具名组 <code v-pre>as</code> 没有找到匹配，那么 <code v-pre>matchObj.groups.as</code> 属性值就是 <code v-pre>undefined</code>，并且 <code v-pre>as</code> 这个键名在 <code v-pre>groups</code> 是始终存在的。</p>\n<h3 id=\"解构赋值和替换\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#解构赋值和替换\"><span>解构赋值和替换</span></a></h3>\n<p>有了具名组匹配以后，可以使用解构赋值直接从匹配结果上为变量赋值。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">let</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  groups</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: { </span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">one</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">two</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> },</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">} </span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\"> /</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">^</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">(?&#x3C;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">one</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">></span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">.</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">*</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">):(?&#x3C;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">two</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">></span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">.</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">*</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">)</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">$</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">u</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">exec</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"foo:bar\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">one</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// foo</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">two</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// bar</span></span></code></pre>\n</div><p>字符串替换时，使用<code v-pre>$&lt;组名&gt;</code> 引用具名组。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">let</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> re</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\"> /(?&#x3C;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">year</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">></span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">\\d</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">{4}</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">)-(?&#x3C;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">month</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">></span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">\\d</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">{2}</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">)-(?&#x3C;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">day</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">></span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">\\d</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">{2}</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">)/</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">u</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"2015-01-02\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">replace</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">re</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"$&#x3C;day>/$&#x3C;month>/$&#x3C;year>\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// '02/01/2015'</span></span></code></pre>\n</div><p>上面代码中，<code v-pre>replace</code> 方法的第二个参数是一个字符串，而不是正则表达式。</p>\n<p><code v-pre>replace</code> 方法的第二个参数也可以是函数，该函数的参数序列如下。</p>\n<div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"2015-01-02\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">replace</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">  re</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  (</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">    matched</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 整个匹配结果 2015-01-02</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">    capture1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 第一个组匹配 2015</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">    capture2</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 第二个组匹配 01</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">    capture3</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 第三个组匹配 02</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">    position</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 匹配开始的位置 0</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\">    S</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 原字符串 2015-01-02</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">    groups</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 具名组构成的一个对象 {year, month, day}</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  ) </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">=></span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    let</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> { </span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">day</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">month</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">year</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> } </span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> args</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">[</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">args</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">length</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> -</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">];</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    return</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> `</span><span style=\"--shiki-light:#CA1243;--shiki-dark:#C678DD\">${</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">day</span><span style=\"--shiki-light:#CA1243;--shiki-dark:#C678DD\">}</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">/</span><span style=\"--shiki-light:#CA1243;--shiki-dark:#C678DD\">${</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">month</span><span style=\"--shiki-light:#CA1243;--shiki-dark:#C678DD\">}</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">/</span><span style=\"--shiki-light:#CA1243;--shiki-dark:#C678DD\">${</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">year</span><span style=\"--shiki-light:#CA1243;--shiki-dark:#C678DD\">}</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">`</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  },</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>具名组匹配在原来的基础上，新增了最后一个函数参数: 具名组构成的一个对象。函数内部可以直接对这个对象进行解构赋值。</p>\n<h3 id=\"引用\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#引用\"><span>引用</span></a></h3>\n<p>如果要在正则表达式内部引用某个“具名组匹配”，可以使用 <code v-pre>\\k&lt;组名&gt;</code> 的写法。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> RE_TWICE</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\"> /</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">^</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">(?&#x3C;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">word</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">></span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">[a-z]</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">+</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">)!</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">\\k&#x3C;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">word</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">>$</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\">RE_TWICE</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">test</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"abc!abc\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">); </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// true</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\">RE_TWICE</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">test</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"abc!ab\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">); </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// false</span></span></code></pre>\n</div><p>数字引用(<code v-pre>\\1</code>)依然有效。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> RE_TWICE</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\"> /</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">^</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">(?&#x3C;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">word</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">></span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">[a-z]</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">+</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">)!</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">\\1$</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\">RE_TWICE</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">test</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"abc!abc\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">); </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// true</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\">RE_TWICE</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">test</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"abc!ab\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">); </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// false</span></span></code></pre>\n</div><p>这两种引用语法还可以同时使用。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> RE_TWICE</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\"> /</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">^</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">(?&#x3C;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">word</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">></span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">[a-z]</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">+</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">)!</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">\\k&#x3C;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">word</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">></span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">!</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">\\1$</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">/</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\">RE_TWICE</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">test</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"abc!abc!abc\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">); </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// true</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\">RE_TWICE</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">test</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"abc!abc!ab\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">); </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// false</span></span></code></pre>\n</div><h2 id=\"string-prototype-matchall\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#string-prototype-matchall\"><span>String.prototype.matchAll</span></a></h2>\n<p>如果一个正则表达式在字符串里面有多个匹配，现在一般使用 <code v-pre>g</code> 修饰符或 <code v-pre>y</code> 修饰符，在循环里面逐一取出。</p>\n<div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">var</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> regex</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\"> /t(e)(st(</span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">\\d</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">?</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">))/</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">g</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">var</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> string</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"test1test2test3\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">var</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> matches</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> [];</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">var</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> match</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">while</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> ((</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">match</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\"> regex</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">exec</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">string</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">))) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">  matches</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">push</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">match</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">matches</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// [</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">//   [\"test1\", \"e\", \"st1\", \"1\", index: 0, input: \"test1test2test3\"],</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">//   [\"test2\", \"e\", \"st2\", \"2\", index: 5, input: \"test1test2test3\"],</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">//   [\"test3\", \"e\", \"st3\", \"3\", index: 10, input: \"test1test2test3\"]</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// ]</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>上面代码中，<code v-pre>while</code> 循环取出每一轮的正则匹配，一共三轮。</p>\n<p>目前有一个<a href=\"https://github.com/tc39/proposal-string-matchall\" target=\"_blank\" rel=\"noopener noreferrer\">提案</a>，增加了 <code v-pre>String.prototype.matchAll</code> 方法，可以一次性取出所有匹配。不过，它返回的是一个遍历器(Iterator)，而不是数组。</p>\n<div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> string</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"test1test2test3\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// g 修饰符加不加都可以</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> regex</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\"> /t(e)(st(</span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">\\d</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">?</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">))/</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">g</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">for</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> match</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> of</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\"> string</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">matchAll</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">regex</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">  console</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">log</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">match</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// [\"test1\", \"e\", \"st1\", \"1\", index: 0, input: \"test1test2test3\"]</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// [\"test2\", \"e\", \"st2\", \"2\", index: 5, input: \"test1test2test3\"]</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// [\"test3\", \"e\", \"st3\", \"3\", index: 10, input: \"test1test2test3\"]</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>上面代码中，由于 <code v-pre>string.matchAll(regex)</code> 返回的是遍历器，所以可以用 <code v-pre>for...of</code> 循环取出。相对于返回数组，返回遍历器的好处在于，如果匹配结果是一个很大的数组，那么遍历器比较节省资源。</p>\n<p>遍历器转为数组是非常简单的，使用 <code v-pre>...</code> 运算符和 <code v-pre>Array.from</code> 方法就可以了。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 转为数组方法一</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">[</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">...</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">string</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">matchAll</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">regex</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)];</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 转为数组方法二</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">Array</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">from</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">string</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">matchAll</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">regex</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">));</span></span></code></pre>\n</div>","tagOpen":"<template>","tagClose":"</template>"},"script":null,"scriptSetup":null,"scripts":[],"styles":[],"customBlocks":[]},"content":"\n# 正则的扩展\n\n## `RegExp` 构造函数\n\n在 ES5 中，`RegExp` 构造函数的参数有两种情况。\n\n第一种情况是，参数是字符串，这时第二个参数表示正则表达式的修饰符(flag)。\n\n```js\nvar regex = new RegExp(\"xyz\", \"i\");\n// 等价于\nvar regex = /xyz/i;\n```\n\n第二种情况是，参数是一个正则表示式，这时会返回一个原有正则表达式的拷贝。\n\n```js\nvar regex = new RegExp(/xyz/i);\n// 等价于\nvar regex = /xyz/i;\n```\n\n但是，ES5 不允许此时使用第二个参数添加修饰符，否则会报错。\n\n```js\nvar regex = new RegExp(/xyz/, \"i\");\n// Uncaught TypeError: Cannot supply flags when constructing one RegExp from another\n```\n\nES6 改变了这种行为。如果 `RegExp` 构造函数第一个参数是一个正则对象，那么可以使用第二个参数指定修饰符。而且，返回的正则表达式会忽略原有的正则表达式的修饰符，只使用新指定的修饰符。\n\n```js\nnew RegExp(/abc/gi, \"i\").flags;\n// \"i\"\n```\n\n上面代码中，原有正则对象的修饰符是 `ig`，它会被第二个参数 `i` 覆盖。\n\n## 字符串的正则方法\n\n字符串对象共有 4 个方法，可以使用正则表达式: `match()`、`replace()`、`search()` 和 `split()`。\n\nES6 将这 4 个方法，在语言内部全部调用 `RegExp` 的实例方法，从而做到所有与正则相关的方法，全都定义在 `RegExp` 对象上。\n\n- `String.prototype.match` 调用 `RegExp.prototype[Symbol.match]`\n- `String.prototype.replace` 调用 `RegExp.prototype[Symbol.replace]`\n- `String.prototype.search` 调用 `RegExp.prototype[Symbol.search]`\n- `String.prototype.split` 调用 `RegExp.prototype[Symbol.split]`\n\n## u 修饰符\n\nES6 对正则表达式添加了 `u` 修饰符，含义为“Unicode 模式”，用来正确处理大于 `\\uFFFF` 的 Unicode 字符。也就是说，会正确处理四个字节的 UTF-16 编码。\n\n```js\n/^\\uD83D/u.test('\\uD83D\\uDC2A') // false\n/^\\uD83D/.test('\\uD83D\\uDC2A') // true\n```\n\n上面代码中，`\\uD83D\\uDC2A` 是一个四个字节的 UTF-16 编码，代表一个字符。但是，ES5 不支持四个字节的 UTF-16 编码，会将其识别为两个字符，导致第二行代码结果为 `true`。加了 `u` 修饰符以后，ES6 就会识别其为一个字符，所以第一行代码结果为 `false`。\n\n一旦加上 `u` 修饰符号，就会修改下面这些正则表达式的行为。\n\n1. 点字符\n\n   点(`.`)字符在正则表达式中，含义是除了换行符以外的任意单个字符。对于码点大于 `0xFFFF` 的 Unicode 字符，点字符不能识别，必须加上 `u` 修饰符。\n\n   ```js\n   var s = '𠮷';\n\n   /^.$/.test(s) // false\n   /^.$/u.test(s) // true\n   ```\n\n   上面代码表示，如果不添加 `u` 修饰符，正则表达式就会认为字符串为两个字符，从而匹配失败。\n\n1. Unicode 字符表示法\n\n   ES6 新增了使用大括号表示 Unicode 字符，这种表示法在正则表达式中必须加上 `u` 修饰符，才能识别当中的大括号，否则会被解读为量词。\n\n   ```js\n   /\\u{61}/.test(\"a\"); // false\n   /a/u.test(\"a\"); // true\n   /𠮷/u.test(\"𠮷\"); // true\n   ```\n\n   上面代码表示，如果不加 `u` 修饰符，正则表达式无法识别 `\\u{61}` 这种表示法，只会认为这匹配 61 个连续的 `u`。\n\n1. 量词\n\n   使用 `u` 修饰符后，所有量词都会正确识别码点大于 `0xFFFF` 的 Unicode 字符。\n\n   ```js\n   /a{2}/.test('aa') // true\n   /a{2}/u.test('aa') // true\n   /𠮷{2}/.test('𠮷𠮷') // false\n   /𠮷{2}/u.test('𠮷𠮷') // true\n   ```\n\n1. 预定义模式\n\n   `u` 修饰符也影响到预定义模式，能否正确识别码点大于 `0xFFFF` 的 Unicode 字符。\n\n   ```js\n   /^\\S$/.test('𠮷') // false\n   /^\\S$/u.test('𠮷') // true\n   ```\n\n   上面代码的 `\\S` 是预定义模式，匹配所有非空白字符。只有加了 `u` 修饰符，它才能正确匹配码点大于 `0xFFFF` 的 Unicode 字符。\n\n   利用这一点，可以写出一个正确返回字符串长度的函数。\n\n   ```js\n   function codePointLength(text) {\n     var result = text.match(/[\\s\\S]/gu);\n     return result ? result.length : 0;\n   }\n\n   var s = \"𠮷𠮷\";\n\n   s.length; // 4\n   codePointLength(s); // 2\n   ```\n\n1. `i` 修饰符\n\n   有些 Unicode 字符的编码不同，但是字型很相近，比如，`\\u004B` 与 `\\u212A` 都是大写的 `K`。\n\n   ```js\n   /[a-z]/i.test(\"\\u212A\") / // false\n     [a - z] /\n     iu.test(\"\\u212A\"); // true\n   ```\n\n   上面代码中，不加 `u` 修饰符，就无法识别非规范的 `K` 字符。\n\n## RegExp.prototype.unicode 属性\n\n正则实例对象新增 `unicode` 属性，表示是否设置了 `u` 修饰符。\n\n```js\nconst r1 = /hello/;\nconst r2 = /hello/u;\n\nr1.unicode; // false\nr2.unicode; // true\n```\n\n上面代码中，正则表达式是否设置了 `u` 修饰符，可以从 `unicode` 属性看出来。\n\n## y 修饰符\n\n除了 `u` 修饰符，ES6 还为正则表达式添加了 `y` 修饰符，叫做“粘连”(sticky)修饰符。\n\n`y` 修饰符的作用与 `g` 修饰符类似，也是全局匹配，后一次匹配都从上一次匹配成功的下一个位置开始。不同之处在于，`g` 修饰符只要剩余位置中存在匹配就可，而 `y` 修饰符确保匹配必须从剩余的第一个位置开始，这也就是“粘连”的涵义。\n\n```js\nvar s = \"aaa_aa_a\";\nvar r1 = /a+/g;\nvar r2 = /a+/y;\n\nr1.exec(s); // [\"aaa\"]\nr2.exec(s); // [\"aaa\"]\n\nr1.exec(s); // [\"aa\"]\nr2.exec(s); // null\n```\n\n上面代码有两个正则表达式，一个使用 `g` 修饰符，另一个使用 `y` 修饰符。这两个正则表达式各执行了两次，第一次执行的时候，两者行为相同，剩余字符串都是 `_aa_a`。由于 `g` 修饰没有位置要求，所以第二次执行会返回结果，而 `y` 修饰符要求匹配必须从头部开始，所以返回 `null`。\n\n如果改一下正则表达式，保证每次都能头部匹配，`y` 修饰符就会返回结果了。\n\n```js\nvar s = \"aaa_aa_a\";\nvar r = /a+_/y;\n\nr.exec(s); // [\"aaa_\"]\nr.exec(s); // [\"aa_\"]\n```\n\n上面代码每次匹配，都是从剩余字符串的头部开始。\n\n使用 `lastIndex` 属性，可以更好地说明 `y` 修饰符。\n\n```js\nconst REGEX = /a/g;\n\n// 指定从2号位置(y)开始匹配\nREGEX.lastIndex = 2;\n\n// 匹配成功\nconst match = REGEX.exec(\"xaya\");\n\n// 在3号位置匹配成功\nmatch.index; // 3\n\n// 下一次匹配从4号位开始\nREGEX.lastIndex; // 4\n\n// 4号位开始匹配失败\nREGEX.exec(\"xaya\"); // null\n```\n\n上面代码中，`lastIndex` 属性指定每次搜索的开始位置，`g` 修饰符从这个位置开始向后搜索，直到发现匹配为止。\n\n`y` 修饰符同样遵守 `lastIndex` 属性，但是要求必须在 `lastIndex` 指定的位置发现匹配。\n\n```js\nconst REGEX = /a/y;\n\n// 指定从2号位置开始匹配\nREGEX.lastIndex = 2;\n\n// 不是粘连，匹配失败\nREGEX.exec(\"xaya\"); // null\n\n// 指定从3号位置开始匹配\nREGEX.lastIndex = 3;\n\n// 3号位置是粘连，匹配成功\nconst match = REGEX.exec(\"xaya\");\nmatch.index; // 3\nREGEX.lastIndex; // 4\n```\n\n实际上，`y` 修饰符号隐含了头部匹配的标志 `^`。\n\n```js\n/b/y.exec(\"aba\");\n// null\n```\n\n上面代码由于不能保证头部匹配，所以返回 `null`。`y` 修饰符的设计本意，就是让头部匹配的标志 `^` 在全局匹配中都有效。\n\n下面是字符串对象的 `replace` 方法的例子。\n\n```js\nconst REGEX = /a/gy;\n\"aaxa\".replace(REGEX, \"-\"); // '--xa'\n```\n\n上面代码中，最后一个 `a` 因为不是出现在下一次匹配的头部，所以不会被替换。\n\n单单一个 `y` 修饰符对 `match` 方法，只能返回第一个匹配，必须与 `g` 修饰符联用，才能返回所有匹配。\n\n```js\n\"a1a2a3\".match(/a\\d/y); // [\"a1\"]\n\"a1a2a3\".match(/a\\d/gy); // [\"a1\", \"a2\", \"a3\"]\n```\n\n`y` 修饰符的一个应用，是从字符串提取 token(词元)，`y` 修饰符确保了匹配之间不会有漏掉的字符。\n\n```js\nconst TOKEN_Y = /\\s*(\\+|[0-9]+)\\s*/y;\nconst TOKEN_G = /\\s*(\\+|[0-9]+)\\s*/g;\n\ntokenize(TOKEN_Y, \"3 + 4\");\n// [ '3', '+', '4' ]\ntokenize(TOKEN_G, \"3 + 4\");\n// [ '3', '+', '4' ]\n\nfunction tokenize(TOKEN_REGEX, str) {\n  let result = [];\n  let match;\n  while ((match = TOKEN_REGEX.exec(str))) {\n    result.push(match[1]);\n  }\n  return result;\n}\n```\n\n上面代码中，如果字符串里面没有非法字符，`y` 修饰符与 `g` 修饰符的提取结果是一样的。但是，一旦出现非法字符，两者的行为就不一样了。\n\n```js\ntokenize(TOKEN_Y, \"3x + 4\");\n// [ '3' ]\ntokenize(TOKEN_G, \"3x + 4\");\n// [ '3', '+', '4' ]\n```\n\n上面代码中，`g` 修饰符会忽略非法字符，而 `y` 修饰符不会，这样就很容易发现错误。\n\n## RegExp.prototype.sticky 属性\n\n与 `y` 修饰符相匹配，ES6 的正则实例对象多了 `sticky` 属性，表示是否设置了 `y` 修饰符。\n\n```js\nvar r = /hello\\d/y;\nr.sticky; // true\n```\n\n## RegExp.prototype.flags 属性\n\nES6 为正则表达式新增了 `flags` 属性，会返回正则表达式的修饰符。\n\n```js\n// ES5 的 source 属性\n// 返回正则表达式的正文\n/abc/gi.source /\n  // \"abc\"\n\n  // ES6 的 flags 属性\n  // 返回正则表达式的修饰符\n  abc /\n  ig.flags;\n// 'gi'\n```\n\n## s 修饰符: dotAll 模式\n\n正则表达式中，点(`.`)是一个特殊字符，代表任意的单个字符，但是有两个例外。一个是四个字节的 UTF-16 字符，这个可以用 `u` 修饰符解决；另一个是行终止符(line terminator character)。\n\n所谓行终止符，就是该字符表示一行的终结。以下四个字符属于”行终止符“。\n\n- U+000A 换行符(`\\n`)\n- U+000D 回车符(`\\r`)\n- U+2028 行分隔符(line separator)\n- U+2029 段分隔符(paragraph separator)\n\n```js\n/foo.bar/.test(\"foo\\nbar\");\n// false\n```\n\n上面代码中，因为 `.` 不匹配 `\\n`，所以正则表达式返回 `false`。\n\n但是，很多时候我们希望匹配的是任意单个字符，这时有一种变通的写法。\n\n```js\n/foo[^]bar/.test(\"foo\\nbar\");\n// true\n```\n\n这种解决方案毕竟不太符合直觉，ES2018 [引入](https://github.com/tc39/proposal-regexp-dotall-flag)`s` 修饰符，使得 `.` 可以匹配任意单个字符。\n\n```js\n/foo.bar/s.test(\"foo\\nbar\"); // true\n```\n\n这被称为 `dotAll` 模式，即点(dot)代表一切字符。所以，正则表达式还引入了一个 `dotAll` 属性，返回一个布尔值，表示该正则表达式是否处在 `dotAll` 模式。\n\n```js\nconst re = /foo.bar/s;\n// 另一种写法\n// const re = new RegExp('foo.bar', 's');\n\nre.test(\"foo\\nbar\"); // true\nre.dotAll; // true\nre.flags; // 's'\n```\n\n`/s` 修饰符和多行修饰符`/m` 不冲突，两者一起使用的情况下，`.` 匹配所有字符，而 `^` 和`$`匹配每一行的行首和行尾。\n\n## 后行断言\n\nJavaScript 语言的正则表达式，只支持先行断言(lookahead)和先行否定断言(negative lookahead)，不支持后行断言(lookbehind)和后行否定断言(negative lookbehind)。ES2018 引入[后行断言](https://github.com/tc39/proposal-regexp-lookbehind)，V8 引擎 4.9 版(Chrome 62)已经支持。\n\n”先行断言“指的是，`x` 只有在 `y` 前面才匹配，必须写成`/x(?=y)/`。比如，只匹配百分号之前的数字，要写成`/\\d+(?=%)/`。”先行否定断言“指的是，`x` 只有不在 `y` 前面才匹配，必须写成`/x(?!y)/`。比如，只匹配不在百分号之前的数字，要写成`/\\d+(?!%)/`。\n\n```js\n/\\d+(?=%)/.exec('100% of US presidents have been male')  // [\"100\"]\n/\\d+(?!%)/.exec('that’s all 44 of them')                 // [\"44\"]\n```\n\n上面两个字符串，如果互换正则表达式，就不会得到相同结果。另外，还可以看到，”先行断言“括号之中的部分(`(?=%)`)，是不计入返回结果的。\n\n“后行断言”正好与“先行断言”相反，`x` 只有在 `y` 后面才匹配，必须写成`/(?<=y)x/`。比如，只匹配美元符号之后的数字，要写成`/(?<=\\$)\\d+/`。”后行否定断言“则与”先行否定断言“相反，`x` 只有不在 `y` 后面才匹配，必须写成`/(?<!y)x/`。比如，只匹配不在美元符号后面的数字，要写成`/(?<!\\$)\\d+/`。\n\n```js\n/(?<=\\$)\\d+/.exec('Benjamin Franklin is on the $100 bill')  // [\"100\"]\n/(?<!\\$)\\d+/.exec('it’s is worth about €90')                // [\"90\"]\n```\n\n上面的例子中，“后行断言”的括号之中的部分(`(?<=\\$)`)，也是不计入返回结果。\n\n下面的例子是使用后行断言进行字符串替换。\n\n```js\nconst RE_DOLLAR_PREFIX = /(?<=\\$)foo/g;\n\"$foo %foo foo\".replace(RE_DOLLAR_PREFIX, \"bar\");\n// '$bar %foo foo'\n```\n\n上面代码中，只有在美元符号后面的 `foo` 才会被替换。\n\n“后行断言”的实现，需要先匹配`/(?<=y)x/`的 `x`，然后再回到左边，匹配 `y` 的部分。这种“先右后左”的执行顺序，与所有其他正则操作相反，导致了一些不符合预期的行为。\n\n首先，后行断言的组匹配，与正常情况下结果是不一样的。\n\n```js\n/(?<=(\\d+)(\\d+))$/.exec('1053') // [\"\", \"1\", \"053\"]\n/^(\\d+)(\\d+)$/.exec('1053') // [\"1053\", \"105\", \"3\"]\n```\n\n上面代码中，需要捕捉两个组匹配。没有“后行断言”时，第一个括号是贪婪模式，第二个括号只能捕获一个字符，所以结果是 `105` 和 `3`。而“后行断言”时，由于执行顺序是从右到左，第二个括号是贪婪模式，第一个括号只能捕获一个字符，所以结果是 `1` 和 `053`。\n\n其次，“后行断言”的反斜杠引用，也与通常的顺序相反，必须放在对应的那个括号之前。\n\n```js\n/(?<=(o)d\\1)r/.exec('hodor')  // null\n/(?<=\\1d(o))r/.exec('hodor')  // [\"r\", \"o\"]\n```\n\n上面代码中，如果后行断言的反斜杠引用(`\\1`)放在括号的后面，就不会得到匹配结果，必须放在前面才可以。因为后行断言是先从左到右扫描，发现匹配以后再回过头，从右到左完成反斜杠引用。\n\n## Unicode 属性类\n\nES2018 [引入](https://github.com/tc39/proposal-regexp-unicode-property-escapes)了一种新的类的写法 `\\p{...}` 和 `\\P{...}`，允许正则表达式匹配符合 Unicode 某种属性的所有字符。\n\n```js\nconst regexGreekSymbol = /\\p{Script=Greek}/u;\nregexGreekSymbol.test(\"π\"); // true\n```\n\n上面代码中，`\\p{Script=Greek}` 指定匹配一个希腊文字母，所以匹配`π`成功。\n\nUnicode 属性类要指定属性名和属性值。\n\n```js\n\\p{UnicodePropertyName=UnicodePropertyValue}\n```\n\n对于某些属性，可以只写属性名，或者只写属性值。\n\n```js\n\\p{UnicodePropertyName}\n\\p{UnicodePropertyValue}\n```\n\n`\\P{…}` 是 `\\p{…}` 的反向匹配，即匹配不满足条件的字符。\n\n注意，这两种类只对 Unicode 有效，所以使用的时候一定要加上 `u` 修饰符。如果不加 `u` 修饰符，正则表达式使用 `\\p` 和 `\\P` 会报错，ECMAScript 预留了这两个类。\n\n由于 Unicode 的各种属性非常多，所以这种新的类的表达能力非常强。\n\n```js\nconst regex = /^\\p{Decimal_Number}+$/u;\nregex.test(\"𝟏𝟐𝟑𝟜𝟝𝟞𝟩𝟪𝟫𝟬𝟭𝟮𝟯𝟺𝟻𝟼\"); // true\n```\n\n上面代码中，属性类指定匹配所有十进制字符，可以看到各种字型的十进制字符都会匹配成功。\n\n`\\p{Number}` 甚至能匹配罗马数字。\n\n```js\n// 匹配所有数字\nconst regex = /^\\p{Number}+$/u;\nregex.test(\"²³¹¼½¾\"); // true\nregex.test(\"㉛㉜㉝\"); // true\nregex.test(\"ⅠⅡⅢⅣⅤⅥⅦⅧⅨⅩⅪⅫ\"); // true\n```\n\n下面是其他一些例子。\n\n```js\n// 匹配所有空格\n\\p{White_Space}\n\n// 匹配各种文字的所有字母，等同于 Unicode 版的 \\w\n[\\p{Alphabetic}\\p{Mark}\\p{Decimal_Number}\\p{Connector_Punctuation}\\p{Join_Control}]\n\n// 匹配各种文字的所有非字母的字符，等同于 Unicode 版的 \\W\n[^\\p{Alphabetic}\\p{Mark}\\p{Decimal_Number}\\p{Connector_Punctuation}\\p{Join_Control}]\n\n// 匹配 Emoji\n/\\p{Emoji_Modifier_Base}\\p{Emoji_Modifier}?|\\p{Emoji_Presentation}|\\p{Emoji}\\uFE0F/gu\n\n// 匹配所有的箭头字符\nconst regexArrows = /^\\p{Block=Arrows}+$/u;\nregexArrows.test('←↑→↓↔↕↖↗↘↙⇏⇐⇑⇒⇓⇔⇕⇖⇗⇘⇙⇧⇩') // true\n```\n\n## 具名组匹配\n\n### 简介\n\n正则表达式使用圆括号进行组匹配。\n\n```js\nconst RE_DATE = /(\\d{4})-(\\d{2})-(\\d{2})/;\n```\n\n上面代码中，正则表达式里面有三组圆括号。使用 `exec` 方法，就可以将这三组匹配结果提取出来。\n\n```js\nconst RE_DATE = /(\\d{4})-(\\d{2})-(\\d{2})/;\n\nconst matchObj = RE_DATE.exec(\"1999-12-31\");\nconst year = matchObj[1]; // 1999\nconst month = matchObj[2]; // 12\nconst day = matchObj[3]; // 31\n```\n\n组匹配的一个问题是，每一组的匹配含义不容易看出来，而且只能用数字序号(比如 `matchObj[1]`)引用，要是组的顺序变了，引用的时候就必须修改序号。\n\nES2018 引入了[具名组匹配](https://github.com/tc39/proposal-regexp-named-groups)(Named Capture Groups)，允许为每一个组匹配指定一个名字，既便于阅读代码，又便于引用。\n\n```js\nconst RE_DATE = /(?<year>\\d{4})-(?<month>\\d{2})-(?<day>\\d{2})/;\n\nconst matchObj = RE_DATE.exec(\"1999-12-31\");\nconst year = matchObj.groups.year; // 1999\nconst month = matchObj.groups.month; // 12\nconst day = matchObj.groups.day; // 31\n```\n\n上面代码中，“具名组匹配”在圆括号内部，模式的头部添加“问号 + 尖括号 + 组名”(`?<year>`)，然后就可以在 `exec` 方法返回结果的 `groups` 属性上引用该组名。同时，数字序号(`matchObj[1]`)依然有效。\n\n具名组匹配等于为每一组匹配加上了 ID，便于描述匹配的目的。如果组的顺序变了，也不用改变匹配后的处理代码。\n\n如果具名组没有匹配，那么对应的 `groups` 对象属性会是 `undefined`。\n\n```js\nconst RE_OPT_A = /^(?<as>a+)?$/;\nconst matchObj = RE_OPT_A.exec(\"\");\n\nmatchObj.groups.as; // undefined\n\"as\" in matchObj.groups; // true\n```\n\n上面代码中，具名组 `as` 没有找到匹配，那么 `matchObj.groups.as` 属性值就是 `undefined`，并且 `as` 这个键名在 `groups` 是始终存在的。\n\n### 解构赋值和替换\n\n有了具名组匹配以后，可以使用解构赋值直接从匹配结果上为变量赋值。\n\n```js\nlet {\n  groups: { one, two },\n} = /^(?<one>.*):(?<two>.*)$/u.exec(\"foo:bar\");\none; // foo\ntwo; // bar\n```\n\n字符串替换时，使用`$<组名>` 引用具名组。\n\n```js\nlet re = /(?<year>\\d{4})-(?<month>\\d{2})-(?<day>\\d{2})/u;\n\n\"2015-01-02\".replace(re, \"$<day>/$<month>/$<year>\");\n// '02/01/2015'\n```\n\n上面代码中，`replace` 方法的第二个参数是一个字符串，而不是正则表达式。\n\n`replace` 方法的第二个参数也可以是函数，该函数的参数序列如下。\n\n```js\n\"2015-01-02\".replace(\n  re,\n  (\n    matched, // 整个匹配结果 2015-01-02\n    capture1, // 第一个组匹配 2015\n    capture2, // 第二个组匹配 01\n    capture3, // 第三个组匹配 02\n    position, // 匹配开始的位置 0\n    S, // 原字符串 2015-01-02\n    groups, // 具名组构成的一个对象 {year, month, day}\n  ) => {\n    let { day, month, year } = args[args.length - 1];\n    return `${day}/${month}/${year}`;\n  },\n);\n```\n\n具名组匹配在原来的基础上，新增了最后一个函数参数: 具名组构成的一个对象。函数内部可以直接对这个对象进行解构赋值。\n\n### 引用\n\n如果要在正则表达式内部引用某个“具名组匹配”，可以使用 `\\k<组名>` 的写法。\n\n```js\nconst RE_TWICE = /^(?<word>[a-z]+)!\\k<word>$/;\nRE_TWICE.test(\"abc!abc\"); // true\nRE_TWICE.test(\"abc!ab\"); // false\n```\n\n数字引用(`\\1`)依然有效。\n\n```js\nconst RE_TWICE = /^(?<word>[a-z]+)!\\1$/;\nRE_TWICE.test(\"abc!abc\"); // true\nRE_TWICE.test(\"abc!ab\"); // false\n```\n\n这两种引用语法还可以同时使用。\n\n```js\nconst RE_TWICE = /^(?<word>[a-z]+)!\\k<word>!\\1$/;\nRE_TWICE.test(\"abc!abc!abc\"); // true\nRE_TWICE.test(\"abc!abc!ab\"); // false\n```\n\n## String.prototype.matchAll\n\n如果一个正则表达式在字符串里面有多个匹配，现在一般使用 `g` 修饰符或 `y` 修饰符，在循环里面逐一取出。\n\n```js\nvar regex = /t(e)(st(\\d?))/g;\nvar string = \"test1test2test3\";\n\nvar matches = [];\nvar match;\nwhile ((match = regex.exec(string))) {\n  matches.push(match);\n}\n\nmatches;\n// [\n//   [\"test1\", \"e\", \"st1\", \"1\", index: 0, input: \"test1test2test3\"],\n//   [\"test2\", \"e\", \"st2\", \"2\", index: 5, input: \"test1test2test3\"],\n//   [\"test3\", \"e\", \"st3\", \"3\", index: 10, input: \"test1test2test3\"]\n// ]\n```\n\n上面代码中，`while` 循环取出每一轮的正则匹配，一共三轮。\n\n目前有一个[提案](https://github.com/tc39/proposal-string-matchall)，增加了 `String.prototype.matchAll` 方法，可以一次性取出所有匹配。不过，它返回的是一个遍历器(Iterator)，而不是数组。\n\n```js\nconst string = \"test1test2test3\";\n\n// g 修饰符加不加都可以\nconst regex = /t(e)(st(\\d?))/g;\n\nfor (const match of string.matchAll(regex)) {\n  console.log(match);\n}\n// [\"test1\", \"e\", \"st1\", \"1\", index: 0, input: \"test1test2test3\"]\n// [\"test2\", \"e\", \"st2\", \"2\", index: 5, input: \"test1test2test3\"]\n// [\"test3\", \"e\", \"st3\", \"3\", index: 10, input: \"test1test2test3\"]\n```\n\n上面代码中，由于 `string.matchAll(regex)` 返回的是遍历器，所以可以用 `for...of` 循环取出。相对于返回数组，返回遍历器的好处在于，如果匹配结果是一个很大的数组，那么遍历器比较节省资源。\n\n遍历器转为数组是非常简单的，使用 `...` 运算符和 `Array.from` 方法就可以了。\n\n```js\n// 转为数组方法一\n[...string.matchAll(regex)];\n\n// 转为数组方法二\nArray.from(string.matchAll(regex));\n```\n","excerpt":"","title":"正则的扩展","headers":[{"level":2,"title":"RegExp 构造函数","slug":"regexp-构造函数","link":"#regexp-构造函数","children":[]},{"level":2,"title":"字符串的正则方法","slug":"字符串的正则方法","link":"#字符串的正则方法","children":[]},{"level":2,"title":"u 修饰符","slug":"u-修饰符","link":"#u-修饰符","children":[]},{"level":2,"title":"RegExp.prototype.unicode 属性","slug":"regexp-prototype-unicode-属性","link":"#regexp-prototype-unicode-属性","children":[]},{"level":2,"title":"y 修饰符","slug":"y-修饰符","link":"#y-修饰符","children":[]},{"level":2,"title":"RegExp.prototype.sticky 属性","slug":"regexp-prototype-sticky-属性","link":"#regexp-prototype-sticky-属性","children":[]},{"level":2,"title":"RegExp.prototype.flags 属性","slug":"regexp-prototype-flags-属性","link":"#regexp-prototype-flags-属性","children":[]},{"level":2,"title":"s 修饰符: dotAll 模式","slug":"s-修饰符-dotall-模式","link":"#s-修饰符-dotall-模式","children":[]},{"level":2,"title":"后行断言","slug":"后行断言","link":"#后行断言","children":[]},{"level":2,"title":"Unicode 属性类","slug":"unicode-属性类","link":"#unicode-属性类","children":[]},{"level":2,"title":"具名组匹配","slug":"具名组匹配","link":"#具名组匹配","children":[{"level":3,"title":"简介","slug":"简介","link":"#简介","children":[]},{"level":3,"title":"解构赋值和替换","slug":"解构赋值和替换","link":"#解构赋值和替换","children":[]},{"level":3,"title":"引用","slug":"引用","link":"#引用","children":[]}]},{"level":2,"title":"String.prototype.matchAll","slug":"string-prototype-matchall","link":"#string-prototype-matchall","children":[]}]}}
