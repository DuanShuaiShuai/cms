{"content":"<p>在 Python 中，定义一个函数要使用 <code v-pre>def</code> 语句，依次写出函数名、括号、括号中的参数和冒号 <code v-pre>:</code>，然后，在缩进块中编写函数体，函数的返回值用 <code v-pre>return</code> 语句返回。</p>\n<!-- more -->\n<p>我们以自定义一个求绝对值的 <code v-pre>my_abs</code> 函数为例:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" data-title=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"># -*- coding: utf-8 -*-</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">def</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> my_abs</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic\">x</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    if</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> x </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">>=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        return</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> x</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    else</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        return</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> -</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">x</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">print</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\">my_abs</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">-</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">99</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">))</span></span></code></pre>\n</div><p>请自行测试并调用 <code v-pre>my_abs</code> 看看返回结果是否正确。</p>\n<p>请注意，函数体内部的语句在执行时，一旦执行到 <code v-pre>return</code> 时，函数就执行完毕，并将结果返回。因此，函数内部通过条件判断和循环可以实现非常复杂的逻辑。</p>\n<p>如果没有 <code v-pre>return</code> 语句，函数执行完毕后也会返回结果，只是结果为 <code v-pre>None</code>。<code v-pre>return None</code> 可以简写为 <code v-pre>return</code>。</p>\n<p>在 Python 交互环境中定义函数时，注意 Python 会出现 <code v-pre>...</code> 的提示。函数定义结束后需要按两次回车重新回到<code v-pre>&gt;&gt;&gt;</code> 提示符下:</p>\n<div class=\"language-text line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"text\" data-title=\"text\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span>┌────────────────────────────────────────────────────────┐</span></span>\n<span class=\"line\"><span>│Command Prompt - python                           - □ x │</span></span>\n<span class=\"line\"><span>├────────────────────────────────────────────────────────┤</span></span>\n<span class=\"line\"><span>│>>> def my_abs(x):                                      │</span></span>\n<span class=\"line\"><span>│...     if x >= 0:                                      │</span></span>\n<span class=\"line\"><span>│...         return x                                    │</span></span>\n<span class=\"line\"><span>│...     else:                                           │</span></span>\n<span class=\"line\"><span>│...         return -x                                   │</span></span>\n<span class=\"line\"><span>│...                                                     │</span></span>\n<span class=\"line\"><span>│>>> my_abs(-9)                                          │</span></span>\n<span class=\"line\"><span>│9                                                       │</span></span>\n<span class=\"line\"><span>│>>> _                                                   │</span></span>\n<span class=\"line\"><span>│                                                        │</span></span>\n<span class=\"line\"><span>│                                                        │</span></span>\n<span class=\"line\"><span>└────────────────────────────────────────────────────────┘</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>如果您已经把 <code v-pre>my_abs()</code> 的函数定义保存为 <code v-pre>abstest.py</code> 文件了，那么，可以在该文件的当前目录下启动 Python 解释器，用 <code v-pre>from abstest import my_abs</code> 来导入 <code v-pre>my_abs()</code> 函数，注意 <code v-pre>abstest</code> 是文件名(不含 .py 扩展名):</p>\n<div class=\"language-text line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"text\" data-title=\"text\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span>┌────────────────────────────────────────────────────────┐</span></span>\n<span class=\"line\"><span>│Command Prompt - python                           - □ x │</span></span>\n<span class=\"line\"><span>├────────────────────────────────────────────────────────┤</span></span>\n<span class=\"line\"><span>│>>> from abstest import my_abs                          │</span></span>\n<span class=\"line\"><span>│>>> my_abs(-9)                                          │</span></span>\n<span class=\"line\"><span>│9                                                       │</span></span>\n<span class=\"line\"><span>│>>> _                                                   │</span></span>\n<span class=\"line\"><span>│                                                        │</span></span>\n<span class=\"line\"><span>│                                                        │</span></span>\n<span class=\"line\"><span>│                                                        │</span></span>\n<span class=\"line\"><span>│                                                        │</span></span>\n<span class=\"line\"><span>│                                                        │</span></span>\n<span class=\"line\"><span>│                                                        │</span></span>\n<span class=\"line\"><span>│                                                        │</span></span>\n<span class=\"line\"><span>└────────────────────────────────────────────────────────┘</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><code v-pre>import</code> 的用法在后续 <RouteLink to=\"/code/language/python/module/\">模块</RouteLink> 一节中会详细介绍。</p>\n<h2 id=\"空函数\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#空函数\"><span>空函数</span></a></h2>\n<p>如果想定义一个什么事也不做的空函数，可以用 pass 语句:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" data-title=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">def</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> nop</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">():</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    pass</span></span></code></pre>\n</div><p>pass 语句什么都不做，那有什么用? 实际上 pass 可以用来作为占位符，比如现在还没想好怎么写函数的代码，就可以先放一个 pass，让代码能运行起来。</p>\n<p>pass 还可以用在其他语句里，比如:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" data-title=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">if</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> age </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">>=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 18</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    pass</span></span></code></pre>\n</div><p>缺少了 pass，代码运行就会有语法错误。</p>\n<h2 id=\"参数检查\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#参数检查\"><span>参数检查</span></a></h2>\n<p>调用函数时，如果参数个数不对，Python 解释器会自动检查出来，并抛出 <code v-pre>TypeError</code>:</p>\n<div class=\"language-sh\" data-highlighter=\"shiki\" data-ext=\"sh\" data-title=\"sh\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">>>> </span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">my_abs(1,</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 2</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">Traceback</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (most </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">recent</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> call</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> last</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">  File</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"&#x3C;stdin>\",</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> line</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 1,</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> in</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> &#x3C;</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">modul</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">e></span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">TypeError:</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> my_abs</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">() </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">takes</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 1</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> positional</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> argument</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> but</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 2</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> were</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> given</span></span></code></pre>\n</div><p>但是如果参数类型不对，Python 解释器就无法帮我们检查。试试 <code v-pre>my_abs</code> 和内置函数 abs 的差别:</p>\n<div class=\"language-sh\" data-highlighter=\"shiki\" data-ext=\"sh\" data-title=\"sh\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">>>> </span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">my_abs(</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">'A'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">Traceback</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (most </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">recent</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> call</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> last</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">  File</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"&#x3C;stdin>\",</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> line</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 1,</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> in</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> &#x3C;</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">modul</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">e></span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">  File</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"&#x3C;stdin>\",</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> line</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 2,</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> in</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> my_abs</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">TypeError:</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> unorderable</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> types:</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> str</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">() ></span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">=</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> int</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">()</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">>>> </span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">abs(</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">'A'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">Traceback</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (most </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">recent</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> call</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> last</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">  File</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"&#x3C;stdin>\",</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> line</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 1,</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> in</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> &#x3C;</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">modul</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">e></span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">TypeError:</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> bad</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> operand</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> type</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> for</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> abs</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">()</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">:</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 'str'</span></span></code></pre>\n</div><p>当传入了不恰当的参数时，内置函数 <code v-pre>abs</code> 会检查出参数错误，而我们定义的 <code v-pre>my_abs</code> 没有参数检查，会导致 <code v-pre>if</code> 语句出错，出错信息和 <code v-pre>abs</code> 不一样。所以，这个函数定义不够完善。</p>\n<p>让我们修改一下 <code v-pre>my_abs</code> 的定义，对参数类型做检查，只允许整数和浮点数类型的参数。数据类型检查可以用内置函数 <code v-pre>isinstance()</code> 实现:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" data-title=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">def</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> my_abs</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic\">x</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    if</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> not</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> isinstance</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(x, (</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">int</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">float</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        raise</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\"> TypeError</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'bad operand type'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    if</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> x </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">>=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        return</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> x</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    else</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        return</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> -</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">x</span></span></code></pre>\n</div><p>添加了参数检查后，如果传入错误的参数类型，函数就可以抛出一个错误:</p>\n<div class=\"language-sh\" data-highlighter=\"shiki\" data-ext=\"sh\" data-title=\"sh\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">>>> </span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">my_abs(</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">'A'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">Traceback</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (most </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">recent</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> call</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> last</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">  File</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"&#x3C;stdin>\",</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> line</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 1,</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> in</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> &#x3C;</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">modul</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">e></span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">  File</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"&#x3C;stdin>\",</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> line</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 3,</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> in</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> my_abs</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">TypeError:</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> bad</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> operand</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> type</span></span></code></pre>\n</div><p>错误和异常处理将在后续讲到。</p>\n<h2 id=\"返回多个值\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#返回多个值\"><span>返回多个值</span></a></h2>\n<p>函数可以返回多个值吗? 答案是肯定的。</p>\n<p>比如在游戏中经常需要从一个点移动到另一个点，给出坐标、位移和角度，就可以计算出新的坐标:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" data-title=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">import</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> math</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">def</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> move</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic\">x</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic\"> y</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic\"> step</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic\"> angle</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    nx </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> x </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">+</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> step </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">*</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">math.</span><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\">cos</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(angle)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">ny </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> y </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">-</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> step</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">*</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> math.</span><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\">sin</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(angle)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    return</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> nx, ny</span></span></code></pre>\n</div><p><code v-pre>import math</code> 语句表示导入 <code v-pre>math</code> 包，并允许后续代码引用 <code v-pre>math</code> 包里的 <code v-pre>sin</code>、<code v-pre>cos</code> 等函数。</p>\n<p>然后，我们就可以同时获得返回值:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" data-title=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">>>></span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> x, y </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\"> move</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">100</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">100</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">60</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, math.pi </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">/</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 6</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">>>></span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> print</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(x, y)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">151.96152422706632</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 70.0</span></span></code></pre>\n</div><p>但其实这只是一种假象，Python 函数返回的仍然是单一值:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" data-title=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">>>></span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> r </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\"> move</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">100</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">100</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">60</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, math.pi </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">/</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 6</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">>>></span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> print</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(r)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">151.96152422706632</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">70.0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span></code></pre>\n</div><p>原来返回值是一个 tuple! 但是，在语法上，返回一个 tuple 可以省略括号，而多个变量可以同时接收一个 tuple，按位置赋给对应的值，所以，Python 的函数返回多值其实就是返回一个 tuple，但写起来更方便。</p>\n<h2 id=\"小结\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#小结\"><span>小结</span></a></h2>\n<p>定义函数时，需要确定函数名和参数个数；</p>\n<p>如果有必要，可以先对参数的数据类型做检查；</p>\n<p>函数体内部可以用 <code v-pre>return</code> 随时返回函数结果；</p>\n<p>函数执行完毕也没有 <code v-pre>return</code> 语句时，自动 <code v-pre>return None</code>。</p>\n<p>函数可以同时返回多个值，但其实就是一个 tuple。</p>\n","env":{"base":"/","filePath":"/Users/carson/Desktop/Mister-Hope.github.io-main/src/code/language/python/function/define.md","filePathRelative":"code/language/python/function/define.md","frontmatter":{"title":"定义函数","icon":"define","author":"廖雪峰","date":"2020-05-26T00:00:00.000Z","category":"Python"},"sfcBlocks":{"template":{"type":"template","content":"<template><p>在 Python 中，定义一个函数要使用 <code v-pre>def</code> 语句，依次写出函数名、括号、括号中的参数和冒号 <code v-pre>:</code>，然后，在缩进块中编写函数体，函数的返回值用 <code v-pre>return</code> 语句返回。</p>\n<!-- more -->\n<p>我们以自定义一个求绝对值的 <code v-pre>my_abs</code> 函数为例:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" data-title=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"># -*- coding: utf-8 -*-</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">def</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> my_abs</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic\">x</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    if</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> x </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">>=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        return</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> x</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    else</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        return</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> -</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">x</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">print</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\">my_abs</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">-</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">99</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">))</span></span></code></pre>\n</div><p>请自行测试并调用 <code v-pre>my_abs</code> 看看返回结果是否正确。</p>\n<p>请注意，函数体内部的语句在执行时，一旦执行到 <code v-pre>return</code> 时，函数就执行完毕，并将结果返回。因此，函数内部通过条件判断和循环可以实现非常复杂的逻辑。</p>\n<p>如果没有 <code v-pre>return</code> 语句，函数执行完毕后也会返回结果，只是结果为 <code v-pre>None</code>。<code v-pre>return None</code> 可以简写为 <code v-pre>return</code>。</p>\n<p>在 Python 交互环境中定义函数时，注意 Python 会出现 <code v-pre>...</code> 的提示。函数定义结束后需要按两次回车重新回到<code v-pre>&gt;&gt;&gt;</code> 提示符下:</p>\n<div class=\"language-text line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"text\" data-title=\"text\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span>┌────────────────────────────────────────────────────────┐</span></span>\n<span class=\"line\"><span>│Command Prompt - python                           - □ x │</span></span>\n<span class=\"line\"><span>├────────────────────────────────────────────────────────┤</span></span>\n<span class=\"line\"><span>│>>> def my_abs(x):                                      │</span></span>\n<span class=\"line\"><span>│...     if x >= 0:                                      │</span></span>\n<span class=\"line\"><span>│...         return x                                    │</span></span>\n<span class=\"line\"><span>│...     else:                                           │</span></span>\n<span class=\"line\"><span>│...         return -x                                   │</span></span>\n<span class=\"line\"><span>│...                                                     │</span></span>\n<span class=\"line\"><span>│>>> my_abs(-9)                                          │</span></span>\n<span class=\"line\"><span>│9                                                       │</span></span>\n<span class=\"line\"><span>│>>> _                                                   │</span></span>\n<span class=\"line\"><span>│                                                        │</span></span>\n<span class=\"line\"><span>│                                                        │</span></span>\n<span class=\"line\"><span>└────────────────────────────────────────────────────────┘</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>如果您已经把 <code v-pre>my_abs()</code> 的函数定义保存为 <code v-pre>abstest.py</code> 文件了，那么，可以在该文件的当前目录下启动 Python 解释器，用 <code v-pre>from abstest import my_abs</code> 来导入 <code v-pre>my_abs()</code> 函数，注意 <code v-pre>abstest</code> 是文件名(不含 .py 扩展名):</p>\n<div class=\"language-text line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"text\" data-title=\"text\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span>┌────────────────────────────────────────────────────────┐</span></span>\n<span class=\"line\"><span>│Command Prompt - python                           - □ x │</span></span>\n<span class=\"line\"><span>├────────────────────────────────────────────────────────┤</span></span>\n<span class=\"line\"><span>│>>> from abstest import my_abs                          │</span></span>\n<span class=\"line\"><span>│>>> my_abs(-9)                                          │</span></span>\n<span class=\"line\"><span>│9                                                       │</span></span>\n<span class=\"line\"><span>│>>> _                                                   │</span></span>\n<span class=\"line\"><span>│                                                        │</span></span>\n<span class=\"line\"><span>│                                                        │</span></span>\n<span class=\"line\"><span>│                                                        │</span></span>\n<span class=\"line\"><span>│                                                        │</span></span>\n<span class=\"line\"><span>│                                                        │</span></span>\n<span class=\"line\"><span>│                                                        │</span></span>\n<span class=\"line\"><span>│                                                        │</span></span>\n<span class=\"line\"><span>└────────────────────────────────────────────────────────┘</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><code v-pre>import</code> 的用法在后续 <RouteLink to=\"/code/language/python/module/\">模块</RouteLink> 一节中会详细介绍。</p>\n<h2 id=\"空函数\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#空函数\"><span>空函数</span></a></h2>\n<p>如果想定义一个什么事也不做的空函数，可以用 pass 语句:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" data-title=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">def</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> nop</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">():</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    pass</span></span></code></pre>\n</div><p>pass 语句什么都不做，那有什么用? 实际上 pass 可以用来作为占位符，比如现在还没想好怎么写函数的代码，就可以先放一个 pass，让代码能运行起来。</p>\n<p>pass 还可以用在其他语句里，比如:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" data-title=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">if</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> age </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">>=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 18</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    pass</span></span></code></pre>\n</div><p>缺少了 pass，代码运行就会有语法错误。</p>\n<h2 id=\"参数检查\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#参数检查\"><span>参数检查</span></a></h2>\n<p>调用函数时，如果参数个数不对，Python 解释器会自动检查出来，并抛出 <code v-pre>TypeError</code>:</p>\n<div class=\"language-sh\" data-highlighter=\"shiki\" data-ext=\"sh\" data-title=\"sh\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">>>> </span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">my_abs(1,</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 2</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">Traceback</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (most </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">recent</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> call</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> last</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">  File</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"&#x3C;stdin>\",</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> line</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 1,</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> in</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> &#x3C;</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">modul</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">e></span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">TypeError:</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> my_abs</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">() </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">takes</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 1</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> positional</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> argument</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> but</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 2</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> were</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> given</span></span></code></pre>\n</div><p>但是如果参数类型不对，Python 解释器就无法帮我们检查。试试 <code v-pre>my_abs</code> 和内置函数 abs 的差别:</p>\n<div class=\"language-sh\" data-highlighter=\"shiki\" data-ext=\"sh\" data-title=\"sh\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">>>> </span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">my_abs(</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">'A'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">Traceback</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (most </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">recent</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> call</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> last</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">  File</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"&#x3C;stdin>\",</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> line</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 1,</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> in</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> &#x3C;</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">modul</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">e></span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">  File</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"&#x3C;stdin>\",</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> line</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 2,</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> in</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> my_abs</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">TypeError:</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> unorderable</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> types:</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> str</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">() ></span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">=</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> int</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">()</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">>>> </span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">abs(</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">'A'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">Traceback</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (most </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">recent</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> call</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> last</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">  File</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"&#x3C;stdin>\",</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> line</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 1,</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> in</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> &#x3C;</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">modul</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">e></span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">TypeError:</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> bad</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> operand</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> type</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> for</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> abs</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">()</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">:</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 'str'</span></span></code></pre>\n</div><p>当传入了不恰当的参数时，内置函数 <code v-pre>abs</code> 会检查出参数错误，而我们定义的 <code v-pre>my_abs</code> 没有参数检查，会导致 <code v-pre>if</code> 语句出错，出错信息和 <code v-pre>abs</code> 不一样。所以，这个函数定义不够完善。</p>\n<p>让我们修改一下 <code v-pre>my_abs</code> 的定义，对参数类型做检查，只允许整数和浮点数类型的参数。数据类型检查可以用内置函数 <code v-pre>isinstance()</code> 实现:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" data-title=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">def</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> my_abs</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic\">x</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    if</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> not</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> isinstance</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(x, (</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">int</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">float</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        raise</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\"> TypeError</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'bad operand type'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    if</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> x </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">>=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        return</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> x</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    else</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        return</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> -</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">x</span></span></code></pre>\n</div><p>添加了参数检查后，如果传入错误的参数类型，函数就可以抛出一个错误:</p>\n<div class=\"language-sh\" data-highlighter=\"shiki\" data-ext=\"sh\" data-title=\"sh\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">>>> </span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">my_abs(</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">'A'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">Traceback</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (most </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">recent</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> call</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> last</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">  File</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"&#x3C;stdin>\",</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> line</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 1,</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> in</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> &#x3C;</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">modul</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">e></span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">  File</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"&#x3C;stdin>\",</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> line</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 3,</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> in</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> my_abs</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">TypeError:</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> bad</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> operand</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> type</span></span></code></pre>\n</div><p>错误和异常处理将在后续讲到。</p>\n<h2 id=\"返回多个值\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#返回多个值\"><span>返回多个值</span></a></h2>\n<p>函数可以返回多个值吗? 答案是肯定的。</p>\n<p>比如在游戏中经常需要从一个点移动到另一个点，给出坐标、位移和角度，就可以计算出新的坐标:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" data-title=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">import</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> math</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">def</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> move</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic\">x</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic\"> y</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic\"> step</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic\"> angle</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    nx </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> x </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">+</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> step </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">*</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">math.</span><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\">cos</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(angle)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">ny </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> y </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">-</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> step</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">*</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> math.</span><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\">sin</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(angle)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    return</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> nx, ny</span></span></code></pre>\n</div><p><code v-pre>import math</code> 语句表示导入 <code v-pre>math</code> 包，并允许后续代码引用 <code v-pre>math</code> 包里的 <code v-pre>sin</code>、<code v-pre>cos</code> 等函数。</p>\n<p>然后，我们就可以同时获得返回值:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" data-title=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">>>></span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> x, y </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\"> move</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">100</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">100</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">60</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, math.pi </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">/</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 6</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">>>></span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> print</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(x, y)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">151.96152422706632</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 70.0</span></span></code></pre>\n</div><p>但其实这只是一种假象，Python 函数返回的仍然是单一值:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" data-title=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">>>></span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> r </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\"> move</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">100</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">100</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">60</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, math.pi </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">/</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 6</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">>>></span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> print</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(r)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">151.96152422706632</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">70.0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span></code></pre>\n</div><p>原来返回值是一个 tuple! 但是，在语法上，返回一个 tuple 可以省略括号，而多个变量可以同时接收一个 tuple，按位置赋给对应的值，所以，Python 的函数返回多值其实就是返回一个 tuple，但写起来更方便。</p>\n<h2 id=\"小结\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#小结\"><span>小结</span></a></h2>\n<p>定义函数时，需要确定函数名和参数个数；</p>\n<p>如果有必要，可以先对参数的数据类型做检查；</p>\n<p>函数体内部可以用 <code v-pre>return</code> 随时返回函数结果；</p>\n<p>函数执行完毕也没有 <code v-pre>return</code> 语句时，自动 <code v-pre>return None</code>。</p>\n<p>函数可以同时返回多个值，但其实就是一个 tuple。</p>\n</template>","contentStripped":"<p>在 Python 中，定义一个函数要使用 <code v-pre>def</code> 语句，依次写出函数名、括号、括号中的参数和冒号 <code v-pre>:</code>，然后，在缩进块中编写函数体，函数的返回值用 <code v-pre>return</code> 语句返回。</p>\n<!-- more -->\n<p>我们以自定义一个求绝对值的 <code v-pre>my_abs</code> 函数为例:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" data-title=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"># -*- coding: utf-8 -*-</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">def</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> my_abs</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic\">x</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    if</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> x </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">>=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        return</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> x</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    else</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        return</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> -</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">x</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">print</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\">my_abs</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">-</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">99</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">))</span></span></code></pre>\n</div><p>请自行测试并调用 <code v-pre>my_abs</code> 看看返回结果是否正确。</p>\n<p>请注意，函数体内部的语句在执行时，一旦执行到 <code v-pre>return</code> 时，函数就执行完毕，并将结果返回。因此，函数内部通过条件判断和循环可以实现非常复杂的逻辑。</p>\n<p>如果没有 <code v-pre>return</code> 语句，函数执行完毕后也会返回结果，只是结果为 <code v-pre>None</code>。<code v-pre>return None</code> 可以简写为 <code v-pre>return</code>。</p>\n<p>在 Python 交互环境中定义函数时，注意 Python 会出现 <code v-pre>...</code> 的提示。函数定义结束后需要按两次回车重新回到<code v-pre>&gt;&gt;&gt;</code> 提示符下:</p>\n<div class=\"language-text line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"text\" data-title=\"text\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span>┌────────────────────────────────────────────────────────┐</span></span>\n<span class=\"line\"><span>│Command Prompt - python                           - □ x │</span></span>\n<span class=\"line\"><span>├────────────────────────────────────────────────────────┤</span></span>\n<span class=\"line\"><span>│>>> def my_abs(x):                                      │</span></span>\n<span class=\"line\"><span>│...     if x >= 0:                                      │</span></span>\n<span class=\"line\"><span>│...         return x                                    │</span></span>\n<span class=\"line\"><span>│...     else:                                           │</span></span>\n<span class=\"line\"><span>│...         return -x                                   │</span></span>\n<span class=\"line\"><span>│...                                                     │</span></span>\n<span class=\"line\"><span>│>>> my_abs(-9)                                          │</span></span>\n<span class=\"line\"><span>│9                                                       │</span></span>\n<span class=\"line\"><span>│>>> _                                                   │</span></span>\n<span class=\"line\"><span>│                                                        │</span></span>\n<span class=\"line\"><span>│                                                        │</span></span>\n<span class=\"line\"><span>└────────────────────────────────────────────────────────┘</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>如果您已经把 <code v-pre>my_abs()</code> 的函数定义保存为 <code v-pre>abstest.py</code> 文件了，那么，可以在该文件的当前目录下启动 Python 解释器，用 <code v-pre>from abstest import my_abs</code> 来导入 <code v-pre>my_abs()</code> 函数，注意 <code v-pre>abstest</code> 是文件名(不含 .py 扩展名):</p>\n<div class=\"language-text line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"text\" data-title=\"text\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span>┌────────────────────────────────────────────────────────┐</span></span>\n<span class=\"line\"><span>│Command Prompt - python                           - □ x │</span></span>\n<span class=\"line\"><span>├────────────────────────────────────────────────────────┤</span></span>\n<span class=\"line\"><span>│>>> from abstest import my_abs                          │</span></span>\n<span class=\"line\"><span>│>>> my_abs(-9)                                          │</span></span>\n<span class=\"line\"><span>│9                                                       │</span></span>\n<span class=\"line\"><span>│>>> _                                                   │</span></span>\n<span class=\"line\"><span>│                                                        │</span></span>\n<span class=\"line\"><span>│                                                        │</span></span>\n<span class=\"line\"><span>│                                                        │</span></span>\n<span class=\"line\"><span>│                                                        │</span></span>\n<span class=\"line\"><span>│                                                        │</span></span>\n<span class=\"line\"><span>│                                                        │</span></span>\n<span class=\"line\"><span>│                                                        │</span></span>\n<span class=\"line\"><span>└────────────────────────────────────────────────────────┘</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><code v-pre>import</code> 的用法在后续 <RouteLink to=\"/code/language/python/module/\">模块</RouteLink> 一节中会详细介绍。</p>\n<h2 id=\"空函数\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#空函数\"><span>空函数</span></a></h2>\n<p>如果想定义一个什么事也不做的空函数，可以用 pass 语句:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" data-title=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">def</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> nop</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">():</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    pass</span></span></code></pre>\n</div><p>pass 语句什么都不做，那有什么用? 实际上 pass 可以用来作为占位符，比如现在还没想好怎么写函数的代码，就可以先放一个 pass，让代码能运行起来。</p>\n<p>pass 还可以用在其他语句里，比如:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" data-title=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">if</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> age </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">>=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 18</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    pass</span></span></code></pre>\n</div><p>缺少了 pass，代码运行就会有语法错误。</p>\n<h2 id=\"参数检查\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#参数检查\"><span>参数检查</span></a></h2>\n<p>调用函数时，如果参数个数不对，Python 解释器会自动检查出来，并抛出 <code v-pre>TypeError</code>:</p>\n<div class=\"language-sh\" data-highlighter=\"shiki\" data-ext=\"sh\" data-title=\"sh\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">>>> </span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">my_abs(1,</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 2</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">Traceback</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (most </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">recent</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> call</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> last</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">  File</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"&#x3C;stdin>\",</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> line</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 1,</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> in</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> &#x3C;</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">modul</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">e></span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">TypeError:</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> my_abs</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">() </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">takes</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 1</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> positional</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> argument</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> but</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 2</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> were</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> given</span></span></code></pre>\n</div><p>但是如果参数类型不对，Python 解释器就无法帮我们检查。试试 <code v-pre>my_abs</code> 和内置函数 abs 的差别:</p>\n<div class=\"language-sh\" data-highlighter=\"shiki\" data-ext=\"sh\" data-title=\"sh\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">>>> </span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">my_abs(</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">'A'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">Traceback</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (most </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">recent</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> call</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> last</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">  File</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"&#x3C;stdin>\",</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> line</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 1,</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> in</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> &#x3C;</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">modul</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">e></span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">  File</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"&#x3C;stdin>\",</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> line</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 2,</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> in</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> my_abs</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">TypeError:</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> unorderable</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> types:</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> str</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">() ></span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">=</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> int</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">()</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">>>> </span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">abs(</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">'A'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">Traceback</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (most </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">recent</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> call</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> last</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">  File</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"&#x3C;stdin>\",</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> line</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 1,</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> in</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> &#x3C;</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">modul</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">e></span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">TypeError:</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> bad</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> operand</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> type</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> for</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> abs</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">()</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">:</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 'str'</span></span></code></pre>\n</div><p>当传入了不恰当的参数时，内置函数 <code v-pre>abs</code> 会检查出参数错误，而我们定义的 <code v-pre>my_abs</code> 没有参数检查，会导致 <code v-pre>if</code> 语句出错，出错信息和 <code v-pre>abs</code> 不一样。所以，这个函数定义不够完善。</p>\n<p>让我们修改一下 <code v-pre>my_abs</code> 的定义，对参数类型做检查，只允许整数和浮点数类型的参数。数据类型检查可以用内置函数 <code v-pre>isinstance()</code> 实现:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" data-title=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">def</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> my_abs</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic\">x</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    if</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> not</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> isinstance</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(x, (</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">int</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">float</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        raise</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\"> TypeError</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'bad operand type'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    if</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> x </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">>=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        return</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> x</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    else</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        return</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> -</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">x</span></span></code></pre>\n</div><p>添加了参数检查后，如果传入错误的参数类型，函数就可以抛出一个错误:</p>\n<div class=\"language-sh\" data-highlighter=\"shiki\" data-ext=\"sh\" data-title=\"sh\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">>>> </span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">my_abs(</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">'A'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">Traceback</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (most </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">recent</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> call</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> last</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">  File</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"&#x3C;stdin>\",</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> line</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 1,</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> in</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> &#x3C;</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">modul</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">e></span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">  File</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"&#x3C;stdin>\",</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> line</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 3,</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> in</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> my_abs</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">TypeError:</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> bad</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> operand</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> type</span></span></code></pre>\n</div><p>错误和异常处理将在后续讲到。</p>\n<h2 id=\"返回多个值\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#返回多个值\"><span>返回多个值</span></a></h2>\n<p>函数可以返回多个值吗? 答案是肯定的。</p>\n<p>比如在游戏中经常需要从一个点移动到另一个点，给出坐标、位移和角度，就可以计算出新的坐标:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" data-title=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">import</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> math</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">def</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> move</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic\">x</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic\"> y</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic\"> step</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic\"> angle</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    nx </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> x </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">+</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> step </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">*</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">math.</span><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\">cos</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(angle)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">ny </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> y </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">-</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> step</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">*</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> math.</span><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\">sin</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(angle)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    return</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> nx, ny</span></span></code></pre>\n</div><p><code v-pre>import math</code> 语句表示导入 <code v-pre>math</code> 包，并允许后续代码引用 <code v-pre>math</code> 包里的 <code v-pre>sin</code>、<code v-pre>cos</code> 等函数。</p>\n<p>然后，我们就可以同时获得返回值:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" data-title=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">>>></span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> x, y </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\"> move</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">100</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">100</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">60</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, math.pi </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">/</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 6</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">>>></span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> print</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(x, y)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">151.96152422706632</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 70.0</span></span></code></pre>\n</div><p>但其实这只是一种假象，Python 函数返回的仍然是单一值:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" data-title=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">>>></span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> r </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\"> move</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">100</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">100</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">60</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, math.pi </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">/</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 6</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">>>></span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> print</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(r)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">151.96152422706632</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">70.0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span></code></pre>\n</div><p>原来返回值是一个 tuple! 但是，在语法上，返回一个 tuple 可以省略括号，而多个变量可以同时接收一个 tuple，按位置赋给对应的值，所以，Python 的函数返回多值其实就是返回一个 tuple，但写起来更方便。</p>\n<h2 id=\"小结\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#小结\"><span>小结</span></a></h2>\n<p>定义函数时，需要确定函数名和参数个数；</p>\n<p>如果有必要，可以先对参数的数据类型做检查；</p>\n<p>函数体内部可以用 <code v-pre>return</code> 随时返回函数结果；</p>\n<p>函数执行完毕也没有 <code v-pre>return</code> 语句时，自动 <code v-pre>return None</code>。</p>\n<p>函数可以同时返回多个值，但其实就是一个 tuple。</p>\n","tagOpen":"<template>","tagClose":"</template>"},"script":null,"scriptSetup":null,"scripts":[],"styles":[],"customBlocks":[]},"content":"\n在 Python 中，定义一个函数要使用 `def` 语句，依次写出函数名、括号、括号中的参数和冒号 `:`，然后，在缩进块中编写函数体，函数的返回值用 `return` 语句返回。\n\n<!-- more -->\n\n我们以自定义一个求绝对值的 `my_abs` 函数为例:\n\n```py\n# -*- coding: utf-8 -*-\n\ndef my_abs(x):\n    if x >= 0:\n        return x\n    else:\n        return -x\n\nprint(my_abs(-99))\n```\n\n请自行测试并调用 `my_abs` 看看返回结果是否正确。\n\n请注意，函数体内部的语句在执行时，一旦执行到 `return` 时，函数就执行完毕，并将结果返回。因此，函数内部通过条件判断和循环可以实现非常复杂的逻辑。\n\n如果没有 `return` 语句，函数执行完毕后也会返回结果，只是结果为 `None`。`return None` 可以简写为 `return`。\n\n在 Python 交互环境中定义函数时，注意 Python 会出现 `...` 的提示。函数定义结束后需要按两次回车重新回到`>>>` 提示符下:\n\n```text\n┌────────────────────────────────────────────────────────┐\n│Command Prompt - python                           - □ x │\n├────────────────────────────────────────────────────────┤\n│>>> def my_abs(x):                                      │\n│...     if x >= 0:                                      │\n│...         return x                                    │\n│...     else:                                           │\n│...         return -x                                   │\n│...                                                     │\n│>>> my_abs(-9)                                          │\n│9                                                       │\n│>>> _                                                   │\n│                                                        │\n│                                                        │\n└────────────────────────────────────────────────────────┘\n```\n\n如果您已经把 `my_abs()` 的函数定义保存为 `abstest.py` 文件了，那么，可以在该文件的当前目录下启动 Python 解释器，用 `from abstest import my_abs` 来导入 `my_abs()` 函数，注意 `abstest` 是文件名(不含 .py 扩展名):\n\n```text\n┌────────────────────────────────────────────────────────┐\n│Command Prompt - python                           - □ x │\n├────────────────────────────────────────────────────────┤\n│>>> from abstest import my_abs                          │\n│>>> my_abs(-9)                                          │\n│9                                                       │\n│>>> _                                                   │\n│                                                        │\n│                                                        │\n│                                                        │\n│                                                        │\n│                                                        │\n│                                                        │\n│                                                        │\n└────────────────────────────────────────────────────────┘\n```\n\n`import` 的用法在后续 [模块](../module/README.md) 一节中会详细介绍。\n\n## 空函数\n\n如果想定义一个什么事也不做的空函数，可以用 pass 语句:\n\n```py\ndef nop():\n    pass\n```\n\npass 语句什么都不做，那有什么用? 实际上 pass 可以用来作为占位符，比如现在还没想好怎么写函数的代码，就可以先放一个 pass，让代码能运行起来。\n\npass 还可以用在其他语句里，比如:\n\n```py\nif age >= 18:\n    pass\n```\n\n缺少了 pass，代码运行就会有语法错误。\n\n## 参数检查\n\n调用函数时，如果参数个数不对，Python 解释器会自动检查出来，并抛出 `TypeError`:\n\n```sh\n>>> my_abs(1, 2)\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nTypeError: my_abs() takes 1 positional argument but 2 were given\n```\n\n但是如果参数类型不对，Python 解释器就无法帮我们检查。试试 `my_abs` 和内置函数 abs 的差别:\n\n```sh\n>>> my_abs('A')\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"<stdin>\", line 2, in my_abs\nTypeError: unorderable types: str() >= int()\n>>> abs('A')\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nTypeError: bad operand type for abs(): 'str'\n```\n\n当传入了不恰当的参数时，内置函数 `abs` 会检查出参数错误，而我们定义的 `my_abs` 没有参数检查，会导致 `if` 语句出错，出错信息和 `abs` 不一样。所以，这个函数定义不够完善。\n\n让我们修改一下 `my_abs` 的定义，对参数类型做检查，只允许整数和浮点数类型的参数。数据类型检查可以用内置函数 `isinstance()` 实现:\n\n```py\ndef my_abs(x):\n    if not isinstance(x, (int, float)):\n        raise TypeError('bad operand type')\n    if x >= 0:\n        return x\n    else:\n        return -x\n```\n\n添加了参数检查后，如果传入错误的参数类型，函数就可以抛出一个错误:\n\n```sh\n>>> my_abs('A')\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"<stdin>\", line 3, in my_abs\nTypeError: bad operand type\n```\n\n错误和异常处理将在后续讲到。\n\n## 返回多个值\n\n函数可以返回多个值吗? 答案是肯定的。\n\n比如在游戏中经常需要从一个点移动到另一个点，给出坐标、位移和角度，就可以计算出新的坐标:\n\n```py\nimport math\n\ndef move(x, y, step, angle=0):\n    nx = x + step *math.cos(angle)\nny = y - step* math.sin(angle)\n    return nx, ny\n```\n\n`import math` 语句表示导入 `math` 包，并允许后续代码引用 `math` 包里的 `sin`、`cos` 等函数。\n\n然后，我们就可以同时获得返回值:\n\n```py\n>>> x, y = move(100, 100, 60, math.pi / 6)\n>>> print(x, y)\n151.96152422706632 70.0\n```\n\n但其实这只是一种假象，Python 函数返回的仍然是单一值:\n\n```py\n>>> r = move(100, 100, 60, math.pi / 6)\n>>> print(r)\n(151.96152422706632, 70.0)\n```\n\n原来返回值是一个 tuple! 但是，在语法上，返回一个 tuple 可以省略括号，而多个变量可以同时接收一个 tuple，按位置赋给对应的值，所以，Python 的函数返回多值其实就是返回一个 tuple，但写起来更方便。\n\n## 小结\n\n定义函数时，需要确定函数名和参数个数；\n\n如果有必要，可以先对参数的数据类型做检查；\n\n函数体内部可以用 `return` 随时返回函数结果；\n\n函数执行完毕也没有 `return` 语句时，自动 `return None`。\n\n函数可以同时返回多个值，但其实就是一个 tuple。\n","excerpt":"","title":"","headers":[{"level":2,"title":"空函数","slug":"空函数","link":"#空函数","children":[]},{"level":2,"title":"参数检查","slug":"参数检查","link":"#参数检查","children":[]},{"level":2,"title":"返回多个值","slug":"返回多个值","link":"#返回多个值","children":[]},{"level":2,"title":"小结","slug":"小结","link":"#小结","children":[]}],"links":[{"raw":"../module/README.md","relative":"code/language/python/module/README.md","absolute":"/code/language/python/module/README.md"}]}}
