{"content":"<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">提示</p>\n<p>此部分在初步学习小程序的时候直接略过即可。</p>\n</div>\n<h2 id=\"背景\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#背景\"><span>背景</span></a></h2>\n<p>有频繁用户交互的效果在小程序上表现是比较卡顿的，例如页面有 2 个元素 A 和 B，用户在 A 上做 <code v-pre>touchmove</code> 手势，要求 B 也跟随移动，<a href=\"https://developers.weixin.qq.com/miniprogram/dev/component/movable-view.html\" target=\"_blank\" rel=\"noopener noreferrer\">movable-view</a> 就是一个典型的例子。一次 <code v-pre>touchmove</code> 事件的响应过程为:</p>\n<ol>\n<li>\n<p>touchmove 事件从视图层(Webview)抛到逻辑层(App Service)</p>\n</li>\n<li>\n<p>逻辑层(App Service)处理 touchmove 事件，再通过 setData 来改变 B 的位置</p>\n</li>\n</ol>\n<p>一次 touchmove 的响应需要经过 2 次的逻辑层和渲染层的通信以及一次渲染，通信的耗时比较大。此外 <code v-pre>setData</code> 渲染也会阻塞其它脚本执行，导致了整个用户交互的动画过程会有延迟。</p>\n<h2 id=\"实现方案\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#实现方案\"><span>实现方案</span></a></h2>\n<p>本方案基本的思路是减少通信的次数，让事件在视图层(Webview)响应。小程序的框架分为视图层(Webview)和逻辑层(App Service)，这样分层的目的是管控，开发者的代码只能运行在逻辑层(App Service)，而这个思路就必须要让开发者的代码运行在视图层(Webview)，如下图所示的流程:</p>\n<figure><img src=\"@source/code/mini-app/guide/view/assets/interative-model.png\" alt=\"流程演示\" tabindex=\"0\" loading=\"lazy\"><figcaption>流程演示</figcaption></figure>\n<p>使用 WXS 函数用来响应小程序事件，目前只能响应内置组件的事件，不支持自定义组件事件。WXS 函数的除了纯逻辑的运算，还可以通过封装好的 <code v-pre>ComponentDescriptor</code> 实例来访问以及设置组件的 class 和样式，对于交互动画，设置 style 和 class 足够了。</p>\n<p>WXS 函数的例子如下:</p>\n<div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">var</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> wxsFunction</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> function</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">event</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">ownerInstance</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  var</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> instance</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\"> ownerInstance</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">selectComponent</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\".classSelector\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">); </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 返回组件的实例</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">  instance</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">setStyle</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">({</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">    \"font-size\"</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"14px\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 支持 rpx</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  });</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">  instance</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">getDataset</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">  instance</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">setClass</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">className</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">  // ...</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  return</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> false</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 不往上冒泡，相当于调用了同时调用了 stopPropagation 和 preventDefault</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">};</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>其中入参 <code v-pre>event</code> 是小程序事件对象基础上多了 <code v-pre>event.instance</code> 来表示触发事件的组件的 <code v-pre>ComponentDescriptor</code> 实例。<code v-pre>ownerInstance</code> 表示的是触发事件的组件所在的组件的 <code v-pre>ComponentDescriptor</code> 实例，如果触发事件的组件是在页面内的，<code v-pre>ownerInstance</code> 表示的是页面实例。</p>\n<h2 id=\"componentdescriptor\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#componentdescriptor\"><span>ComponentDescriptor</span></a></h2>\n<h3 id=\"定义\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#定义\"><span>定义</span></a></h3>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>参数</th>\n<th>描述</th>\n<th>最低版本</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>selectComponent</td>\n<td>selector 对象</td>\n<td>返回组件的 ComponentDescriptor 实例。</td>\n<td></td>\n</tr>\n<tr>\n<td>selectAllComponents</td>\n<td>selector 对象数组</td>\n<td>返回组件的 ComponentDescriptor 实例数组。</td>\n<td></td>\n</tr>\n<tr>\n<td>setStyle</td>\n<td>Object/string</td>\n<td>设置组件样式，支持 rpx。设置的样式优先级比组件 wxml 里面定义的样式高。不能设置最顶层页面的样式。</td>\n<td></td>\n</tr>\n<tr>\n<td>addClass/removeClass/ hasClass</td>\n<td>string</td>\n<td>设置组件的 class。设置的 class 优先级比组件 wxml 里面定义的 class 高。不能设置最顶层页面的 class。</td>\n<td></td>\n</tr>\n<tr>\n<td>getDataset</td>\n<td>无</td>\n<td>返回当前组件/页面的 dataset 对象</td>\n<td></td>\n</tr>\n<tr>\n<td>callMethod</td>\n<td>(funcName:string, args:object)</td>\n<td>调用当前组件/页面在逻辑层(App Service)定义的函数。funcName 表示函数名称，args 表示函数的参数。</td>\n<td></td>\n</tr>\n<tr>\n<td>requestAnimationFrame</td>\n<td>Function</td>\n<td>和原生 requestAnimationFrame 一样。用于设置动画。</td>\n<td></td>\n</tr>\n<tr>\n<td>getState</td>\n<td>无</td>\n<td>返回一个 object 对象，当有局部变量需要存储起来后续使用的时候用这个方法。</td>\n<td></td>\n</tr>\n<tr>\n<td>triggerEvent</td>\n<td>(eventName, detail)</td>\n<td>和组件的 triggerEvent 一致。</td>\n<td></td>\n</tr>\n<tr>\n<td>getComputedStyle</td>\n<td>string[]</td>\n<td>参数与 SelectorQuery 的 computedStyle 一致。</td>\n<td>2.11.2</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"使用方法\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#使用方法\"><span>使用方法</span></a></h3>\n<p>WXML 定义事件:</p>\n<div class=\"language-xml\" data-highlighter=\"shiki\" data-ext=\"xml\" data-title=\"xml\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&#x3C;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">wxs</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> module</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"test\"</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> src</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"./test.wxs\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> /></span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&#x3C;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">view</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> change:prop</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"{{test.propObserver}}\"</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> prop</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"{{propValue}}\"</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> bindtouchmove</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"{{test.touchmove}}\"</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> class</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"movable\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> /></span></span></code></pre>\n</div><p>上面的 <code v-pre>change:prop</code>(属性前面带 <code v-pre>change:</code> 前缀)是在 prop 属性被设置的时候触发 WXS 函数，值必须用 <code v-pre>{{}}</code> 括起来。类似 <code v-pre>Component</code> 定义的 <code v-pre>properties</code> 里面的 <code v-pre>observer</code> 属性，在 <code v-pre>setData({propValue: newValue})</code> 调用之后会触发。</p>\n<div class=\"hint-container warning\">\n<p class=\"hint-container-title\">注意</p>\n<p>WXS 函数必须用 <code v-pre>{{}}</code> 括起来。当 <code v-pre>prop</code> 的值被设置 WXS 函数就会触发，而不只是值发生改变，所以在页面初始化的时候会调用一次 WxsPropObserver 的函数。</p>\n</div>\n<p>WXS 文件 test.wxs 里面定义并导出事件处理函数和属性改变触发的函数:</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">module</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">exports</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">  touchmove</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> function</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">event</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">instance</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">    console</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">log</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"log event\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\">JSON</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">stringify</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">event</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">));</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  },</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">  propObserver</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> function</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">newValue</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">oldValue</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">ownerInstance</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">instance</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">    console</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">log</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"prop observer\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">newValue</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">oldValue</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  },</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">};</span></span></code></pre>\n</div><p>更多示例请 <a href=\"https://developers.weixin.qq.com/s/L1G0Dkmc7G8a\" target=\"_blank\" rel=\"noopener noreferrer\">在开发者工具中预览效果</a></p>\n<h2 id=\"tips\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#tips\"><span>Tips</span></a></h2>\n<ol>\n<li>目前还不支持原生组件的事件、input 和 textarea 组件的 bindinput 事件</li>\n<li>目前在 WXS 函数里面仅支持 <code v-pre>console.log</code> 方式打日志定位问题，注意连续的重复日志会被过滤掉。</li>\n</ol>\n","env":{"base":"/","filePath":"/Users/carson/Desktop/Mister-Hope.github.io-main/src/code/mini-app/guide/view/wxs-event.md","filePathRelative":"code/mini-app/guide/view/wxs-event.md","frontmatter":{"date":"2020-12-18T00:00:00.000Z","title":"WXS 事件","icon":"activity","category":"小程序"},"sfcBlocks":{"template":{"type":"template","content":"<template><div class=\"hint-container tip\">\n<p class=\"hint-container-title\">提示</p>\n<p>此部分在初步学习小程序的时候直接略过即可。</p>\n</div>\n<h2 id=\"背景\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#背景\"><span>背景</span></a></h2>\n<p>有频繁用户交互的效果在小程序上表现是比较卡顿的，例如页面有 2 个元素 A 和 B，用户在 A 上做 <code v-pre>touchmove</code> 手势，要求 B 也跟随移动，<a href=\"https://developers.weixin.qq.com/miniprogram/dev/component/movable-view.html\" target=\"_blank\" rel=\"noopener noreferrer\">movable-view</a> 就是一个典型的例子。一次 <code v-pre>touchmove</code> 事件的响应过程为:</p>\n<ol>\n<li>\n<p>touchmove 事件从视图层(Webview)抛到逻辑层(App Service)</p>\n</li>\n<li>\n<p>逻辑层(App Service)处理 touchmove 事件，再通过 setData 来改变 B 的位置</p>\n</li>\n</ol>\n<p>一次 touchmove 的响应需要经过 2 次的逻辑层和渲染层的通信以及一次渲染，通信的耗时比较大。此外 <code v-pre>setData</code> 渲染也会阻塞其它脚本执行，导致了整个用户交互的动画过程会有延迟。</p>\n<h2 id=\"实现方案\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#实现方案\"><span>实现方案</span></a></h2>\n<p>本方案基本的思路是减少通信的次数，让事件在视图层(Webview)响应。小程序的框架分为视图层(Webview)和逻辑层(App Service)，这样分层的目的是管控，开发者的代码只能运行在逻辑层(App Service)，而这个思路就必须要让开发者的代码运行在视图层(Webview)，如下图所示的流程:</p>\n<figure><img src=\"@source/code/mini-app/guide/view/assets/interative-model.png\" alt=\"流程演示\" tabindex=\"0\" loading=\"lazy\"><figcaption>流程演示</figcaption></figure>\n<p>使用 WXS 函数用来响应小程序事件，目前只能响应内置组件的事件，不支持自定义组件事件。WXS 函数的除了纯逻辑的运算，还可以通过封装好的 <code v-pre>ComponentDescriptor</code> 实例来访问以及设置组件的 class 和样式，对于交互动画，设置 style 和 class 足够了。</p>\n<p>WXS 函数的例子如下:</p>\n<div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">var</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> wxsFunction</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> function</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">event</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">ownerInstance</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  var</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> instance</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\"> ownerInstance</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">selectComponent</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\".classSelector\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">); </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 返回组件的实例</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">  instance</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">setStyle</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">({</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">    \"font-size\"</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"14px\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 支持 rpx</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  });</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">  instance</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">getDataset</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">  instance</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">setClass</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">className</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">  // ...</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  return</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> false</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 不往上冒泡，相当于调用了同时调用了 stopPropagation 和 preventDefault</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">};</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>其中入参 <code v-pre>event</code> 是小程序事件对象基础上多了 <code v-pre>event.instance</code> 来表示触发事件的组件的 <code v-pre>ComponentDescriptor</code> 实例。<code v-pre>ownerInstance</code> 表示的是触发事件的组件所在的组件的 <code v-pre>ComponentDescriptor</code> 实例，如果触发事件的组件是在页面内的，<code v-pre>ownerInstance</code> 表示的是页面实例。</p>\n<h2 id=\"componentdescriptor\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#componentdescriptor\"><span>ComponentDescriptor</span></a></h2>\n<h3 id=\"定义\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#定义\"><span>定义</span></a></h3>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>参数</th>\n<th>描述</th>\n<th>最低版本</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>selectComponent</td>\n<td>selector 对象</td>\n<td>返回组件的 ComponentDescriptor 实例。</td>\n<td></td>\n</tr>\n<tr>\n<td>selectAllComponents</td>\n<td>selector 对象数组</td>\n<td>返回组件的 ComponentDescriptor 实例数组。</td>\n<td></td>\n</tr>\n<tr>\n<td>setStyle</td>\n<td>Object/string</td>\n<td>设置组件样式，支持 rpx。设置的样式优先级比组件 wxml 里面定义的样式高。不能设置最顶层页面的样式。</td>\n<td></td>\n</tr>\n<tr>\n<td>addClass/removeClass/ hasClass</td>\n<td>string</td>\n<td>设置组件的 class。设置的 class 优先级比组件 wxml 里面定义的 class 高。不能设置最顶层页面的 class。</td>\n<td></td>\n</tr>\n<tr>\n<td>getDataset</td>\n<td>无</td>\n<td>返回当前组件/页面的 dataset 对象</td>\n<td></td>\n</tr>\n<tr>\n<td>callMethod</td>\n<td>(funcName:string, args:object)</td>\n<td>调用当前组件/页面在逻辑层(App Service)定义的函数。funcName 表示函数名称，args 表示函数的参数。</td>\n<td></td>\n</tr>\n<tr>\n<td>requestAnimationFrame</td>\n<td>Function</td>\n<td>和原生 requestAnimationFrame 一样。用于设置动画。</td>\n<td></td>\n</tr>\n<tr>\n<td>getState</td>\n<td>无</td>\n<td>返回一个 object 对象，当有局部变量需要存储起来后续使用的时候用这个方法。</td>\n<td></td>\n</tr>\n<tr>\n<td>triggerEvent</td>\n<td>(eventName, detail)</td>\n<td>和组件的 triggerEvent 一致。</td>\n<td></td>\n</tr>\n<tr>\n<td>getComputedStyle</td>\n<td>string[]</td>\n<td>参数与 SelectorQuery 的 computedStyle 一致。</td>\n<td>2.11.2</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"使用方法\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#使用方法\"><span>使用方法</span></a></h3>\n<p>WXML 定义事件:</p>\n<div class=\"language-xml\" data-highlighter=\"shiki\" data-ext=\"xml\" data-title=\"xml\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&#x3C;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">wxs</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> module</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"test\"</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> src</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"./test.wxs\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> /></span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&#x3C;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">view</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> change:prop</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"{{test.propObserver}}\"</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> prop</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"{{propValue}}\"</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> bindtouchmove</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"{{test.touchmove}}\"</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> class</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"movable\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> /></span></span></code></pre>\n</div><p>上面的 <code v-pre>change:prop</code>(属性前面带 <code v-pre>change:</code> 前缀)是在 prop 属性被设置的时候触发 WXS 函数，值必须用 <code v-pre>{{}}</code> 括起来。类似 <code v-pre>Component</code> 定义的 <code v-pre>properties</code> 里面的 <code v-pre>observer</code> 属性，在 <code v-pre>setData({propValue: newValue})</code> 调用之后会触发。</p>\n<div class=\"hint-container warning\">\n<p class=\"hint-container-title\">注意</p>\n<p>WXS 函数必须用 <code v-pre>{{}}</code> 括起来。当 <code v-pre>prop</code> 的值被设置 WXS 函数就会触发，而不只是值发生改变，所以在页面初始化的时候会调用一次 WxsPropObserver 的函数。</p>\n</div>\n<p>WXS 文件 test.wxs 里面定义并导出事件处理函数和属性改变触发的函数:</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">module</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">exports</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">  touchmove</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> function</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">event</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">instance</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">    console</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">log</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"log event\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\">JSON</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">stringify</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">event</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">));</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  },</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">  propObserver</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> function</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">newValue</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">oldValue</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">ownerInstance</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">instance</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">    console</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">log</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"prop observer\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">newValue</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">oldValue</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  },</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">};</span></span></code></pre>\n</div><p>更多示例请 <a href=\"https://developers.weixin.qq.com/s/L1G0Dkmc7G8a\" target=\"_blank\" rel=\"noopener noreferrer\">在开发者工具中预览效果</a></p>\n<h2 id=\"tips\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#tips\"><span>Tips</span></a></h2>\n<ol>\n<li>目前还不支持原生组件的事件、input 和 textarea 组件的 bindinput 事件</li>\n<li>目前在 WXS 函数里面仅支持 <code v-pre>console.log</code> 方式打日志定位问题，注意连续的重复日志会被过滤掉。</li>\n</ol>\n</template>","contentStripped":"<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">提示</p>\n<p>此部分在初步学习小程序的时候直接略过即可。</p>\n</div>\n<h2 id=\"背景\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#背景\"><span>背景</span></a></h2>\n<p>有频繁用户交互的效果在小程序上表现是比较卡顿的，例如页面有 2 个元素 A 和 B，用户在 A 上做 <code v-pre>touchmove</code> 手势，要求 B 也跟随移动，<a href=\"https://developers.weixin.qq.com/miniprogram/dev/component/movable-view.html\" target=\"_blank\" rel=\"noopener noreferrer\">movable-view</a> 就是一个典型的例子。一次 <code v-pre>touchmove</code> 事件的响应过程为:</p>\n<ol>\n<li>\n<p>touchmove 事件从视图层(Webview)抛到逻辑层(App Service)</p>\n</li>\n<li>\n<p>逻辑层(App Service)处理 touchmove 事件，再通过 setData 来改变 B 的位置</p>\n</li>\n</ol>\n<p>一次 touchmove 的响应需要经过 2 次的逻辑层和渲染层的通信以及一次渲染，通信的耗时比较大。此外 <code v-pre>setData</code> 渲染也会阻塞其它脚本执行，导致了整个用户交互的动画过程会有延迟。</p>\n<h2 id=\"实现方案\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#实现方案\"><span>实现方案</span></a></h2>\n<p>本方案基本的思路是减少通信的次数，让事件在视图层(Webview)响应。小程序的框架分为视图层(Webview)和逻辑层(App Service)，这样分层的目的是管控，开发者的代码只能运行在逻辑层(App Service)，而这个思路就必须要让开发者的代码运行在视图层(Webview)，如下图所示的流程:</p>\n<figure><img src=\"@source/code/mini-app/guide/view/assets/interative-model.png\" alt=\"流程演示\" tabindex=\"0\" loading=\"lazy\"><figcaption>流程演示</figcaption></figure>\n<p>使用 WXS 函数用来响应小程序事件，目前只能响应内置组件的事件，不支持自定义组件事件。WXS 函数的除了纯逻辑的运算，还可以通过封装好的 <code v-pre>ComponentDescriptor</code> 实例来访问以及设置组件的 class 和样式，对于交互动画，设置 style 和 class 足够了。</p>\n<p>WXS 函数的例子如下:</p>\n<div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">var</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> wxsFunction</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> function</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">event</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">ownerInstance</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  var</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> instance</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\"> ownerInstance</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">selectComponent</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\".classSelector\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">); </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 返回组件的实例</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">  instance</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">setStyle</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">({</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">    \"font-size\"</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"14px\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 支持 rpx</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  });</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">  instance</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">getDataset</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">  instance</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">setClass</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">className</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">  // ...</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  return</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> false</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 不往上冒泡，相当于调用了同时调用了 stopPropagation 和 preventDefault</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">};</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>其中入参 <code v-pre>event</code> 是小程序事件对象基础上多了 <code v-pre>event.instance</code> 来表示触发事件的组件的 <code v-pre>ComponentDescriptor</code> 实例。<code v-pre>ownerInstance</code> 表示的是触发事件的组件所在的组件的 <code v-pre>ComponentDescriptor</code> 实例，如果触发事件的组件是在页面内的，<code v-pre>ownerInstance</code> 表示的是页面实例。</p>\n<h2 id=\"componentdescriptor\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#componentdescriptor\"><span>ComponentDescriptor</span></a></h2>\n<h3 id=\"定义\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#定义\"><span>定义</span></a></h3>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>参数</th>\n<th>描述</th>\n<th>最低版本</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>selectComponent</td>\n<td>selector 对象</td>\n<td>返回组件的 ComponentDescriptor 实例。</td>\n<td></td>\n</tr>\n<tr>\n<td>selectAllComponents</td>\n<td>selector 对象数组</td>\n<td>返回组件的 ComponentDescriptor 实例数组。</td>\n<td></td>\n</tr>\n<tr>\n<td>setStyle</td>\n<td>Object/string</td>\n<td>设置组件样式，支持 rpx。设置的样式优先级比组件 wxml 里面定义的样式高。不能设置最顶层页面的样式。</td>\n<td></td>\n</tr>\n<tr>\n<td>addClass/removeClass/ hasClass</td>\n<td>string</td>\n<td>设置组件的 class。设置的 class 优先级比组件 wxml 里面定义的 class 高。不能设置最顶层页面的 class。</td>\n<td></td>\n</tr>\n<tr>\n<td>getDataset</td>\n<td>无</td>\n<td>返回当前组件/页面的 dataset 对象</td>\n<td></td>\n</tr>\n<tr>\n<td>callMethod</td>\n<td>(funcName:string, args:object)</td>\n<td>调用当前组件/页面在逻辑层(App Service)定义的函数。funcName 表示函数名称，args 表示函数的参数。</td>\n<td></td>\n</tr>\n<tr>\n<td>requestAnimationFrame</td>\n<td>Function</td>\n<td>和原生 requestAnimationFrame 一样。用于设置动画。</td>\n<td></td>\n</tr>\n<tr>\n<td>getState</td>\n<td>无</td>\n<td>返回一个 object 对象，当有局部变量需要存储起来后续使用的时候用这个方法。</td>\n<td></td>\n</tr>\n<tr>\n<td>triggerEvent</td>\n<td>(eventName, detail)</td>\n<td>和组件的 triggerEvent 一致。</td>\n<td></td>\n</tr>\n<tr>\n<td>getComputedStyle</td>\n<td>string[]</td>\n<td>参数与 SelectorQuery 的 computedStyle 一致。</td>\n<td>2.11.2</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"使用方法\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#使用方法\"><span>使用方法</span></a></h3>\n<p>WXML 定义事件:</p>\n<div class=\"language-xml\" data-highlighter=\"shiki\" data-ext=\"xml\" data-title=\"xml\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&#x3C;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">wxs</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> module</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"test\"</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> src</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"./test.wxs\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> /></span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&#x3C;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">view</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> change:prop</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"{{test.propObserver}}\"</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> prop</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"{{propValue}}\"</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> bindtouchmove</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"{{test.touchmove}}\"</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> class</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"movable\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> /></span></span></code></pre>\n</div><p>上面的 <code v-pre>change:prop</code>(属性前面带 <code v-pre>change:</code> 前缀)是在 prop 属性被设置的时候触发 WXS 函数，值必须用 <code v-pre>{{}}</code> 括起来。类似 <code v-pre>Component</code> 定义的 <code v-pre>properties</code> 里面的 <code v-pre>observer</code> 属性，在 <code v-pre>setData({propValue: newValue})</code> 调用之后会触发。</p>\n<div class=\"hint-container warning\">\n<p class=\"hint-container-title\">注意</p>\n<p>WXS 函数必须用 <code v-pre>{{}}</code> 括起来。当 <code v-pre>prop</code> 的值被设置 WXS 函数就会触发，而不只是值发生改变，所以在页面初始化的时候会调用一次 WxsPropObserver 的函数。</p>\n</div>\n<p>WXS 文件 test.wxs 里面定义并导出事件处理函数和属性改变触发的函数:</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">module</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">exports</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">  touchmove</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> function</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">event</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">instance</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">    console</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">log</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"log event\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\">JSON</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">stringify</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">event</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">));</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  },</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">  propObserver</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> function</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">newValue</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">oldValue</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">ownerInstance</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">instance</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">    console</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">log</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"prop observer\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">newValue</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">oldValue</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  },</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">};</span></span></code></pre>\n</div><p>更多示例请 <a href=\"https://developers.weixin.qq.com/s/L1G0Dkmc7G8a\" target=\"_blank\" rel=\"noopener noreferrer\">在开发者工具中预览效果</a></p>\n<h2 id=\"tips\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#tips\"><span>Tips</span></a></h2>\n<ol>\n<li>目前还不支持原生组件的事件、input 和 textarea 组件的 bindinput 事件</li>\n<li>目前在 WXS 函数里面仅支持 <code v-pre>console.log</code> 方式打日志定位问题，注意连续的重复日志会被过滤掉。</li>\n</ol>\n","tagOpen":"<template>","tagClose":"</template>"},"script":null,"scriptSetup":null,"scripts":[],"styles":[],"customBlocks":[]},"content":"\n::: tip\n\n此部分在初步学习小程序的时候直接略过即可。\n\n:::\n\n## 背景\n\n有频繁用户交互的效果在小程序上表现是比较卡顿的，例如页面有 2 个元素 A 和 B，用户在 A 上做 `touchmove` 手势，要求 B 也跟随移动，[movable-view](https://developers.weixin.qq.com/miniprogram/dev/component/movable-view.html) 就是一个典型的例子。一次 `touchmove` 事件的响应过程为:\n\n1. touchmove 事件从视图层(Webview)抛到逻辑层(App Service)\n\n1. 逻辑层(App Service)处理 touchmove 事件，再通过 setData 来改变 B 的位置\n\n一次 touchmove 的响应需要经过 2 次的逻辑层和渲染层的通信以及一次渲染，通信的耗时比较大。此外 `setData` 渲染也会阻塞其它脚本执行，导致了整个用户交互的动画过程会有延迟。\n\n## 实现方案\n\n本方案基本的思路是减少通信的次数，让事件在视图层(Webview)响应。小程序的框架分为视图层(Webview)和逻辑层(App Service)，这样分层的目的是管控，开发者的代码只能运行在逻辑层(App Service)，而这个思路就必须要让开发者的代码运行在视图层(Webview)，如下图所示的流程:\n\n![流程演示](./assets/interative-model.png)\n\n使用 WXS 函数用来响应小程序事件，目前只能响应内置组件的事件，不支持自定义组件事件。WXS 函数的除了纯逻辑的运算，还可以通过封装好的 `ComponentDescriptor` 实例来访问以及设置组件的 class 和样式，对于交互动画，设置 style 和 class 足够了。\n\nWXS 函数的例子如下:\n\n```js\nvar wxsFunction = function (event, ownerInstance) {\n  var instance = ownerInstance.selectComponent(\".classSelector\"); // 返回组件的实例\n  instance.setStyle({\n    \"font-size\": \"14px\", // 支持 rpx\n  });\n  instance.getDataset();\n  instance.setClass(className);\n  // ...\n  return false; // 不往上冒泡，相当于调用了同时调用了 stopPropagation 和 preventDefault\n};\n```\n\n其中入参 `event` 是小程序事件对象基础上多了 `event.instance` 来表示触发事件的组件的 `ComponentDescriptor` 实例。`ownerInstance` 表示的是触发事件的组件所在的组件的 `ComponentDescriptor` 实例，如果触发事件的组件是在页面内的，`ownerInstance` 表示的是页面实例。\n\n## ComponentDescriptor\n\n### 定义\n\n| 方法                           | 参数                           | 描述                                                                                               | 最低版本 |\n| ------------------------------ | ------------------------------ | -------------------------------------------------------------------------------------------------- | -------- |\n| selectComponent                | selector 对象                  | 返回组件的 ComponentDescriptor 实例。                                                              |          |\n| selectAllComponents            | selector 对象数组              | 返回组件的 ComponentDescriptor 实例数组。                                                          |          |\n| setStyle                       | Object/string                  | 设置组件样式，支持 rpx。设置的样式优先级比组件 wxml 里面定义的样式高。不能设置最顶层页面的样式。   |          |\n| addClass/removeClass/ hasClass | string                         | 设置组件的 class。设置的 class 优先级比组件 wxml 里面定义的 class 高。不能设置最顶层页面的 class。 |          |\n| getDataset                     | 无                             | 返回当前组件/页面的 dataset 对象                                                                   |          |\n| callMethod                     | (funcName:string, args:object) | 调用当前组件/页面在逻辑层(App Service)定义的函数。funcName 表示函数名称，args 表示函数的参数。     |          |\n| requestAnimationFrame          | Function                       | 和原生 requestAnimationFrame 一样。用于设置动画。                                                  |          |\n| getState                       | 无                             | 返回一个 object 对象，当有局部变量需要存储起来后续使用的时候用这个方法。                           |          |\n| triggerEvent                   | (eventName, detail)            | 和组件的 triggerEvent 一致。                                                                       |          |\n| getComputedStyle               | string[]                       | 参数与 SelectorQuery 的 computedStyle 一致。                                                       | 2.11.2   |\n\n### 使用方法\n\nWXML 定义事件:\n\n```xml\n<wxs module=\"test\" src=\"./test.wxs\" />\n<view change:prop=\"{{test.propObserver}}\" prop=\"{{propValue}}\" bindtouchmove=\"{{test.touchmove}}\" class=\"movable\" />\n```\n\n上面的 `change:prop`(属性前面带 `change:` 前缀)是在 prop 属性被设置的时候触发 WXS 函数，值必须用 `{{}}` 括起来。类似 `Component` 定义的 `properties` 里面的 `observer` 属性，在 `setData({propValue: newValue})` 调用之后会触发。\n\n::: warning\n\nWXS 函数必须用 `{{}}` 括起来。当 `prop` 的值被设置 WXS 函数就会触发，而不只是值发生改变，所以在页面初始化的时候会调用一次 WxsPropObserver 的函数。\n\n:::\n\nWXS 文件 test.wxs 里面定义并导出事件处理函数和属性改变触发的函数:\n\n```js\nmodule.exports = {\n  touchmove: function (event, instance) {\n    console.log(\"log event\", JSON.stringify(event));\n  },\n  propObserver: function (newValue, oldValue, ownerInstance, instance) {\n    console.log(\"prop observer\", newValue, oldValue);\n  },\n};\n```\n\n更多示例请 [在开发者工具中预览效果](https://developers.weixin.qq.com/s/L1G0Dkmc7G8a)\n\n## Tips\n\n1. 目前还不支持原生组件的事件、input 和 textarea 组件的 bindinput 事件\n1. 目前在 WXS 函数里面仅支持 `console.log` 方式打日志定位问题，注意连续的重复日志会被过滤掉。\n","excerpt":"","title":"","headers":[{"level":2,"title":"背景","slug":"背景","link":"#背景","children":[]},{"level":2,"title":"实现方案","slug":"实现方案","link":"#实现方案","children":[]},{"level":2,"title":"ComponentDescriptor","slug":"componentdescriptor","link":"#componentdescriptor","children":[{"level":3,"title":"定义","slug":"定义","link":"#定义","children":[]},{"level":3,"title":"使用方法","slug":"使用方法","link":"#使用方法","children":[]}]},{"level":2,"title":"Tips","slug":"tips","link":"#tips","children":[]}]}}
