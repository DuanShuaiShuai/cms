{"content":"<p>在前面的所有章节中，我们编写的 JavaScript 代码都是在浏览器中运行的，因此，我们可以直接在浏览器中敲代码，然后直接运行。</p>\n<p>从本章开始，我们编写的 JavaScript 代码将不能在浏览器环境中执行了，而是在 Node.js 环境中执行，因此，JavaScript 代码将直接在您的计算机上以命令行的方式运行，所以，我们要先选择一个文本编辑器来编写 JavaScript 代码，并且把它保存到本地硬盘的某个目录，才能够执行。</p>\n<!-- more -->\n<p>那么问题来了: 文本编辑器到底哪家强?</p>\n<div class=\"hint-container warning\">\n<p class=\"hint-container-title\">注意</p>\n<p>千万不要使用 Windows 自带的记事本编辑任何文本文件。</p>\n<ul>\n<li>具体详情请见 <RouteLink to=\"/code/windows/notepad.html\">记事本遗留问题</RouteLink></li>\n</ul>\n</div>\n<p>如果您的电脑上已经安装了<strong>Sublime Text</strong>，或者<strong>Notepad++</strong>，也可以用来编写 JavaScript 代码，注意用 UTF-8 格式保存。</p>\n<p>最方便的，当然是 Mr.Hope 强力安利的 VS Code 了。</p>\n<p>输入以下代码:</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"use strict\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">console</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">log</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"Hello, world.\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span></code></pre>\n</div><p>第一行总是写上 <code v-pre>'use strict';</code> 是因为我们总是以严格模式运行 JavaScript 代码，避免各种潜在陷阱。</p>\n<p>然后，选择一个目录，例如 <code v-pre>C:\\Workspace</code>，把文件保存为 <code v-pre>hello.js</code>，就可以打开命令行窗口，把当前目录切换到 hello.js 所在目录，然后输入以下命令运行这个程序了:</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">C:\\Workspace</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">></span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">node</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> hello.js</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">Hello,</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> world.</span></span></code></pre>\n</div><p>也可以保存为别的名字，比如 <code v-pre>first.js</code>，但是必须要以 <code v-pre>.js</code> 结尾。此外，文件名只能是英文字母、数字和下划线的组合。</p>\n<p>如果当前目录下没有 <code v-pre>hello.js</code> 这个文件，运行 <code v-pre>node hello.js</code> 就会报错:</p>\n<div class=\"language-sh line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"sh\" data-title=\"sh\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">C:\\Workspace</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">></span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">node</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> hello.js</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">module.js:338</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">    throw</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> err</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">          ^</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">Error:</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> Cannot</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> find</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> module</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 'C:\\Workspace\\hello.js'</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">    at</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> Function.Module._resolveFilename</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">    at</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> Function.Module._load</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">    at</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> Function.Module.runMain</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">    at</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> startup</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">    at</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> node.js</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>报错的意思就是，没有找到 <code v-pre>hello.js</code> 这个文件，因为文件不存在。这个时候，就要检查一下当前目录下是否有这个文件了。</p>\n<h2 id=\"命令行模式和-node-js-交互模式\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#命令行模式和-node-js-交互模式\"><span>命令行模式和 Node.js 交互模式</span></a></h2>\n<p>请注意区分命令行模式和 Node.js 交互模式。</p>\n<p>看到类似 <code v-pre>C:\\&gt;</code> 是在 Windows 提供的命令行模式:</p>\n<figure><img src=\"@source/code/node-js/assets/run-node-hello.png\" alt=\"run-node-hello\" tabindex=\"0\" loading=\"lazy\"><figcaption>run-node-hello</figcaption></figure>\n<p>在命令行模式下，可以执行 Node.js 进入 Node.js 交互式环境，也可以执行 Node.js <code v-pre>hello.js</code> 运行一个 <code v-pre>.js</code> 文件。</p>\n<p>看到<code v-pre>&gt;</code> 是在 Node.js 交互式环境下:</p>\n<figure><img src=\"@source/code/node-js/assets/node-interactive-env.png\" alt=\"node-interactive-env\" tabindex=\"0\" loading=\"lazy\"><figcaption>node-interactive-env</figcaption></figure>\n<p>在 Node.js 交互式环境下，我们可以输入 JavaScript 代码并立刻执行。</p>\n<p>此外，在命令行模式运行.js 文件和在 Node.js 交互式环境下直接运行 JavaScript 代码有所不同。Node.js 交互式环境会把每一行 JavaScript 代码的结果自动打印出来，但是，直接运行 JavaScript 文件却不会。</p>\n<p>例如，在 Node.js 交互式环境下，输入:</p>\n<div class=\"language-sh\" data-highlighter=\"shiki\" data-ext=\"sh\" data-title=\"sh\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">> 100 + 200 + 300;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">600</span></span></code></pre>\n</div><p>直接可以看到结果 600。</p>\n<p>但是，写一个 <code v-pre>calc.js</code> 的文件，内容如下:</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">100</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> +</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 200</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> +</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 300</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span></code></pre>\n</div><p>然后在命令行模式下执行:</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">C:\\Workspace</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">></span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">node</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> calc.js</span></span></code></pre>\n</div><p>发现什么输出都没有。</p>\n<p>这是正常的。想要输出结果，必须自己用 <code v-pre>console.log()</code> 打印出来。把 <code v-pre>calc.js</code> 改造一下:</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">console</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">log</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">100</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> +</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 200</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> +</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 300</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span></code></pre>\n</div><p>再执行，就可以看到结果:</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">C:\\Workspace</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">></span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">node</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> calc.js</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">600</span></span></code></pre>\n</div><h2 id=\"使用严格模式\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#使用严格模式\"><span>使用严格模式</span></a></h2>\n<p>如果在 JavaScript 文件开头写上 <code v-pre>'use strict';</code>，那么 Node.js 在执行该 JavaScript 时将使用严格模式。但是，在服务器环境下，如果有很多 JavaScript 文件，每个文件都写上 <code v-pre>'use strict';</code> 很麻烦。我们可以给 Node.js 传递一个参数，让 Node.js 直接为所有 js 文件开启严格模式:</p>\n<div class=\"language-sh\" data-highlighter=\"shiki\" data-ext=\"sh\" data-title=\"sh\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">node</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> --use_strict</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> calc.js</span></span></code></pre>\n</div><p>后续代码，如无特殊说明，我们都会直接给 Node.js 传递 <code v-pre>--use_strict</code> 参数来开启严格模式。</p>\n<h2 id=\"小结\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#小结\"><span>小结</span></a></h2>\n<p>用文本编辑器写 JavaScript 程序，然后保存为后缀为 <code v-pre>.js</code> 的文件，就可以用 Node.js 直接运行这个程序了。</p>\n<p>Node.js 的交互模式和直接运行 <code v-pre>.js</code> 文件有什么区别呢?</p>\n<p>直接输入 Node.js 进入交互模式，相当于启动了 Node.js 解释器，但是等待您一行一行地输入源代码，每输入一行就执行一行。</p>\n<p>直接运行 <code v-pre>node hello.js</code> 文件相当于启动了 Node.js 解释器，然后一次性把 <code v-pre>hello.js</code> 文件的源代码给执行了，您是没有机会以交互的方式输入源代码的。</p>\n<p>在编写 JavaScript 代码的时候，完全可以一边在文本编辑器里写代码，一边开一个 Node.js 交互式命令窗口，在写代码的过程中，把部分代码粘到命令行去验证，事半功倍! 前提是得有个 27 寸的超大显示器!</p>\n","env":{"base":"/","filePath":"/Users/carson/Desktop/Mister-Hope.github.io-main/src/code/node-js/program.md","filePathRelative":"code/node-js/program.md","frontmatter":{"date":"2020-12-27T00:00:00.000Z","title":"第一个 Node 程序","icon":"shell","category":"Node.js","tag":["Node.js","软件"]},"sfcBlocks":{"template":{"type":"template","content":"<template><p>在前面的所有章节中，我们编写的 JavaScript 代码都是在浏览器中运行的，因此，我们可以直接在浏览器中敲代码，然后直接运行。</p>\n<p>从本章开始，我们编写的 JavaScript 代码将不能在浏览器环境中执行了，而是在 Node.js 环境中执行，因此，JavaScript 代码将直接在您的计算机上以命令行的方式运行，所以，我们要先选择一个文本编辑器来编写 JavaScript 代码，并且把它保存到本地硬盘的某个目录，才能够执行。</p>\n<!-- more -->\n<p>那么问题来了: 文本编辑器到底哪家强?</p>\n<div class=\"hint-container warning\">\n<p class=\"hint-container-title\">注意</p>\n<p>千万不要使用 Windows 自带的记事本编辑任何文本文件。</p>\n<ul>\n<li>具体详情请见 <RouteLink to=\"/code/windows/notepad.html\">记事本遗留问题</RouteLink></li>\n</ul>\n</div>\n<p>如果您的电脑上已经安装了<strong>Sublime Text</strong>，或者<strong>Notepad++</strong>，也可以用来编写 JavaScript 代码，注意用 UTF-8 格式保存。</p>\n<p>最方便的，当然是 Mr.Hope 强力安利的 VS Code 了。</p>\n<p>输入以下代码:</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"use strict\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">console</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">log</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"Hello, world.\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span></code></pre>\n</div><p>第一行总是写上 <code v-pre>'use strict';</code> 是因为我们总是以严格模式运行 JavaScript 代码，避免各种潜在陷阱。</p>\n<p>然后，选择一个目录，例如 <code v-pre>C:\\Workspace</code>，把文件保存为 <code v-pre>hello.js</code>，就可以打开命令行窗口，把当前目录切换到 hello.js 所在目录，然后输入以下命令运行这个程序了:</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">C:\\Workspace</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">></span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">node</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> hello.js</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">Hello,</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> world.</span></span></code></pre>\n</div><p>也可以保存为别的名字，比如 <code v-pre>first.js</code>，但是必须要以 <code v-pre>.js</code> 结尾。此外，文件名只能是英文字母、数字和下划线的组合。</p>\n<p>如果当前目录下没有 <code v-pre>hello.js</code> 这个文件，运行 <code v-pre>node hello.js</code> 就会报错:</p>\n<div class=\"language-sh line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"sh\" data-title=\"sh\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">C:\\Workspace</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">></span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">node</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> hello.js</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">module.js:338</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">    throw</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> err</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">          ^</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">Error:</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> Cannot</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> find</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> module</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 'C:\\Workspace\\hello.js'</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">    at</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> Function.Module._resolveFilename</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">    at</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> Function.Module._load</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">    at</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> Function.Module.runMain</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">    at</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> startup</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">    at</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> node.js</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>报错的意思就是，没有找到 <code v-pre>hello.js</code> 这个文件，因为文件不存在。这个时候，就要检查一下当前目录下是否有这个文件了。</p>\n<h2 id=\"命令行模式和-node-js-交互模式\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#命令行模式和-node-js-交互模式\"><span>命令行模式和 Node.js 交互模式</span></a></h2>\n<p>请注意区分命令行模式和 Node.js 交互模式。</p>\n<p>看到类似 <code v-pre>C:\\&gt;</code> 是在 Windows 提供的命令行模式:</p>\n<figure><img src=\"@source/code/node-js/assets/run-node-hello.png\" alt=\"run-node-hello\" tabindex=\"0\" loading=\"lazy\"><figcaption>run-node-hello</figcaption></figure>\n<p>在命令行模式下，可以执行 Node.js 进入 Node.js 交互式环境，也可以执行 Node.js <code v-pre>hello.js</code> 运行一个 <code v-pre>.js</code> 文件。</p>\n<p>看到<code v-pre>&gt;</code> 是在 Node.js 交互式环境下:</p>\n<figure><img src=\"@source/code/node-js/assets/node-interactive-env.png\" alt=\"node-interactive-env\" tabindex=\"0\" loading=\"lazy\"><figcaption>node-interactive-env</figcaption></figure>\n<p>在 Node.js 交互式环境下，我们可以输入 JavaScript 代码并立刻执行。</p>\n<p>此外，在命令行模式运行.js 文件和在 Node.js 交互式环境下直接运行 JavaScript 代码有所不同。Node.js 交互式环境会把每一行 JavaScript 代码的结果自动打印出来，但是，直接运行 JavaScript 文件却不会。</p>\n<p>例如，在 Node.js 交互式环境下，输入:</p>\n<div class=\"language-sh\" data-highlighter=\"shiki\" data-ext=\"sh\" data-title=\"sh\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">> 100 + 200 + 300;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">600</span></span></code></pre>\n</div><p>直接可以看到结果 600。</p>\n<p>但是，写一个 <code v-pre>calc.js</code> 的文件，内容如下:</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">100</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> +</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 200</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> +</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 300</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span></code></pre>\n</div><p>然后在命令行模式下执行:</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">C:\\Workspace</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">></span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">node</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> calc.js</span></span></code></pre>\n</div><p>发现什么输出都没有。</p>\n<p>这是正常的。想要输出结果，必须自己用 <code v-pre>console.log()</code> 打印出来。把 <code v-pre>calc.js</code> 改造一下:</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">console</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">log</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">100</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> +</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 200</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> +</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 300</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span></code></pre>\n</div><p>再执行，就可以看到结果:</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">C:\\Workspace</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">></span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">node</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> calc.js</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">600</span></span></code></pre>\n</div><h2 id=\"使用严格模式\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#使用严格模式\"><span>使用严格模式</span></a></h2>\n<p>如果在 JavaScript 文件开头写上 <code v-pre>'use strict';</code>，那么 Node.js 在执行该 JavaScript 时将使用严格模式。但是，在服务器环境下，如果有很多 JavaScript 文件，每个文件都写上 <code v-pre>'use strict';</code> 很麻烦。我们可以给 Node.js 传递一个参数，让 Node.js 直接为所有 js 文件开启严格模式:</p>\n<div class=\"language-sh\" data-highlighter=\"shiki\" data-ext=\"sh\" data-title=\"sh\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">node</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> --use_strict</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> calc.js</span></span></code></pre>\n</div><p>后续代码，如无特殊说明，我们都会直接给 Node.js 传递 <code v-pre>--use_strict</code> 参数来开启严格模式。</p>\n<h2 id=\"小结\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#小结\"><span>小结</span></a></h2>\n<p>用文本编辑器写 JavaScript 程序，然后保存为后缀为 <code v-pre>.js</code> 的文件，就可以用 Node.js 直接运行这个程序了。</p>\n<p>Node.js 的交互模式和直接运行 <code v-pre>.js</code> 文件有什么区别呢?</p>\n<p>直接输入 Node.js 进入交互模式，相当于启动了 Node.js 解释器，但是等待您一行一行地输入源代码，每输入一行就执行一行。</p>\n<p>直接运行 <code v-pre>node hello.js</code> 文件相当于启动了 Node.js 解释器，然后一次性把 <code v-pre>hello.js</code> 文件的源代码给执行了，您是没有机会以交互的方式输入源代码的。</p>\n<p>在编写 JavaScript 代码的时候，完全可以一边在文本编辑器里写代码，一边开一个 Node.js 交互式命令窗口，在写代码的过程中，把部分代码粘到命令行去验证，事半功倍! 前提是得有个 27 寸的超大显示器!</p>\n</template>","contentStripped":"<p>在前面的所有章节中，我们编写的 JavaScript 代码都是在浏览器中运行的，因此，我们可以直接在浏览器中敲代码，然后直接运行。</p>\n<p>从本章开始，我们编写的 JavaScript 代码将不能在浏览器环境中执行了，而是在 Node.js 环境中执行，因此，JavaScript 代码将直接在您的计算机上以命令行的方式运行，所以，我们要先选择一个文本编辑器来编写 JavaScript 代码，并且把它保存到本地硬盘的某个目录，才能够执行。</p>\n<!-- more -->\n<p>那么问题来了: 文本编辑器到底哪家强?</p>\n<div class=\"hint-container warning\">\n<p class=\"hint-container-title\">注意</p>\n<p>千万不要使用 Windows 自带的记事本编辑任何文本文件。</p>\n<ul>\n<li>具体详情请见 <RouteLink to=\"/code/windows/notepad.html\">记事本遗留问题</RouteLink></li>\n</ul>\n</div>\n<p>如果您的电脑上已经安装了<strong>Sublime Text</strong>，或者<strong>Notepad++</strong>，也可以用来编写 JavaScript 代码，注意用 UTF-8 格式保存。</p>\n<p>最方便的，当然是 Mr.Hope 强力安利的 VS Code 了。</p>\n<p>输入以下代码:</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"use strict\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">console</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">log</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"Hello, world.\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span></code></pre>\n</div><p>第一行总是写上 <code v-pre>'use strict';</code> 是因为我们总是以严格模式运行 JavaScript 代码，避免各种潜在陷阱。</p>\n<p>然后，选择一个目录，例如 <code v-pre>C:\\Workspace</code>，把文件保存为 <code v-pre>hello.js</code>，就可以打开命令行窗口，把当前目录切换到 hello.js 所在目录，然后输入以下命令运行这个程序了:</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">C:\\Workspace</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">></span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">node</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> hello.js</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">Hello,</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> world.</span></span></code></pre>\n</div><p>也可以保存为别的名字，比如 <code v-pre>first.js</code>，但是必须要以 <code v-pre>.js</code> 结尾。此外，文件名只能是英文字母、数字和下划线的组合。</p>\n<p>如果当前目录下没有 <code v-pre>hello.js</code> 这个文件，运行 <code v-pre>node hello.js</code> 就会报错:</p>\n<div class=\"language-sh line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"sh\" data-title=\"sh\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">C:\\Workspace</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">></span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">node</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> hello.js</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">module.js:338</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">    throw</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> err</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">          ^</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">Error:</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> Cannot</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> find</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> module</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 'C:\\Workspace\\hello.js'</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">    at</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> Function.Module._resolveFilename</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">    at</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> Function.Module._load</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">    at</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> Function.Module.runMain</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">    at</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> startup</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">    at</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> node.js</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>报错的意思就是，没有找到 <code v-pre>hello.js</code> 这个文件，因为文件不存在。这个时候，就要检查一下当前目录下是否有这个文件了。</p>\n<h2 id=\"命令行模式和-node-js-交互模式\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#命令行模式和-node-js-交互模式\"><span>命令行模式和 Node.js 交互模式</span></a></h2>\n<p>请注意区分命令行模式和 Node.js 交互模式。</p>\n<p>看到类似 <code v-pre>C:\\&gt;</code> 是在 Windows 提供的命令行模式:</p>\n<figure><img src=\"@source/code/node-js/assets/run-node-hello.png\" alt=\"run-node-hello\" tabindex=\"0\" loading=\"lazy\"><figcaption>run-node-hello</figcaption></figure>\n<p>在命令行模式下，可以执行 Node.js 进入 Node.js 交互式环境，也可以执行 Node.js <code v-pre>hello.js</code> 运行一个 <code v-pre>.js</code> 文件。</p>\n<p>看到<code v-pre>&gt;</code> 是在 Node.js 交互式环境下:</p>\n<figure><img src=\"@source/code/node-js/assets/node-interactive-env.png\" alt=\"node-interactive-env\" tabindex=\"0\" loading=\"lazy\"><figcaption>node-interactive-env</figcaption></figure>\n<p>在 Node.js 交互式环境下，我们可以输入 JavaScript 代码并立刻执行。</p>\n<p>此外，在命令行模式运行.js 文件和在 Node.js 交互式环境下直接运行 JavaScript 代码有所不同。Node.js 交互式环境会把每一行 JavaScript 代码的结果自动打印出来，但是，直接运行 JavaScript 文件却不会。</p>\n<p>例如，在 Node.js 交互式环境下，输入:</p>\n<div class=\"language-sh\" data-highlighter=\"shiki\" data-ext=\"sh\" data-title=\"sh\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">> 100 + 200 + 300;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">600</span></span></code></pre>\n</div><p>直接可以看到结果 600。</p>\n<p>但是，写一个 <code v-pre>calc.js</code> 的文件，内容如下:</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">100</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> +</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 200</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> +</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 300</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span></code></pre>\n</div><p>然后在命令行模式下执行:</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">C:\\Workspace</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">></span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">node</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> calc.js</span></span></code></pre>\n</div><p>发现什么输出都没有。</p>\n<p>这是正常的。想要输出结果，必须自己用 <code v-pre>console.log()</code> 打印出来。把 <code v-pre>calc.js</code> 改造一下:</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">console</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">log</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">100</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> +</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 200</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> +</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 300</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span></code></pre>\n</div><p>再执行，就可以看到结果:</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" data-title=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">C:\\Workspace</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">></span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">node</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> calc.js</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">600</span></span></code></pre>\n</div><h2 id=\"使用严格模式\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#使用严格模式\"><span>使用严格模式</span></a></h2>\n<p>如果在 JavaScript 文件开头写上 <code v-pre>'use strict';</code>，那么 Node.js 在执行该 JavaScript 时将使用严格模式。但是，在服务器环境下，如果有很多 JavaScript 文件，每个文件都写上 <code v-pre>'use strict';</code> 很麻烦。我们可以给 Node.js 传递一个参数，让 Node.js 直接为所有 js 文件开启严格模式:</p>\n<div class=\"language-sh\" data-highlighter=\"shiki\" data-ext=\"sh\" data-title=\"sh\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">node</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> --use_strict</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> calc.js</span></span></code></pre>\n</div><p>后续代码，如无特殊说明，我们都会直接给 Node.js 传递 <code v-pre>--use_strict</code> 参数来开启严格模式。</p>\n<h2 id=\"小结\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#小结\"><span>小结</span></a></h2>\n<p>用文本编辑器写 JavaScript 程序，然后保存为后缀为 <code v-pre>.js</code> 的文件，就可以用 Node.js 直接运行这个程序了。</p>\n<p>Node.js 的交互模式和直接运行 <code v-pre>.js</code> 文件有什么区别呢?</p>\n<p>直接输入 Node.js 进入交互模式，相当于启动了 Node.js 解释器，但是等待您一行一行地输入源代码，每输入一行就执行一行。</p>\n<p>直接运行 <code v-pre>node hello.js</code> 文件相当于启动了 Node.js 解释器，然后一次性把 <code v-pre>hello.js</code> 文件的源代码给执行了，您是没有机会以交互的方式输入源代码的。</p>\n<p>在编写 JavaScript 代码的时候，完全可以一边在文本编辑器里写代码，一边开一个 Node.js 交互式命令窗口，在写代码的过程中，把部分代码粘到命令行去验证，事半功倍! 前提是得有个 27 寸的超大显示器!</p>\n","tagOpen":"<template>","tagClose":"</template>"},"script":null,"scriptSetup":null,"scripts":[],"styles":[],"customBlocks":[]},"content":"\n在前面的所有章节中，我们编写的 JavaScript 代码都是在浏览器中运行的，因此，我们可以直接在浏览器中敲代码，然后直接运行。\n\n从本章开始，我们编写的 JavaScript 代码将不能在浏览器环境中执行了，而是在 Node.js 环境中执行，因此，JavaScript 代码将直接在您的计算机上以命令行的方式运行，所以，我们要先选择一个文本编辑器来编写 JavaScript 代码，并且把它保存到本地硬盘的某个目录，才能够执行。\n\n<!-- more -->\n\n那么问题来了: 文本编辑器到底哪家强?\n\n::: warning\n\n千万不要使用 Windows 自带的记事本编辑任何文本文件。\n\n- 具体详情请见 [记事本遗留问题](../windows/notepad.md)\n\n:::\n\n如果您的电脑上已经安装了**Sublime Text**，或者**Notepad++**，也可以用来编写 JavaScript 代码，注意用 UTF-8 格式保存。\n\n最方便的，当然是 Mr.Hope 强力安利的 VS Code 了。\n\n输入以下代码:\n\n```js\n\"use strict\";\n\nconsole.log(\"Hello, world.\");\n```\n\n第一行总是写上 `'use strict';` 是因为我们总是以严格模式运行 JavaScript 代码，避免各种潜在陷阱。\n\n然后，选择一个目录，例如 `C:\\Workspace`，把文件保存为 `hello.js`，就可以打开命令行窗口，把当前目录切换到 hello.js 所在目录，然后输入以下命令运行这个程序了:\n\n```bash\nC:\\Workspace>node hello.js\nHello, world.\n```\n\n也可以保存为别的名字，比如 `first.js`，但是必须要以 `.js` 结尾。此外，文件名只能是英文字母、数字和下划线的组合。\n\n如果当前目录下没有 `hello.js` 这个文件，运行 `node hello.js` 就会报错:\n\n```sh\nC:\\Workspace>node hello.js\nmodule.js:338\n    throw err;\n          ^\nError: Cannot find module 'C:\\Workspace\\hello.js'\n    at Function.Module._resolveFilename\n    at Function.Module._load\n    at Function.Module.runMain\n    at startup\n    at node.js\n```\n\n报错的意思就是，没有找到 `hello.js` 这个文件，因为文件不存在。这个时候，就要检查一下当前目录下是否有这个文件了。\n\n## 命令行模式和 Node.js 交互模式\n\n请注意区分命令行模式和 Node.js 交互模式。\n\n看到类似 `C:\\>` 是在 Windows 提供的命令行模式:\n\n![run-node-hello](./assets/run-node-hello.png)\n\n在命令行模式下，可以执行 Node.js 进入 Node.js 交互式环境，也可以执行 Node.js `hello.js` 运行一个 `.js` 文件。\n\n看到`>` 是在 Node.js 交互式环境下:\n\n![node-interactive-env](./assets/node-interactive-env.png)\n\n在 Node.js 交互式环境下，我们可以输入 JavaScript 代码并立刻执行。\n\n此外，在命令行模式运行.js 文件和在 Node.js 交互式环境下直接运行 JavaScript 代码有所不同。Node.js 交互式环境会把每一行 JavaScript 代码的结果自动打印出来，但是，直接运行 JavaScript 文件却不会。\n\n例如，在 Node.js 交互式环境下，输入:\n\n```sh\n> 100 + 200 + 300;\n600\n```\n\n直接可以看到结果 600。\n\n但是，写一个 `calc.js` 的文件，内容如下:\n\n```js\n100 + 200 + 300;\n```\n\n然后在命令行模式下执行:\n\n```bash\nC:\\Workspace>node calc.js\n```\n\n发现什么输出都没有。\n\n这是正常的。想要输出结果，必须自己用 `console.log()` 打印出来。把 `calc.js` 改造一下:\n\n```js\nconsole.log(100 + 200 + 300);\n```\n\n再执行，就可以看到结果:\n\n```bash\nC:\\Workspace>node calc.js\n600\n```\n\n## 使用严格模式\n\n如果在 JavaScript 文件开头写上 `'use strict';`，那么 Node.js 在执行该 JavaScript 时将使用严格模式。但是，在服务器环境下，如果有很多 JavaScript 文件，每个文件都写上 `'use strict';` 很麻烦。我们可以给 Node.js 传递一个参数，让 Node.js 直接为所有 js 文件开启严格模式:\n\n```sh\nnode --use_strict calc.js\n```\n\n后续代码，如无特殊说明，我们都会直接给 Node.js 传递 `--use_strict` 参数来开启严格模式。\n\n## 小结\n\n用文本编辑器写 JavaScript 程序，然后保存为后缀为 `.js` 的文件，就可以用 Node.js 直接运行这个程序了。\n\nNode.js 的交互模式和直接运行 `.js` 文件有什么区别呢?\n\n直接输入 Node.js 进入交互模式，相当于启动了 Node.js 解释器，但是等待您一行一行地输入源代码，每输入一行就执行一行。\n\n直接运行 `node hello.js` 文件相当于启动了 Node.js 解释器，然后一次性把 `hello.js` 文件的源代码给执行了，您是没有机会以交互的方式输入源代码的。\n\n在编写 JavaScript 代码的时候，完全可以一边在文本编辑器里写代码，一边开一个 Node.js 交互式命令窗口，在写代码的过程中，把部分代码粘到命令行去验证，事半功倍! 前提是得有个 27 寸的超大显示器!\n","excerpt":"","title":"","headers":[{"level":2,"title":"命令行模式和 Node.js 交互模式","slug":"命令行模式和-node-js-交互模式","link":"#命令行模式和-node-js-交互模式","children":[]},{"level":2,"title":"使用严格模式","slug":"使用严格模式","link":"#使用严格模式","children":[]},{"level":2,"title":"小结","slug":"小结","link":"#小结","children":[]}],"links":[{"raw":"../windows/notepad.md","relative":"code/windows/notepad.md","absolute":"/code/windows/notepad.md"}]}}
