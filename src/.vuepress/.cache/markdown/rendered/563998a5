{"content":"<p>在任何一个阶段，您都有可能想要撤消某些操作。这里，我们将会学习几个撤消您所做修改的基本工具。注\n意，有些撤消操作是不可逆的。这是在使用 Git 的过程中，会因为操作失误而导致之前的工作丢失的少有的几个\n地方之一。</p>\n<p>有时候我们提交完了才发现漏掉了几个文件没有添加，或者提交信息写错了。此时，可以运行带有 <code v-pre>--amend</code> 选\n项的提交命令来重新提交:</p>\n<div class=\"language-sh\" data-highlighter=\"shiki\" data-ext=\"sh\" data-title=\"sh\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">git</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> commit</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> --amend</span></span></code></pre>\n</div><p>这个命令会将暂存区中的文件提交。如果自上次提交以来您还未做任何修改(例如，在上次提交后马上执行了\n此命令)， 那么快照会保持不变，而您所修改的只是提交信息。</p>\n<p>文本编辑器启动后，可以看到之前的提交信息。编辑后保存会覆盖原来的提交信息。</p>\n<p>例如，您提交后发现忘记了暂存某些需要的修改，可以像下面这样操作:</p>\n<div class=\"language-sh\" data-highlighter=\"shiki\" data-ext=\"sh\" data-title=\"sh\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">git</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> commit</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> -m</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 'initial commit'</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">git</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> add</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> forgotten_file</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">git</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> commit</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> --amend</span></span></code></pre>\n</div><p>最终您只会有一个提交——第二次提交将代替第一次提交的结果。</p>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">提示</p>\n<p>当您在修补最后的提交时，并不是通过用改进后的提交 原位替换 掉旧有提交的方式来修复\n的， 理解这一点非常重要。从效果上来说，就像是旧有的提交从未存在过一样，它并不会出\n现在仓库的历史中。</p>\n<p>修补提交最明显的价值是可以稍微改进您最后的提交，而不会让“啊，忘了添加一个文件”或\n者 “小修补，修正笔误”这种提交信息弄乱您的仓库历史。</p>\n</div>\n","env":{"base":"/","filePath":"/Users/carson/Desktop/Mister-Hope.github.io-main/src/software/git/recall.md","filePathRelative":"software/git/recall.md","frontmatter":{"date":"2020-05-11T00:00:00.000Z","title":"撤销操作","icon":"return","order":5,"category":"Git","tag":["Git","软件"]},"sfcBlocks":{"template":{"type":"template","content":"<template><p>在任何一个阶段，您都有可能想要撤消某些操作。这里，我们将会学习几个撤消您所做修改的基本工具。注\n意，有些撤消操作是不可逆的。这是在使用 Git 的过程中，会因为操作失误而导致之前的工作丢失的少有的几个\n地方之一。</p>\n<p>有时候我们提交完了才发现漏掉了几个文件没有添加，或者提交信息写错了。此时，可以运行带有 <code v-pre>--amend</code> 选\n项的提交命令来重新提交:</p>\n<div class=\"language-sh\" data-highlighter=\"shiki\" data-ext=\"sh\" data-title=\"sh\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">git</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> commit</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> --amend</span></span></code></pre>\n</div><p>这个命令会将暂存区中的文件提交。如果自上次提交以来您还未做任何修改(例如，在上次提交后马上执行了\n此命令)， 那么快照会保持不变，而您所修改的只是提交信息。</p>\n<p>文本编辑器启动后，可以看到之前的提交信息。编辑后保存会覆盖原来的提交信息。</p>\n<p>例如，您提交后发现忘记了暂存某些需要的修改，可以像下面这样操作:</p>\n<div class=\"language-sh\" data-highlighter=\"shiki\" data-ext=\"sh\" data-title=\"sh\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">git</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> commit</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> -m</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 'initial commit'</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">git</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> add</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> forgotten_file</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">git</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> commit</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> --amend</span></span></code></pre>\n</div><p>最终您只会有一个提交——第二次提交将代替第一次提交的结果。</p>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">提示</p>\n<p>当您在修补最后的提交时，并不是通过用改进后的提交 原位替换 掉旧有提交的方式来修复\n的， 理解这一点非常重要。从效果上来说，就像是旧有的提交从未存在过一样，它并不会出\n现在仓库的历史中。</p>\n<p>修补提交最明显的价值是可以稍微改进您最后的提交，而不会让“啊，忘了添加一个文件”或\n者 “小修补，修正笔误”这种提交信息弄乱您的仓库历史。</p>\n</div>\n</template>","contentStripped":"<p>在任何一个阶段，您都有可能想要撤消某些操作。这里，我们将会学习几个撤消您所做修改的基本工具。注\n意，有些撤消操作是不可逆的。这是在使用 Git 的过程中，会因为操作失误而导致之前的工作丢失的少有的几个\n地方之一。</p>\n<p>有时候我们提交完了才发现漏掉了几个文件没有添加，或者提交信息写错了。此时，可以运行带有 <code v-pre>--amend</code> 选\n项的提交命令来重新提交:</p>\n<div class=\"language-sh\" data-highlighter=\"shiki\" data-ext=\"sh\" data-title=\"sh\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">git</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> commit</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> --amend</span></span></code></pre>\n</div><p>这个命令会将暂存区中的文件提交。如果自上次提交以来您还未做任何修改(例如，在上次提交后马上执行了\n此命令)， 那么快照会保持不变，而您所修改的只是提交信息。</p>\n<p>文本编辑器启动后，可以看到之前的提交信息。编辑后保存会覆盖原来的提交信息。</p>\n<p>例如，您提交后发现忘记了暂存某些需要的修改，可以像下面这样操作:</p>\n<div class=\"language-sh\" data-highlighter=\"shiki\" data-ext=\"sh\" data-title=\"sh\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre v-pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">git</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> commit</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> -m</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 'initial commit'</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">git</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> add</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> forgotten_file</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">git</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> commit</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> --amend</span></span></code></pre>\n</div><p>最终您只会有一个提交——第二次提交将代替第一次提交的结果。</p>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">提示</p>\n<p>当您在修补最后的提交时，并不是通过用改进后的提交 原位替换 掉旧有提交的方式来修复\n的， 理解这一点非常重要。从效果上来说，就像是旧有的提交从未存在过一样，它并不会出\n现在仓库的历史中。</p>\n<p>修补提交最明显的价值是可以稍微改进您最后的提交，而不会让“啊，忘了添加一个文件”或\n者 “小修补，修正笔误”这种提交信息弄乱您的仓库历史。</p>\n</div>\n","tagOpen":"<template>","tagClose":"</template>"},"script":null,"scriptSetup":null,"scripts":[],"styles":[],"customBlocks":[]},"content":"\n在任何一个阶段，您都有可能想要撤消某些操作。这里，我们将会学习几个撤消您所做修改的基本工具。注\n意，有些撤消操作是不可逆的。这是在使用 Git 的过程中，会因为操作失误而导致之前的工作丢失的少有的几个\n地方之一。\n\n有时候我们提交完了才发现漏掉了几个文件没有添加，或者提交信息写错了。此时，可以运行带有 `--amend` 选\n项的提交命令来重新提交:\n\n```sh\ngit commit --amend\n```\n\n这个命令会将暂存区中的文件提交。如果自上次提交以来您还未做任何修改(例如，在上次提交后马上执行了\n此命令)， 那么快照会保持不变，而您所修改的只是提交信息。\n\n文本编辑器启动后，可以看到之前的提交信息。编辑后保存会覆盖原来的提交信息。\n\n例如，您提交后发现忘记了暂存某些需要的修改，可以像下面这样操作:\n\n```sh\ngit commit -m 'initial commit'\ngit add forgotten_file\ngit commit --amend\n```\n\n最终您只会有一个提交——第二次提交将代替第一次提交的结果。\n\n::: tip\n\n当您在修补最后的提交时，并不是通过用改进后的提交 原位替换 掉旧有提交的方式来修复\n的， 理解这一点非常重要。从效果上来说，就像是旧有的提交从未存在过一样，它并不会出\n现在仓库的历史中。\n\n修补提交最明显的价值是可以稍微改进您最后的提交，而不会让“啊，忘了添加一个文件”或\n者 “小修补，修正笔误”这种提交信息弄乱您的仓库历史。\n\n:::\n","excerpt":"","title":"","headers":[]}}
